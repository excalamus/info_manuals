This is shapely.info, produced by makeinfo version 6.5 from
shapely.texi.

     Shapely 1.8dev, Jan 19, 2021

     unknown

     Copyright © 2011-2013, Sean Gillies, Aron Bierbaum, Kai Lautaportti
     and others

INFO-DIR-SECTION Miscellaneous
START-INFO-DIR-ENTRY
* shapely: (shapely.info). One line description of project
END-INFO-DIR-ENTRY


   Generated by Sphinx 2.3.1.


File: shapely.info,  Node: Top,  Next: Documentation Contents,  Up: (dir)

Shapely
*******

     Shapely 1.8dev, Jan 19, 2021

     unknown

     Copyright © 2011-2013, Sean Gillies, Aron Bierbaum, Kai Lautaportti
     and others

* Menu:

* Documentation Contents::
* Indices and tables::
* Index::

 — The Detailed Node Listing —

Documentation Contents

* Shapely: Shapely<2>.
* The Shapely User Manual::

Shapely

* Usage::
* Requirements::
* Installing Shapely::
* Integration::
* Development and Testing::
* Support::
* Credits::
* Changes::
* Frequently asked questions and answers::

Installing Shapely

* Built distributions::
* Source distributions::

Changes

* 1.8.0 (TBD): 1 8 0 TBD.
* 1.7.1 (2020-08-20): 1 7 1 2020-08-20.
* 1.7.0 (2020-01-28): 1 7 0 2020-01-28.
* 1.7b1 (2020-01-13): 1 7b1 2020-01-13.
* 1.7a3 (2019-12-31): 1 7a3 2019-12-31.
* 1.7a2 (2019-06-21): 1 7a2 2019-06-21.
* 1.7a1 (2018-07-29): 1 7a1 2018-07-29.
* 1.6.4.post1 (2018-01-24): 1 6 4 post1 2018-01-24.
* 1.6.4 (2018-01-24): 1 6 4 2018-01-24.
* 1.6.3 (2017-12-09): 1 6 3 2017-12-09.
* 1.6.2 (2017-10-30): 1 6 2 2017-10-30.
* 1.6.2 (2017-10-26): 1 6 2 2017-10-26.
* 1.6.1 (2017-09-01): 1 6 1 2017-09-01.
* 1.6.0 (2017-08-21): 1 6 0 2017-08-21.
* 1.6b5 (2017-08-18): 1 6b5 2017-08-18.
* 1.6b4 (2017-02-15): 1 6b4 2017-02-15.
* 1.6b3 (2016-12-31): 1 6b3 2016-12-31.
* 1.6b2 (2016-12-12): 1 6b2 2016-12-12.
* 1.6b1 (2016-12-12): 1 6b1 2016-12-12.
* 1.6a3 (2016-12-01): 1 6a3 2016-12-01.
* 1.6a2 (2016-11-09): 1 6a2 2016-11-09.
* 1.6a1 (2016-09-14): 1 6a1 2016-09-14.
* 1.5.17 (2016-08-31): 1 5 17 2016-08-31.
* 1.5.16 (2016-05-26): 1 5 16 2016-05-26.
* 1.5.15 (2016-03-29): 1 5 15 2016-03-29.
* 1.5.14 (2016-03-27): 1 5 14 2016-03-27.
* 1.5.13 (2015-10-09): 1 5 13 2015-10-09.
* 1.5.12 (2015-08-27): 1 5 12 2015-08-27.
* 1.5.11 (2015-08-23): 1 5 11 2015-08-23.
* 1.5.10 (2015-08-22): 1 5 10 2015-08-22.
* 1.5.9 (2015-05-27): 1 5 9 2015-05-27.
* 1.5.8 (2015-04-29): 1 5 8 2015-04-29.
* 1.5.7 (2015-03-16): 1 5 7 2015-03-16.
* 1.5.6 (2015-02-02): 1 5 6 2015-02-02.
* 1.5.5 (2015-01-20): 1 5 5 2015-01-20.
* 1.5.4 (2015-01-19): 1 5 4 2015-01-19.
* 1.5.3 (2015-01-12): 1 5 3 2015-01-12.
* 1.5.2 (2015-01-04): 1 5 2 2015-01-04.
* 1.5.1 (2014-12-04): 1 5 1 2014-12-04.
* 1.5.0 (2014-12-02): 1 5 0 2014-12-02.
* 1.4.4 (2014-11-02): 1 4 4 2014-11-02.
* 1.4.3 (2014-10-01): 1 4 3 2014-10-01.
* 1.4.2 (2014-09-29): 1 4 2 2014-09-29.
* 1.4.1 (2014-09-23): 1 4 1 2014-09-23.
* 1.4.0 (2014-09-08): 1 4 0 2014-09-08.
* 1.3.3 (2014-07-23): 1 3 3 2014-07-23.
* 1.3.2 (2014-05-13): 1 3 2 2014-05-13.
* 1.3.1 (2014-04-22): 1 3 1 2014-04-22.
* 1.3.0 (2013-12-31): 1 3 0 2013-12-31.
* 1.2.19 (2013-12-30): 1 2 19 2013-12-30.
* 1.2.18 (2013-07-23): 1 2 18 2013-07-23.
* 1.2.17 (2013-01-27): 1 2 17 2013-01-27.
* 1.2.16 (2012-09-18): 1 2 16 2012-09-18.
* 1.2.15 (2012-06-27): 1 2 15 2012-06-27.
* 1.2.14 (2012-01-23): 1 2 14 2012-01-23.
* 1.2.13 (2011-09-16): 1 2 13 2011-09-16.
* 1.2.12 (2011-08-15): 1 2 12 2011-08-15.
* 1.2.11 (2011-08-04): 1 2 11 2011-08-04.
* 1.2.10 (2011-05-09): 1 2 10 2011-05-09.
* 1.2.9 (2011-03-31): 1 2 9 2011-03-31.
* 1.2.8 (2011-12-03): 1 2 8 2011-12-03.
* 1.2.7 (2010-11-05): 1 2 7 2010-11-05.
* 1.2.6 (2010-10-21): 1 2 6 2010-10-21.
* 1.2.5 (2010-09-19): 1 2 5 2010-09-19.
* 1.2.4 (2010-09-09): 1 2 4 2010-09-09.
* 1.2.3 (2010-08-17): 1 2 3 2010-08-17.
* 1.2.2 (2010-07-23): 1 2 2 2010-07-23.
* 1.2.1 (2010-06-23): 1 2 1 2010-06-23.
* 1.2 (2010-05-27): 1 2 2010-05-27.
* 1.2rc2 (2010-05-26): 1 2rc2 2010-05-26.
* 1.2rc1 (2010-05-25): 1 2rc1 2010-05-25.
* 1.2b7 (2010-04-22): 1 2b7 2010-04-22.
* 1.2b6 (2010-04-13): 1 2b6 2010-04-13.
* 1.2b5 (2010-04-09): 1 2b5 2010-04-09.
* 1.2b4 (2010-03-19): 1 2b4 2010-03-19.
* 1.2b3 (2010-02-28): 1 2b3 2010-02-28.
* 1.2b2 (2010-02-19): 1 2b2 2010-02-19.
* 1.2b1 (2010-02-18): 1 2b1 2010-02-18.
* 1.2a6 (2010-02-09): 1 2a6 2010-02-09.
* 1.2a1 (2010-01-20): 1 2a1 2010-01-20.
* 1.0.12 (2009-04-09): 1 0 12 2009-04-09.
* 1.0.11 (2008-11-20): 1 0 11 2008-11-20.
* 1.0.10 (2008-11-17): 1 0 10 2008-11-17.
* 1.0.9 (2008-11-16): 1 0 9 2008-11-16.
* 1.0.8 (2008-11-01): 1 0 8 2008-11-01.
* 1.0.7 (2008-08-22): 1 0 7 2008-08-22.
* 1.0.6 (2008-07-10): 1 0 6 2008-07-10.
* 1.0.5 (2008-05-20): 1 0 5 2008-05-20.
* 1.0.4 (2008-05-01): 1 0 4 2008-05-01.
* 1.0.3 (2008-04-09): 1 0 3 2008-04-09.
* 1.0.2 (2008-02-26): 1 0 2 2008-02-26.
* 1.0.1 (2008-02-08): 1 0 1 2008-02-08.
* 1.0 (2008-01-18): 1 0 2008-01-18.
* 1.0 RC2 (2008-01-16): 1 0 RC2 2008-01-16.
* 1.0 RC1 (2008-01-14): 1 0 RC1 2008-01-14.

Frequently asked questions and answers

* Are there references for the algorithms used by shapely?::
* I used .buffer() on a geometry with Z coordinates. Where did the Z coordinates go?: I used buffer on a geometry with Z coordinates Where did the Z coordinates go?.

The Shapely User Manual

* Introduction::
* Geometric Objects::
* Predicates and Relationships::
* Spatial Analysis Methods::
* Affine Transformations::
* Other Transformations::
* Other Operations::
* STR-packed R-tree::
* Interoperation::
* Performance::
* Conclusion::
* References::

Introduction

* Spatial Data Model::
* Relationships::
* Operations::
* Coordinate Systems::

Geometric Objects

* General Attributes and Methods::
* Points::
* LineStrings::
* LinearRings::
* Polygons::
* Collections::
* Collections of Points::
* Collections of Lines::
* Collections of Polygons::
* Empty features::
* Coordinate sequences::
* Linear Referencing Methods::

Predicates and Relationships

* Unary Predicates::
* Binary Predicates::
* DE-9IM Relationships::

Spatial Analysis Methods

* Set-theoretic Methods::
* Constructive Methods::

Other Operations

* Merging Linear Features::
* Efficient Unions::
* Delaunay triangulation::
* Voronoi Diagram::
* Nearest points::
* Snapping::
* Shared paths::
* Splitting::
* Substring::
* Prepared Geometry Operations::
* Diagnostics::
* Polylabel::

Interoperation

* Well-Known Formats::
* Numpy and Python Arrays::
* Python Geo Interface::



File: shapely.info,  Node: Documentation Contents,  Next: Indices and tables,  Prev: Top,  Up: Top

1 Documentation Contents
************************

* Menu:

* Shapely: Shapely<2>.
* The Shapely User Manual::


File: shapely.info,  Node: Shapely<2>,  Next: The Shapely User Manual,  Up: Documentation Contents

1.1 Shapely
===========

[travis]
[appveyor]
[coveralls]
Manipulation and analysis of geometric objects in the Cartesian plane.

[shapely-figures/31301790086_b3472ea4e9_c]
Shapely is a BSD-licensed Python package for manipulation and analysis
of planar geometric objects.  It is based on the widely deployed GEOS(1)
(the engine of PostGIS(2)) and JTS(3) (from which GEOS is ported)
libraries.  Shapely is not concerned with data formats or coordinate
systems, but can be readily integrated with packages that are.  For more
details, see:

   * Shapely GitHub repository(4)

   * Shapely documentation and manual(5)

* Menu:

* Usage::
* Requirements::
* Installing Shapely::
* Integration::
* Development and Testing::
* Support::
* Credits::
* Changes::
* Frequently asked questions and answers::

   ---------- Footnotes ----------

   (1) https://trac.osgeo.org/geos/

   (2) http://postgis.org

   (3) https://locationtech.github.io/jts/

   (4) https://github.com/Toblerity/Shapely

   (5) https://shapely.readthedocs.io/en/latest/


File: shapely.info,  Node: Usage,  Next: Requirements,  Up: Shapely<2>

1.1.1 Usage
-----------

Here is the canonical example of building an approximately circular
patch by buffering a point.

     >>> from shapely.geometry import Point
     >>> patch = Point(0.0, 0.0).buffer(10.0)
     >>> patch
     <shapely.geometry.polygon.Polygon object at 0x...>
     >>> patch.area
     313.65484905459385

See the manual for more examples and guidance.


File: shapely.info,  Node: Requirements,  Next: Installing Shapely,  Prev: Usage,  Up: Shapely<2>

1.1.2 Requirements
------------------

Shapely 1.7 requires

   * Python 2.7, >=3.5

   * GEOS >=3.3


File: shapely.info,  Node: Installing Shapely,  Next: Integration,  Prev: Requirements,  Up: Shapely<2>

1.1.3 Installing Shapely
------------------------

Shapely may be installed from a source distribution or one of several
kinds of built distribution.

* Menu:

* Built distributions::
* Source distributions::


File: shapely.info,  Node: Built distributions,  Next: Source distributions,  Up: Installing Shapely

1.1.3.1 Built distributions
...........................

Built distributions are the only option for users who do not have or do
not know how to use their platform’s compiler and Python SDK, and a good
option for users who would rather not bother.

Linux, OS X, and Windows users can get Shapely wheels with GEOS included
from the Python Package Index with a recent version of pip (8+):

     $ pip install shapely

Shapely is available via system package management tools like apt, yum,
and Homebrew, and is also provided by popular Python distributions like
Canopy and Anaconda.  If you use the Conda package manager to install
Shapely, be sure to use the conda-forge channel.

Windows users have another good installation options: the wheels
published at ‘https://www.lfd.uci.edu/~gohlke/pythonlibs/#shapely’.
These can be installed using pip by specifying the entire URL.


File: shapely.info,  Node: Source distributions,  Prev: Built distributions,  Up: Installing Shapely

1.1.3.2 Source distributions
............................

If you want to build Shapely from source for compatibility with other
modules that depend on GEOS (such as cartopy or osgeo.ogr) or want to
use a different version of GEOS than the one included in the project
wheels you should first install the GEOS library, Cython, and Numpy on
your system (using apt, yum, brew, or other means) and then direct pip
to ignore the binary wheels.

     $ pip install shapely --no-binary shapely

If you’ve installed GEOS to a standard location, the geos-config program
will be used to get compiler and linker options.  If geos-config is not
on your executable, it can be specified with a GEOS_CONFIG environment
variable, e.g.:

     $ GEOS_CONFIG=/path/to/geos-config pip install shapely


File: shapely.info,  Node: Integration,  Next: Development and Testing,  Prev: Installing Shapely,  Up: Shapely<2>

1.1.4 Integration
-----------------

Shapely does not read or write data files, but it can serialize and
deserialize using several well known formats and protocols.  The
shapely.wkb and shapely.wkt modules provide dumpers and loaders inspired
by Python’s pickle module.

     >>> from shapely.wkt import dumps, loads
     >>> dumps(loads('POINT (0 0)'))
     'POINT (0.0000000000000000 0.0000000000000000)'

Shapely can also integrate with other Python GIS packages using
GeoJSON-like dicts.

     >>> import json
     >>> from shapely.geometry import mapping, shape
     >>> s = shape(json.loads('{"type": "Point", "coordinates": [0.0, 0.0]}'))
     >>> s
     <shapely.geometry.point.Point object at 0x...>
     >>> print(json.dumps(mapping(s)))
     {"type": "Point", "coordinates": [0.0, 0.0]}


File: shapely.info,  Node: Development and Testing,  Next: Support,  Prev: Integration,  Up: Shapely<2>

1.1.5 Development and Testing
-----------------------------

Dependencies for developing Shapely are listed in requirements-dev.txt.
Cython and Numpy are not required for production installations, only for
development.  Use of a virtual environment is strongly recommended.

     $ virtualenv .
     $ source bin/activate
     (env)$ pip install -r requirements-dev.txt
     (env)$ pip install -e .

The project uses pytest to run Shapely’s suite of unittests and
doctests.

     (env)$ python -m pytest


File: shapely.info,  Node: Support,  Next: Credits,  Prev: Development and Testing,  Up: Shapely<2>

1.1.6 Support
-------------

Questions about using Shapely may be asked on the GIS StackExchange(1)
using the “shapely” tag.

Bugs may be reported at ‘https://github.com/Toblerity/Shapely/issues’.

   ---------- Footnotes ----------

   (1) https://gis.stackexchange.com/questions/tagged/shapely


File: shapely.info,  Node: Credits,  Next: Changes,  Prev: Support,  Up: Shapely<2>

1.1.7 Credits
-------------

Shapely is written by:

   * Allan Adair <<allan.m.adair@gmail.com>>

   * Andrew Blakey <<ablakey@gmail.com>>

   * Andy Freeland <<andy@andyfreeland.net>>

   * Ariel Kadouri <<ariel@arielsartistry.com>>

   * Aron Bierbaum <<aronbierbaum@gmail.com>>

   * Bart Broere <<2715782+bartbroere@users.noreply.github.com>>

   * Bas Couwenberg <<sebastic@xs4all.nl>>

   * Benjamin Root <<ben.v.root@gmail.com>>

   * BertrandGervais <<bertrand.gervais.pro@gmail.com>>

   * Brad Hards <<bradh@frogmouth.net>>

   * Brandon Wood <<btwood@geometeor.com>>

   * Chad Hawkins <<cwh@chadwhawkins.com>>

   * Christian Prior <<cprior@gmail.com>>

   * Christian Quest <<github@cquest.org>>

   * Christophe Pradal <<christophe.pradal@inria.fr>>

   * Daniele Esposti <<expobrain@users.noreply.github.com>>

   * Dave Collins <<dave@hopest.net>>

   * David Baumgold <<david@davidbaumgold.com>>

   * David Swinkels <<davidswinkelss@gmail.com>>

   * Denis Rykov <<rykovd@gmail.com>>

   * Erwin Sterrenburg <<e.w.sterrenburg@gmail.com>>

   * Felix Yan <<felixonmars@archlinux.org>>

   * Filipe Fernandes <<ocefpaf@gmail.com>>

   * Frédéric Junod <<frederic.junod@camptocamp.com>>

   * Gabi Davar <<grizzly.nyo@gmail.com>>

   * Gerrit Holl <<gerrit.holl@dwd.de>>

   * Hannes <<kannes@users.noreply.github.com>>

   * Hao Zheng <<Furioushaozheng@gmail.com>>

   * Henry Walshaw <<henry.walshaw@gmail.com>>

   * Howard Butler <<hobu.inc@gmail.com>>

   * Hugo <<hugovk@users.noreply.github.com>>

   * Jacob Wasserman <<jwasserman@gmail.com>>

   * James Douglass <<jamesdouglassusa@gmail.com>>

   * James Gaboardi <<jgaboardi@gmail.com>>

   * James Lamb <<jaylamb20@gmail.com>>

   * James McBride <<jdmcbr@gmail.com>>

   * James Spencer <<james.s.spencer@gmail.com>>

   * Jamie Hall <<jamie1212@gmail.com>>

   * Jason Sanford <<jason.sanford@mapmyfitness.com>>

   * Jeethu Rao <<jeethu@jeethurao.com>>

   * Jeremiah England
     <<34973839+Jeremiah-England@users.noreply.github.com>>

   * Jinkun Wang <<mejkunw@gmail.com>>

   * Johan Euphrosine <<proppy@aminche.com>>

   * Johannes Schönberger <<jschoenberger@demuc.de>>

   * Jonathan Schoonhoven <<jschoonhoven@lyft.com>>

   * Joris Van den Bossche <<jorisvandenbossche@gmail.com>>

   * Joshua Arnott <<josh@snorfalorpagus.net>>

   * Juan Luis Cano Rodríguez <<juanlu@satellogic.com>>

   * Kai Lautaportti <<dokai@b426a367-1105-0410-b9ff-cdf4ab011145>>

   * Kelsey Jordahl <<kjordahl@enthought.com>>

   * Kevin Wurster <<wursterk@gmail.com>>

   * Konstantin Veretennicov <<kveretennicov@gmail.com>>

   * Koshy Thomas <<koshy1123@gmail.com>>

   * Kristian Evers <<kristianevers@gmail.com>>

   * Kyle Barron <<kylebarron2@gmail.com>>

   * Leandro Lima <<leandro@limaesilva.com.br>>

   * Lukasz <<uhho@users.noreply.github.com>>

   * Luke Lee <<durdenmisc@gmail.com>>

   * Maarten Vermeyen <<maarten.vermeyen@rwo.vlaanderen.be>>

   * Marc Jansen <<jansen@terrestris.de>>

   * Marco De Nadai <<me@marcodena.it>>

   * Mathieu <<mathieu.nivel@gmail.com>>

   * Matt Amos <<matt.amos@mapzen.com>>

   * Michel Blancard <<michel.blancard@data.gouv.fr>>

   * Mike Taves <<mwtoews@gmail.com>>

   * Morris Tweed <<tweed.morris@gmail.com>>

   * Naveen Michaud-Agrawal <<naveen.michaudagrawal@gmail.com>>

   * Oliver Tonnhofer <<olt@bogosoft.com>>

   * Paveł Tyślacki <<tbicr@users.noreply.github.com>>

   * Peter Sagerson <<psagers.github@ignorare.net>>

   * Phil Elson <<pelson.pub@gmail.com>>

   * Pierre PACI <<villerupt@gmail.com>>

   * Ricardo Zilleruelo <<51384295+zetaatlyft@users.noreply.github.com>>

   * S Murthy <<sr-murthy@users.noreply.github.com>>

   * Sampo Syrjanen <<sampo.syrjanen@here.com>>

   * Samuel Chin <<samuelchin91@gmail.com>>

   * Sean Gillies <<sean.gillies@gmail.com>>

   * Sobolev Nikita <<mail@sobolevn.me>>

   * Stephan Hügel <<urschrei@gmail.com>>

   * Steve M. Kim <<steve@climate.com>>

   * Taro Matsuzawa aka.  btm <<btm@tech.email.ne.jp>>

   * Thibault Deutsch <<thibault.deutsch@gmail.com>>

   * Thomas Kluyver <<takowl@gmail.com>>

   * Tobias Sauerwein <<tobias.sauerwein@camptocamp.com>>

   * Tom Caruso <<carusot42@gmail.com>>

   * Tom Clancy <<17627475+clncy@users.noreply.github.com>>

   * WANG Aiyong <<gepcelway@gmail.com>>

   * Will May <<williamcmay@live.com>>

   * Zachary Ware <<zachary.ware@gmail.com>>

   * cclauss <<cclauss@me.com>>

   * clefrks <<33859587+clefrks@users.noreply.github.com>>

   * davidh-ssec <<david.hoese@ssec.wisc.edu>>

   * georgeouzou <<geothrock@gmail.com>>

   * giumas <<gmasetti@ccom.unh.edu>>

   * joelostblom <<joelostblom@users.noreply.github.com>>

   * ljwolf <<levi.john.wolf@gmail.com>>

   * mindw <<grizzly.nyo@gmail.com>>

   * rsmb <<rsmb@users.noreply.github.com>>

   * shongololo <<garethsimons@me.com>>

   * solarjoe <<walterwhite666@googlemail.com>>

   * stephenworsley <<49274989+stephenworsley@users.noreply.github.com>>

See also: ‘https://github.com/Toblerity/Shapely/graphs/contributors’.

Additional help from:

   * Justin Bronn (GeoDjango) for ctypes inspiration

   * Martin Davis (JTS)

   * Sandro Santilli, Mateusz Loskot, Paul Ramsey, et al (GEOS Project)

Major portions of this work were supported by a grant (for Pleiades(1))
from the U.S. National Endowment for the Humanities
(‘https://www.neh.gov’).

   ---------- Footnotes ----------

   (1) https://pleiades.stoa.org


File: shapely.info,  Node: Changes,  Next: Frequently asked questions and answers,  Prev: Credits,  Up: Shapely<2>

1.1.8 Changes
-------------

* Menu:

* 1.8.0 (TBD): 1 8 0 TBD.
* 1.7.1 (2020-08-20): 1 7 1 2020-08-20.
* 1.7.0 (2020-01-28): 1 7 0 2020-01-28.
* 1.7b1 (2020-01-13): 1 7b1 2020-01-13.
* 1.7a3 (2019-12-31): 1 7a3 2019-12-31.
* 1.7a2 (2019-06-21): 1 7a2 2019-06-21.
* 1.7a1 (2018-07-29): 1 7a1 2018-07-29.
* 1.6.4.post1 (2018-01-24): 1 6 4 post1 2018-01-24.
* 1.6.4 (2018-01-24): 1 6 4 2018-01-24.
* 1.6.3 (2017-12-09): 1 6 3 2017-12-09.
* 1.6.2 (2017-10-30): 1 6 2 2017-10-30.
* 1.6.2 (2017-10-26): 1 6 2 2017-10-26.
* 1.6.1 (2017-09-01): 1 6 1 2017-09-01.
* 1.6.0 (2017-08-21): 1 6 0 2017-08-21.
* 1.6b5 (2017-08-18): 1 6b5 2017-08-18.
* 1.6b4 (2017-02-15): 1 6b4 2017-02-15.
* 1.6b3 (2016-12-31): 1 6b3 2016-12-31.
* 1.6b2 (2016-12-12): 1 6b2 2016-12-12.
* 1.6b1 (2016-12-12): 1 6b1 2016-12-12.
* 1.6a3 (2016-12-01): 1 6a3 2016-12-01.
* 1.6a2 (2016-11-09): 1 6a2 2016-11-09.
* 1.6a1 (2016-09-14): 1 6a1 2016-09-14.
* 1.5.17 (2016-08-31): 1 5 17 2016-08-31.
* 1.5.16 (2016-05-26): 1 5 16 2016-05-26.
* 1.5.15 (2016-03-29): 1 5 15 2016-03-29.
* 1.5.14 (2016-03-27): 1 5 14 2016-03-27.
* 1.5.13 (2015-10-09): 1 5 13 2015-10-09.
* 1.5.12 (2015-08-27): 1 5 12 2015-08-27.
* 1.5.11 (2015-08-23): 1 5 11 2015-08-23.
* 1.5.10 (2015-08-22): 1 5 10 2015-08-22.
* 1.5.9 (2015-05-27): 1 5 9 2015-05-27.
* 1.5.8 (2015-04-29): 1 5 8 2015-04-29.
* 1.5.7 (2015-03-16): 1 5 7 2015-03-16.
* 1.5.6 (2015-02-02): 1 5 6 2015-02-02.
* 1.5.5 (2015-01-20): 1 5 5 2015-01-20.
* 1.5.4 (2015-01-19): 1 5 4 2015-01-19.
* 1.5.3 (2015-01-12): 1 5 3 2015-01-12.
* 1.5.2 (2015-01-04): 1 5 2 2015-01-04.
* 1.5.1 (2014-12-04): 1 5 1 2014-12-04.
* 1.5.0 (2014-12-02): 1 5 0 2014-12-02.
* 1.4.4 (2014-11-02): 1 4 4 2014-11-02.
* 1.4.3 (2014-10-01): 1 4 3 2014-10-01.
* 1.4.2 (2014-09-29): 1 4 2 2014-09-29.
* 1.4.1 (2014-09-23): 1 4 1 2014-09-23.
* 1.4.0 (2014-09-08): 1 4 0 2014-09-08.
* 1.3.3 (2014-07-23): 1 3 3 2014-07-23.
* 1.3.2 (2014-05-13): 1 3 2 2014-05-13.
* 1.3.1 (2014-04-22): 1 3 1 2014-04-22.
* 1.3.0 (2013-12-31): 1 3 0 2013-12-31.
* 1.2.19 (2013-12-30): 1 2 19 2013-12-30.
* 1.2.18 (2013-07-23): 1 2 18 2013-07-23.
* 1.2.17 (2013-01-27): 1 2 17 2013-01-27.
* 1.2.16 (2012-09-18): 1 2 16 2012-09-18.
* 1.2.15 (2012-06-27): 1 2 15 2012-06-27.
* 1.2.14 (2012-01-23): 1 2 14 2012-01-23.
* 1.2.13 (2011-09-16): 1 2 13 2011-09-16.
* 1.2.12 (2011-08-15): 1 2 12 2011-08-15.
* 1.2.11 (2011-08-04): 1 2 11 2011-08-04.
* 1.2.10 (2011-05-09): 1 2 10 2011-05-09.
* 1.2.9 (2011-03-31): 1 2 9 2011-03-31.
* 1.2.8 (2011-12-03): 1 2 8 2011-12-03.
* 1.2.7 (2010-11-05): 1 2 7 2010-11-05.
* 1.2.6 (2010-10-21): 1 2 6 2010-10-21.
* 1.2.5 (2010-09-19): 1 2 5 2010-09-19.
* 1.2.4 (2010-09-09): 1 2 4 2010-09-09.
* 1.2.3 (2010-08-17): 1 2 3 2010-08-17.
* 1.2.2 (2010-07-23): 1 2 2 2010-07-23.
* 1.2.1 (2010-06-23): 1 2 1 2010-06-23.
* 1.2 (2010-05-27): 1 2 2010-05-27.
* 1.2rc2 (2010-05-26): 1 2rc2 2010-05-26.
* 1.2rc1 (2010-05-25): 1 2rc1 2010-05-25.
* 1.2b7 (2010-04-22): 1 2b7 2010-04-22.
* 1.2b6 (2010-04-13): 1 2b6 2010-04-13.
* 1.2b5 (2010-04-09): 1 2b5 2010-04-09.
* 1.2b4 (2010-03-19): 1 2b4 2010-03-19.
* 1.2b3 (2010-02-28): 1 2b3 2010-02-28.
* 1.2b2 (2010-02-19): 1 2b2 2010-02-19.
* 1.2b1 (2010-02-18): 1 2b1 2010-02-18.
* 1.2a6 (2010-02-09): 1 2a6 2010-02-09.
* 1.2a1 (2010-01-20): 1 2a1 2010-01-20.
* 1.0.12 (2009-04-09): 1 0 12 2009-04-09.
* 1.0.11 (2008-11-20): 1 0 11 2008-11-20.
* 1.0.10 (2008-11-17): 1 0 10 2008-11-17.
* 1.0.9 (2008-11-16): 1 0 9 2008-11-16.
* 1.0.8 (2008-11-01): 1 0 8 2008-11-01.
* 1.0.7 (2008-08-22): 1 0 7 2008-08-22.
* 1.0.6 (2008-07-10): 1 0 6 2008-07-10.
* 1.0.5 (2008-05-20): 1 0 5 2008-05-20.
* 1.0.4 (2008-05-01): 1 0 4 2008-05-01.
* 1.0.3 (2008-04-09): 1 0 3 2008-04-09.
* 1.0.2 (2008-02-26): 1 0 2 2008-02-26.
* 1.0.1 (2008-02-08): 1 0 1 2008-02-08.
* 1.0 (2008-01-18): 1 0 2008-01-18.
* 1.0 RC2 (2008-01-16): 1 0 RC2 2008-01-16.
* 1.0 RC1 (2008-01-14): 1 0 RC1 2008-01-14.


File: shapely.info,  Node: 1 8 0 TBD,  Next: 1 7 1 2020-08-20,  Up: Changes

1.1.8.1 1.8.0 (TBD)
...................

New features:

   - Load libraries relocated to shapely/.libs by auditwheel versions <
     3.1 or relocated to Shapely.libs by auditwheel versions >= 3.1.

   - shapely.ops.voronoi_diagram() computes the Voronoi Diagram of a
     geometry or geometry collection (#833, #851).

   - shapely.validation.make_valid() fixes invalid geometries (#883)


File: shapely.info,  Node: 1 7 1 2020-08-20,  Next: 1 7 0 2020-01-28,  Prev: 1 8 0 TBD,  Up: Changes

1.1.8.2 1.7.1 (2020-08-20)
..........................

   - ‘STRtree’ now safely implements the pickle protocol (#915).

   - Documentation has been added for ‘minimum_clearance’ (#875, #874).

   - In ‘STRtree.__del__()’ we guard against calling
     ‘GEOSSTRtree_destroy’ when the lgeos module has already been torn
     down on exit (#897, #830).

   - Documentation for the ‘overlaps()’ method has been corrected
     (#920).

   - Correct the test in ‘shapely.geometry.base.BaseGeometry.empty()’ to
     eliminate memory leaks like the one reported in #745.

   - Get free() not from libc but from the processes global symbols
     (#891), fixing a bug that manifests on OS X 10.15 and 10.16.

   - Extracting substrings from complex lines has been made more correct
     (#848, #849).

   - Splitting of complex geometries has been sped up by preparing the
     input geometry (#871).

   - Fix bug in concatenation of function argtypes (#866).

   - Improved documentation of STRtree usage (#857).

   - Improved handling for empty list or list of lists in GeoJSON
     coordinates (#852).

   - The polylabel algorithm now accounts for polygon holes (#851,
     #817).


File: shapely.info,  Node: 1 7 0 2020-01-28,  Next: 1 7b1 2020-01-13,  Prev: 1 7 1 2020-08-20,  Up: Changes

1.1.8.3 1.7.0 (2020-01-28)
..........................

This is the final 1.7.0 release.  There have been no changes since
1.7b1.


File: shapely.info,  Node: 1 7b1 2020-01-13,  Next: 1 7a3 2019-12-31,  Prev: 1 7 0 2020-01-28,  Up: Changes

1.1.8.4 1.7b1 (2020-01-13)
..........................

First beta release.


File: shapely.info,  Node: 1 7a3 2019-12-31,  Next: 1 7a2 2019-06-21,  Prev: 1 7b1 2020-01-13,  Up: Changes

1.1.8.5 1.7a3 (2019-12-31)
..........................

New features:

   - The buffer operation can now be single-sides (#806, #727).

Bug fixes:

   - Add /usr/local/lib to the list of directories to be searched for
     the GEOS shared library (#795).

   - ops.substring now returns a line with coords in end-to-front order
     when given a start position that is greater than the end position
     (#628).

   - Implement ‘__bool__()’ for geometry base classes so that
     ‘bool(geom)’ returns the logical complement of ‘geom.is_empty’
     (#754).

   - Remove assertion on the number of version-like strings found in the
     GEOS version string.  It could be 2 or 3.


File: shapely.info,  Node: 1 7a2 2019-06-21,  Next: 1 7a1 2018-07-29,  Prev: 1 7a3 2019-12-31,  Up: Changes

1.1.8.6 1.7a2 (2019-06-21)
..........................

   - Nearest neighbor search has been added to STRtree (#668).

   - Disallow sequences of MultiPolygons as arguments to the
     MultiPolygon constructor, resolving #588.

   - Removed vendorized ‘functools’ functions previously used to support
     Python 2.5.

Bug fixes:

   - Avoid reloading the GEOS shared library when using an installed
     binary wheel on OS X (#735), resolving issue #553.

   - The shapely.ops.orient function can now orient multi polygons and
     geometry collections as well as polygons (#733).

   - Polygons can now be constructed from sequences of point objects as
     well as sequences of x, y sequences (#732).

   - The exterior of an empty polygon is now equal to an empty linear
     ring (#731).

   - The bounds property of an empty point object now returns an empty
     tuple, consistent with other geometry types (#723).

   - Segmentation faults when non-string values are passed to the WKT
     loader are avoided by #700.

   - Failure of ops.substring when the sub linestring coincides with the
     beginning of the linestring has been fixed (#658).

   - Segmentation faults from interpolating on an empty linestring are
     prevented by #655.

   - A missing special case for rectangular polygons has been added to
     the polylabel algorithm (#644).

   - LinearRing can be created from a LineString (#638).

   - The prepared geoemtry validation condition has been tightened in
     #632 to fix the bug reported in #631.

   - Attempting to interpolate an empty geometry no longer results in a
     segmentation fault, raising ‘ValueError’ instead (#653).


File: shapely.info,  Node: 1 7a1 2018-07-29,  Next: 1 6 4 post1 2018-01-24,  Prev: 1 7a2 2019-06-21,  Up: Changes

1.1.8.7 1.7a1 (2018-07-29)
..........................

New features:

   - A Python version check is made by the package setup script.
     Shapely 1.7 supports only Python versions 2.7 and 3.4+ (#610).

   - Added a new ‘EmptyGeometry’ class to support GeoPandas (#514).

   - Added new ‘shapely.ops.substring’ function (#459).

   - Added new ‘shapely.ops.clip_by_rect’ function (#583).

   - Use DLLs indicated in sys._MEIPASS’ to support PyInstaller frozen
     apps (#523).

   - ‘shapely.wkb.dumps’ now accepts an ‘srid’ integer keyword argument
     to write WKB data including a spatial reference ID in the output
     data (#593).

Bug fixes:

   - ‘shapely.geometry.shape’ can now marshal empty GeoJSON
     representations (#573).

   - An exception is raised when an attempt is made to ‘prepare’ a
     ‘PreparedGeometry’ (#577, #595).

   - Keyword arguments have been removed from a geometry object’s ‘wkt’
     property getter (#581, #594).


File: shapely.info,  Node: 1 6 4 post1 2018-01-24,  Next: 1 6 4 2018-01-24,  Prev: 1 7a1 2018-07-29,  Up: Changes

1.1.8.8 1.6.4.post1 (2018-01-24)
................................

   - Fix broken markup in this change log, which restores our nicely
     formatted readme on PyPI.


File: shapely.info,  Node: 1 6 4 2018-01-24,  Next: 1 6 3 2017-12-09,  Prev: 1 6 4 post1 2018-01-24,  Up: Changes

1.1.8.9 1.6.4 (2018-01-24)
..........................

   - Handle a ‘TypeError’ that can occur when geometries are torn down
     (#473, #528).


File: shapely.info,  Node: 1 6 3 2017-12-09,  Next: 1 6 2 2017-10-30,  Prev: 1 6 4 2018-01-24,  Up: Changes

1.1.8.10 1.6.3 (2017-12-09)
...........................

   - AttributeError is no longer raised when accessing __geo_interface__
     of an empty polygon (#450).

   - ‘asShape’ now handles empty coordinates in mappings as ‘shape’ does
     (#542).  Please note that ‘asShape’ is likely to be deprecated in a
     future version of Shapely.

   - Check for length of LineString coordinates in speed mode,
     preventing crashes when using LineStrings with only one coordinate
     (#546).


File: shapely.info,  Node: 1 6 2 2017-10-30,  Next: 1 6 2 2017-10-26,  Prev: 1 6 3 2017-12-09,  Up: Changes

1.1.8.11 1.6.2 (2017-10-30)
...........................

   - A 1.6.2.post1 release has been made to fix a problem with macosx
     wheels uploaded to PyPI.


File: shapely.info,  Node: 1 6 2 2017-10-26,  Next: 1 6 1 2017-09-01,  Prev: 1 6 2 2017-10-30,  Up: Changes

1.1.8.12 1.6.2 (2017-10-26)
...........................

   - Splitting a linestring by one of its end points will now succeed
     instead of failing with a ‘ValueError’ (#524, #533).

   - Missing documentation of a geometry’s ‘overlaps’ predicate has been
     added (#522).


File: shapely.info,  Node: 1 6 1 2017-09-01,  Next: 1 6 0 2017-08-21,  Prev: 1 6 2 2017-10-26,  Up: Changes

1.1.8.13 1.6.1 (2017-09-01)
...........................

   - Avoid ‘STRTree’ crashes due to dangling references (#505) by
     maintaining references to added geometries.

   - Reduce log level to debug when reporting on calls to ctypes
     ‘CDLL()’ that don’t succeed and are retried (#515).

   - Clarification: applications like GeoPandas that need an empty
     geometry object should use ‘BaseGeometry()’ instead of ‘Point()’ or
     ‘Polygon()’.  An ‘EmptyGeometry’ class has been added in the master
     development branch and will be available in the next non-bugfix
     release.


File: shapely.info,  Node: 1 6 0 2017-08-21,  Next: 1 6b5 2017-08-18,  Prev: 1 6 1 2017-09-01,  Up: Changes

1.1.8.14 1.6.0 (2017-08-21)
...........................

Shapely 1.6.0 adds new attributes to existing geometry classes and new
functions (‘split()’ and ‘polylabel()’) to the shapely.ops module.
Exceptions are consolidated in a shapely.errors module and logging
practices have been improved.  Shapely’s optional features depending on
Numpy are now gathered into a requirements set named “vectorized” and
these may be installed like ‘pip install shapely[vectorized]’.

Much of the work on 1.6.0 was aimed to improve the project’s build and
packaging scripts and to minimize run-time dependencies.  Shapely now
vendorizes packaging to use during builds only and never again invokes
the geos-config utility at run-time.

In addition to the changes listed under the alpha and beta pre-releases
below, the following change has been made to the project:

   - Project documentation is now hosted at
     ‘https://shapely.readthedocs.io/en/latest/’.

Thank you all for using, promoting, and contributing to the Shapely
project.


File: shapely.info,  Node: 1 6b5 2017-08-18,  Next: 1 6b4 2017-02-15,  Prev: 1 6 0 2017-08-21,  Up: Changes

1.1.8.15 1.6b5 (2017-08-18)
...........................

Bug fixes:

   - Passing a single coordinate to ‘LineString()’ with speedups
     disabled now raises a ValueError as happens with speedups enabled.
     This resolves #509.


File: shapely.info,  Node: 1 6b4 2017-02-15,  Next: 1 6b3 2016-12-31,  Prev: 1 6b5 2017-08-18,  Up: Changes

1.1.8.16 1.6b4 (2017-02-15)
...........................

Bug fixes:

   - Isolate vendorized packaging in a _vendor directory, remove
     obsolete dist-info, and remove packaging from project requirements
     (resolves #468).


File: shapely.info,  Node: 1 6b3 2016-12-31,  Next: 1 6b2 2016-12-12,  Prev: 1 6b4 2017-02-15,  Up: Changes

1.1.8.17 1.6b3 (2016-12-31)
...........................

Bug fixes:

   - Level for log messages originating from the GEOS notice handler
     reduced from WARNING to INFO (#447).

   - Permit speedups to be imported again without Numpy (#444).


File: shapely.info,  Node: 1 6b2 2016-12-12,  Next: 1 6b1 2016-12-12,  Prev: 1 6b3 2016-12-31,  Up: Changes

1.1.8.18 1.6b2 (2016-12-12)
...........................

New features:

   - Add support for GeometryCollection to shape and asShape functions
     (#422).


File: shapely.info,  Node: 1 6b1 2016-12-12,  Next: 1 6a3 2016-12-01,  Prev: 1 6b2 2016-12-12,  Up: Changes

1.1.8.19 1.6b1 (2016-12-12)
...........................

Bug fixes:

   - Implemented __array_interface__ for empty Points and LineStrings
     (#403).


File: shapely.info,  Node: 1 6a3 2016-12-01,  Next: 1 6a2 2016-11-09,  Prev: 1 6b1 2016-12-12,  Up: Changes

1.1.8.20 1.6a3 (2016-12-01)
...........................

Bug fixes:

   - Remove accidental hard requirement of Numpy (#431).

Packaging:

   - Put Numpy in an optional requirement set named “vectorized” (#431).


File: shapely.info,  Node: 1 6a2 2016-11-09,  Next: 1 6a1 2016-09-14,  Prev: 1 6a3 2016-12-01,  Up: Changes

1.1.8.21 1.6a2 (2016-11-09)
...........................

Bug fixes:

   - Shapely no longer configures logging in ‘geos.py’ (#415).

Refactoring:

   - Consolidation of exceptions in ‘shapely.errors’.

   - ‘UnsupportedGEOSVersionError’ is raised when GEOS < 3.3.0 (#407).

Packaging:

   - Added new library search paths to assist Anaconda (#413).

   - geos-config will now be bypassed when NO_GEOS_CONFIG env var is
     set.  This allows configuration of Shapely builds on Linux systems
     that for whatever reasons do not include the geos-config program
     (#322).


File: shapely.info,  Node: 1 6a1 2016-09-14,  Next: 1 5 17 2016-08-31,  Prev: 1 6a2 2016-11-09,  Up: Changes

1.1.8.22 1.6a1 (2016-09-14)
...........................

New features:

   - A new error derived from NotImplementedError, with a more useful
     message, is raised when the GEOS backend doesn’t support a called
     method (#216).

   - The ‘project()’ method of LineString has been extended to
     LinearRing geometries (#286).

   - A new ‘minimum_rotated_rectangle’ attribute has been added to the
     base geometry class (#354).

   - A new ‘shapely.ops.polylabel()’ function has been added.  It
     computes a point suited for labeling concave polygons (#395).

   - A new ‘shapely.ops.split()’ function has been added.  It splits a
     geometry by another geometry of lesser dimension: polygon by line,
     line by point (#293, #371).

   - ‘Polygon.from_bounds()’ constructs a Polygon from bounding
     coordinates (#392).

   - Support for testing with Numpy 1.4.1 has been added (#301).

   - Support creating all kinds of empty geometries from empty lists of
     Python objects (#397, #404).

Refactoring:

   - Switch from ‘SingleSidedBuffer()’ to ‘OffsetCurve()’ for GEOS >=
     3.3 (#270).

   - Cython speedups are now enabled by default (#252).

Packaging:

   - Packaging 16.7, a setup dependency, is vendorized (#314).

   - Infrastructure for building manylinux1 wheels has been added
     (#391).

   - The system’s ‘geos-config’ program is now only checked when
     ‘setup.py’ is executed, never during normal use of the module
     (#244).

   - Added new library search paths to assist PyInstaller (#382) and
     Windows (#343).


File: shapely.info,  Node: 1 5 17 2016-08-31,  Next: 1 5 16 2016-05-26,  Prev: 1 6a1 2016-09-14,  Up: Changes

1.1.8.23 1.5.17 (2016-08-31)
............................

   - Bug fix: eliminate memory leak in geom_factory() (#408).

   - Bug fix: remove mention of negative distances in parallel_offset
     and note that vertices of right hand offset lines are reversed
     (#284).


File: shapely.info,  Node: 1 5 16 2016-05-26,  Next: 1 5 15 2016-03-29,  Prev: 1 5 17 2016-08-31,  Up: Changes

1.1.8.24 1.5.16 (2016-05-26)
............................

   - Bug fix: eliminate memory leak when unpickling geometry objects
     (#384, #385).

   - Bug fix: prevent crashes when attempting to pickle a prepared
     geometry, raising ‘PicklingError’ instead (#386).

   - Packaging: extension modules in the OS X wheels uploaded to PyPI
     link only libgeos_c.dylib now (you can verify and compare to
     previous releases with ‘otool -L
     shapely/vectorized/_vectorized.so’).


File: shapely.info,  Node: 1 5 15 2016-03-29,  Next: 1 5 14 2016-03-27,  Prev: 1 5 16 2016-05-26,  Up: Changes

1.1.8.25 1.5.15 (2016-03-29)
............................

   - Bug fix: use uintptr_t to store pointers instead of long in
     _geos.pxi, preventing an overflow error (#372, #373).  Note that
     this bug fix was erroneously reported to have been made in 1.5.14,
     but was not.


File: shapely.info,  Node: 1 5 14 2016-03-27,  Next: 1 5 13 2015-10-09,  Prev: 1 5 15 2016-03-29,  Up: Changes

1.1.8.26 1.5.14 (2016-03-27)
............................

   - Bug fix: use ‘type()’ instead of ‘isinstance()’ when evaluating
     geometry equality, preventing instances of base and derived classes
     from being mistaken for equals (#317).

   - Bug fix: ensure that empty geometries are created when constructors
     have no args (#332, #333).

   - Bug fix: support app “freezing” better on Windows by not relying on
     the ‘__file__’ attribute (#342, #377).

   - Bug fix: ensure that empty polygons evaluate to be ‘==’ (#355).

   - Bug fix: filter out empty geometries that can cause segfaults when
     creating and loading STRtrees (#345, #348).

   - Bug fix: no longer attempt to reuse GEOS DLLs already loaded by
     Rasterio or Fiona on OS X (#374, #375).


File: shapely.info,  Node: 1 5 13 2015-10-09,  Next: 1 5 12 2015-08-27,  Prev: 1 5 14 2016-03-27,  Up: Changes

1.1.8.27 1.5.13 (2015-10-09)
............................

   - Restore setup and runtime discovery and loading of GEOS shared
     library to state at version 1.5.9 (#326).

   - On OS X we try to reuse any GEOS shared library that may have been
     loaded via import of Fiona or Rasterio in order to avoid a bug
     involving the GEOS AbstractSTRtree (#324, #327).


File: shapely.info,  Node: 1 5 12 2015-08-27,  Next: 1 5 11 2015-08-23,  Prev: 1 5 13 2015-10-09,  Up: Changes

1.1.8.28 1.5.12 (2015-08-27)
............................

   - Remove configuration of root logger from libgeos.py (#312).

   - Skip test_fallbacks on Windows (#308).

   - Call setlocale(locale.LC_ALL, “”) instead of resetlocale() on
     Windows when tearing down the locale test (#308).

   - Fix for Sphinx warnings (#309).

   - Addition of .cache, .idea, .pyd, .pdb to .gitignore (#310).


File: shapely.info,  Node: 1 5 11 2015-08-23,  Next: 1 5 10 2015-08-22,  Prev: 1 5 12 2015-08-27,  Up: Changes

1.1.8.29 1.5.11 (2015-08-23)
............................

   - Remove packaging module requirement added in 1.5.10 (#305).
     Distutils can’t parse versions using ‘rc’, but if we stick to ‘a’
     and ‘b’ we will be fine.


File: shapely.info,  Node: 1 5 10 2015-08-22,  Next: 1 5 9 2015-05-27,  Prev: 1 5 11 2015-08-23,  Up: Changes

1.1.8.30 1.5.10 (2015-08-22)
............................

   - Monkey patch affinity module by absolute reference (#299).

   - Raise TopologicalError in relate() instead of crashing (#294, #295,
     #303).


File: shapely.info,  Node: 1 5 9 2015-05-27,  Next: 1 5 8 2015-04-29,  Prev: 1 5 10 2015-08-22,  Up: Changes

1.1.8.31 1.5.9 (2015-05-27)
...........................

   - Fix for 64 bit speedups compatibility (#274).


File: shapely.info,  Node: 1 5 8 2015-04-29,  Next: 1 5 7 2015-03-16,  Prev: 1 5 9 2015-05-27,  Up: Changes

1.1.8.32 1.5.8 (2015-04-29)
...........................

   - Setup file encoding bug fix (#254).

   - Support for pyinstaller (#261).

   - Major prepared geometry operation fix for Windows (#268, #269).

   - Major fix for OS X binary wheel (#262).


File: shapely.info,  Node: 1 5 7 2015-03-16,  Next: 1 5 6 2015-02-02,  Prev: 1 5 8 2015-04-29,  Up: Changes

1.1.8.33 1.5.7 (2015-03-16)
...........................

   - Test and fix buggy error and notice handlers (#249).


File: shapely.info,  Node: 1 5 6 2015-02-02,  Next: 1 5 5 2015-01-20,  Prev: 1 5 7 2015-03-16,  Up: Changes

1.1.8.34 1.5.6 (2015-02-02)
...........................

   - Fix setup regression (#232, #234).

   - SVG representation improvements (#233, #237).


File: shapely.info,  Node: 1 5 5 2015-01-20,  Next: 1 5 4 2015-01-19,  Prev: 1 5 6 2015-02-02,  Up: Changes

1.1.8.35 1.5.5 (2015-01-20)
...........................

   - MANIFEST changes to restore _geox.pxi (#231).


File: shapely.info,  Node: 1 5 4 2015-01-19,  Next: 1 5 3 2015-01-12,  Prev: 1 5 5 2015-01-20,  Up: Changes

1.1.8.36 1.5.4 (2015-01-19)
...........................

   - Fixed OS X binary wheel library load path (#224).


File: shapely.info,  Node: 1 5 3 2015-01-12,  Next: 1 5 2 2015-01-04,  Prev: 1 5 4 2015-01-19,  Up: Changes

1.1.8.37 1.5.3 (2015-01-12)
...........................

   - Fixed ownership and potential memory leak in polygonize (#223).

   - Wider release of binary wheels for OS X.


File: shapely.info,  Node: 1 5 2 2015-01-04,  Next: 1 5 1 2014-12-04,  Prev: 1 5 3 2015-01-12,  Up: Changes

1.1.8.38 1.5.2 (2015-01-04)
...........................

   - Fail installation if GEOS dependency is not met, preventing update
     breakage (#218, #219).


File: shapely.info,  Node: 1 5 1 2014-12-04,  Next: 1 5 0 2014-12-02,  Prev: 1 5 2 2015-01-04,  Up: Changes

1.1.8.39 1.5.1 (2014-12-04)
...........................

   - Restore geometry hashing (#209).


File: shapely.info,  Node: 1 5 0 2014-12-02,  Next: 1 4 4 2014-11-02,  Prev: 1 5 1 2014-12-04,  Up: Changes

1.1.8.40 1.5.0 (2014-12-02)
...........................

   - Affine transformation speedups (#197).

   - New ‘==’ rich comparison (#195).

   - Geometry collection constructor (#200).

   - ops.snap() backed by GEOSSnap (#201).

   - Clearer exceptions in cases of topological invalidity (#203).


File: shapely.info,  Node: 1 4 4 2014-11-02,  Next: 1 4 3 2014-10-01,  Prev: 1 5 0 2014-12-02,  Up: Changes

1.1.8.41 1.4.4 (2014-11-02)
...........................

   - Proper conversion of numpy float32 vals to coords (#186).


File: shapely.info,  Node: 1 4 3 2014-10-01,  Next: 1 4 2 2014-09-29,  Prev: 1 4 4 2014-11-02,  Up: Changes

1.1.8.42 1.4.3 (2014-10-01)
...........................

   - Fix for endianness bug in WKB writer (#174).


File: shapely.info,  Node: 1 4 2 2014-09-29,  Next: 1 4 1 2014-09-23,  Prev: 1 4 3 2014-10-01,  Up: Changes

1.1.8.43 1.4.2 (2014-09-29)
...........................

   - Fix bungled 1.4.1 release (#176).


File: shapely.info,  Node: 1 4 1 2014-09-23,  Next: 1 4 0 2014-09-08,  Prev: 1 4 2 2014-09-29,  Up: Changes

1.1.8.44 1.4.1 (2014-09-23)
...........................

   - Return of support for GEOS 3.2 (#176, #178).


File: shapely.info,  Node: 1 4 0 2014-09-08,  Next: 1 3 3 2014-07-23,  Prev: 1 4 1 2014-09-23,  Up: Changes

1.1.8.45 1.4.0 (2014-09-08)
...........................

   - SVG representations for IPython’s inline image protocol.

   - Efficient and fast vectorized contains().

   - Change mitre_limit default to 5.0; raise ValueError with 0.0
     (#139).

   - Allow mix of tuples and Points in sped-up LineString ctor (#152).

   - New STRtree class (#73).

   - Add ops.nearest_points() (#147).

   - Faster creation of geometric objects from others (cloning) (#165).

   - Removal of tests from package.


File: shapely.info,  Node: 1 3 3 2014-07-23,  Next: 1 3 2 2014-05-13,  Prev: 1 4 0 2014-09-08,  Up: Changes

1.1.8.46 1.3.3 (2014-07-23)
...........................

   - Allow single-part geometries as argument to ops.cacaded_union()
     (#135).

   - Support affine transformations of LinearRings (#112).


File: shapely.info,  Node: 1 3 2 2014-05-13,  Next: 1 3 1 2014-04-22,  Prev: 1 3 3 2014-07-23,  Up: Changes

1.1.8.47 1.3.2 (2014-05-13)
...........................

   - Let LineString() take a sequence of Points (#130).


File: shapely.info,  Node: 1 3 1 2014-04-22,  Next: 1 3 0 2013-12-31,  Prev: 1 3 2 2014-05-13,  Up: Changes

1.1.8.48 1.3.1 (2014-04-22)
...........................

   - More reliable proxy cleanup on exit (#106).

   - More robust DLL loading on all platforms (#114).


File: shapely.info,  Node: 1 3 0 2013-12-31,  Next: 1 2 19 2013-12-30,  Prev: 1 3 1 2014-04-22,  Up: Changes

1.1.8.49 1.3.0 (2013-12-31)
...........................

   - Include support for Python 3.2 and 3.3 (#56), minimum version is
     now 2.6.

   - Switch to GEOS WKT/WKB Reader/Writer API, with defaults changed to
     enable 3D output dimensions, and to ‘trim’ WKT output for GEOS
     >=3.3.0.

   - Use GEOS version instead of GEOS C API version to determine library
     capabilities (#65).


File: shapely.info,  Node: 1 2 19 2013-12-30,  Next: 1 2 18 2013-07-23,  Prev: 1 3 0 2013-12-31,  Up: Changes

1.1.8.50 1.2.19 (2013-12-30)
............................

   - Add buffering style options (#55).


File: shapely.info,  Node: 1 2 18 2013-07-23,  Next: 1 2 17 2013-01-27,  Prev: 1 2 19 2013-12-30,  Up: Changes

1.1.8.51 1.2.18 (2013-07-23)
............................

   - Add shapely.ops.transform.

   - Permit empty sequences in collection constructors (#49, #50).

   - Individual polygons in MultiPolygon.__geo_interface__ are changed
     to tuples to match Polygon.__geo_interface__ (#51).

   - Add shapely.ops.polygonize_full (#57).


File: shapely.info,  Node: 1 2 17 2013-01-27,  Next: 1 2 16 2012-09-18,  Prev: 1 2 18 2013-07-23,  Up: Changes

1.1.8.52 1.2.17 (2013-01-27)
............................

   - Avoid circular import between wkt/wkb and geometry.base by moving
     calls to GEOS serializers to the latter module.

   - Set _ndim when unpickling (issue #6).

   - Don’t install DLLs to Python’s DLL directory (#37).

   - Add affinity module of affine transformation (#31).

   - Fix NameError that blocked installation with PyPy (#40, #41).


File: shapely.info,  Node: 1 2 16 2012-09-18,  Next: 1 2 15 2012-06-27,  Prev: 1 2 17 2013-01-27,  Up: Changes

1.1.8.53 1.2.16 (2012-09-18)
............................

   - Add ops.unary_union function.

   - Alias ops.cascaded_union to ops.unary_union when GEOS CAPI >=
     (1,7,0).

   - Add geos_version_string attribute to shapely.geos.

   - Ensure parent is set when child geometry is accessed.

   - Generate _speedups.c using Cython when building from repo when
     missing, stale, or the build target is “sdist”.

   - The is_simple predicate of invalid, self-intersecting linear rings
     now returns ‘False’.

   - Remove VERSION.txt from repo, it’s now written by the distutils
     setup script with value of shapely.__version__.


File: shapely.info,  Node: 1 2 15 2012-06-27,  Next: 1 2 14 2012-01-23,  Prev: 1 2 16 2012-09-18,  Up: Changes

1.1.8.54 1.2.15 (2012-06-27)
............................

   - Eliminate numerical sensitivity in a method chaining test (Debian
     bug #663210).

   - Account for cascaded union of random buffered test points being a
     polygon or multipolygon (Debian bug #666655).

   - Use Cython to build speedups if it is installed.

   - Avoid stumbling over SVN revision numbers in GEOS C API version
     strings.


File: shapely.info,  Node: 1 2 14 2012-01-23,  Next: 1 2 13 2011-09-16,  Prev: 1 2 15 2012-06-27,  Up: Changes

1.1.8.55 1.2.14 (2012-01-23)
............................

   - A geometry’s coords property is now sliceable, yielding a list of
     coordinate values.

   - Homogeneous collections are now sliceable, yielding a new
     collection of the same type.


File: shapely.info,  Node: 1 2 13 2011-09-16,  Next: 1 2 12 2011-08-15,  Prev: 1 2 14 2012-01-23,  Up: Changes

1.1.8.56 1.2.13 (2011-09-16)
............................

   - Fixed errors in speedups on 32bit systems when GEOS references
     memory above 2GB.

   - Add shapely.__version__ attribute.

   - Update the manual.


File: shapely.info,  Node: 1 2 12 2011-08-15,  Next: 1 2 11 2011-08-04,  Prev: 1 2 13 2011-09-16,  Up: Changes

1.1.8.57 1.2.12 (2011-08-15)
............................

   - Build Windows distributions with VC7 or VC9 as appropriate.

   - More verbose report on failure to speed up.

   - Fix for prepared geometries broken in 1.2.11.

   - DO NOT INSTALL 1.2.11


File: shapely.info,  Node: 1 2 11 2011-08-04,  Next: 1 2 10 2011-05-09,  Prev: 1 2 12 2011-08-15,  Up: Changes

1.1.8.58 1.2.11 (2011-08-04)
............................

   - Ignore AttributeError during exit.

   - PyPy 1.5 support.

   - Prevent operation on prepared geometry crasher (#12).

   - Optional Cython speedups for Windows.

   - Linux 3 platform support.


File: shapely.info,  Node: 1 2 10 2011-05-09,  Next: 1 2 9 2011-03-31,  Prev: 1 2 11 2011-08-04,  Up: Changes

1.1.8.59 1.2.10 (2011-05-09)
............................

   - Add optional Cython speedups.

   - Add is_cww predicate to LinearRing.

   - Add function that forces orientation of Polygons.

   - Disable build of speedups on Windows pending packaging work.


File: shapely.info,  Node: 1 2 9 2011-03-31,  Next: 1 2 8 2011-12-03,  Prev: 1 2 10 2011-05-09,  Up: Changes

1.1.8.60 1.2.9 (2011-03-31)
...........................

   - Remove extra glob import.

   - Move examples to shapely.examples.

   - Add box() constructor for rectangular polygons.

   - Fix extraneous imports.


File: shapely.info,  Node: 1 2 8 2011-12-03,  Next: 1 2 7 2010-11-05,  Prev: 1 2 9 2011-03-31,  Up: Changes

1.1.8.61 1.2.8 (2011-12-03)
...........................

   - New parallel_offset method (#6).

   - Support for Python 2.4.


File: shapely.info,  Node: 1 2 7 2010-11-05,  Next: 1 2 6 2010-10-21,  Prev: 1 2 8 2011-12-03,  Up: Changes

1.1.8.62 1.2.7 (2010-11-05)
...........................

   - Support for Windows eggs.


File: shapely.info,  Node: 1 2 6 2010-10-21,  Next: 1 2 5 2010-09-19,  Prev: 1 2 7 2010-11-05,  Up: Changes

1.1.8.63 1.2.6 (2010-10-21)
...........................

   - The geoms property of an empty collection yields [] instead of a
     ValueError (#3).

   - The coords and geometry type sproperties have the same behavior as
     above.

   - Ensure that z values carry through into products of operations
     (#4).


File: shapely.info,  Node: 1 2 5 2010-09-19,  Next: 1 2 4 2010-09-09,  Prev: 1 2 6 2010-10-21,  Up: Changes

1.1.8.64 1.2.5 (2010-09-19)
...........................

   - Stop distributing docs/_build.

   - Include library fallbacks in test_dlls.py for linux platform.


File: shapely.info,  Node: 1 2 4 2010-09-09,  Next: 1 2 3 2010-08-17,  Prev: 1 2 5 2010-09-19,  Up: Changes

1.1.8.65 1.2.4 (2010-09-09)
...........................

   - Raise AttributeError when there’s no backend support for a method.

   - Raise OSError if libgeos_c.so (or variants) can’t be found and
     loaded.

   - Add geos_c DLL loading support for linux platforms where
     find_library doesn’t work.


File: shapely.info,  Node: 1 2 3 2010-08-17,  Next: 1 2 2 2010-07-23,  Prev: 1 2 4 2010-09-09,  Up: Changes

1.1.8.66 1.2.3 (2010-08-17)
...........................

   - Add mapping function.

   - Fix problem with GEOSisValidReason symbol for GEOS < 3.1.


File: shapely.info,  Node: 1 2 2 2010-07-23,  Next: 1 2 1 2010-06-23,  Prev: 1 2 3 2010-08-17,  Up: Changes

1.1.8.67 1.2.2 (2010-07-23)
...........................

   - Add representative_point method.


File: shapely.info,  Node: 1 2 1 2010-06-23,  Next: 1 2 2010-05-27,  Prev: 1 2 2 2010-07-23,  Up: Changes

1.1.8.68 1.2.1 (2010-06-23)
...........................

   - Fixed bounds of singular polygons.

   - Added shapely.validation.explain_validity function (#226).


File: shapely.info,  Node: 1 2 2010-05-27,  Next: 1 2rc2 2010-05-26,  Prev: 1 2 1 2010-06-23,  Up: Changes

1.1.8.69 1.2 (2010-05-27)
.........................

   - Final release.


File: shapely.info,  Node: 1 2rc2 2010-05-26,  Next: 1 2rc1 2010-05-25,  Prev: 1 2 2010-05-27,  Up: Changes

1.1.8.70 1.2rc2 (2010-05-26)
............................

   - Add examples and tests to MANIFEST.in.

   - Release candidate 2.


File: shapely.info,  Node: 1 2rc1 2010-05-25,  Next: 1 2b7 2010-04-22,  Prev: 1 2rc2 2010-05-26,  Up: Changes

1.1.8.71 1.2rc1 (2010-05-25)
............................

   - Release candidate.


File: shapely.info,  Node: 1 2b7 2010-04-22,  Next: 1 2b6 2010-04-13,  Prev: 1 2rc1 2010-05-25,  Up: Changes

1.1.8.72 1.2b7 (2010-04-22)
...........................

   - Memory leak associated with new empty geometry state fixed.


File: shapely.info,  Node: 1 2b6 2010-04-13,  Next: 1 2b5 2010-04-09,  Prev: 1 2b7 2010-04-22,  Up: Changes

1.1.8.73 1.2b6 (2010-04-13)
...........................

   - Broken GeometryCollection fixed.


File: shapely.info,  Node: 1 2b5 2010-04-09,  Next: 1 2b4 2010-03-19,  Prev: 1 2b6 2010-04-13,  Up: Changes

1.1.8.74 1.2b5 (2010-04-09)
...........................

   - Objects can be constructed from others of the same type, thereby
     making copies.  Collections can be constructed from sequences of
     objects, also making copies.

   - Collections are now iterators over their component objects.

   - New code for manual figures, using the descartes package.


File: shapely.info,  Node: 1 2b4 2010-03-19,  Next: 1 2b3 2010-02-28,  Prev: 1 2b5 2010-04-09,  Up: Changes

1.1.8.75 1.2b4 (2010-03-19)
...........................

   - Adds support for the “sunos5” platform.


File: shapely.info,  Node: 1 2b3 2010-02-28,  Next: 1 2b2 2010-02-19,  Prev: 1 2b4 2010-03-19,  Up: Changes

1.1.8.76 1.2b3 (2010-02-28)
...........................

   - Only provide simplification implementations for GEOS C API >= 1.5.


File: shapely.info,  Node: 1 2b2 2010-02-19,  Next: 1 2b1 2010-02-18,  Prev: 1 2b3 2010-02-28,  Up: Changes

1.1.8.77 1.2b2 (2010-02-19)
...........................

   - Fix cascaded_union bug introduced in 1.2b1 (#212).


File: shapely.info,  Node: 1 2b1 2010-02-18,  Next: 1 2a6 2010-02-09,  Prev: 1 2b2 2010-02-19,  Up: Changes

1.1.8.78 1.2b1 (2010-02-18)
...........................

   - Update the README. Remove cruft from setup.py.  Add some version
     1.2 metadata regarding required Python version (>=2.5,<3) and
     external dependency (libgeos_c >= 3.1).


File: shapely.info,  Node: 1 2a6 2010-02-09,  Next: 1 2a1 2010-01-20,  Prev: 1 2b1 2010-02-18,  Up: Changes

1.1.8.79 1.2a6 (2010-02-09)
...........................

   - Add accessor for separate arrays of X and Y values (#210).

TODO: fill gap here


File: shapely.info,  Node: 1 2a1 2010-01-20,  Next: 1 0 12 2009-04-09,  Prev: 1 2a6 2010-02-09,  Up: Changes

1.1.8.80 1.2a1 (2010-01-20)
...........................

   - Proper prototyping of WKB writer, and avoidance of errors on 64-bit
     systems (#191).

   - Prototype libgeos_c functions in a way that lets py2exe apps import
     shapely (#189).

1.2 Branched (2009-09-19)


File: shapely.info,  Node: 1 0 12 2009-04-09,  Next: 1 0 11 2008-11-20,  Prev: 1 2a1 2010-01-20,  Up: Changes

1.1.8.81 1.0.12 (2009-04-09)
............................

   - Fix for references held by topology and predicate descriptors.


File: shapely.info,  Node: 1 0 11 2008-11-20,  Next: 1 0 10 2008-11-17,  Prev: 1 0 12 2009-04-09,  Up: Changes

1.1.8.82 1.0.11 (2008-11-20)
............................

   - Work around bug in GEOS 2.2.3, GEOSCoordSeq_getOrdinate not
     exported properly (#178).


File: shapely.info,  Node: 1 0 10 2008-11-17,  Next: 1 0 9 2008-11-16,  Prev: 1 0 11 2008-11-20,  Up: Changes

1.1.8.83 1.0.10 (2008-11-17)
............................

   - Fixed compatibility with GEOS 2.2.3 that was broken in 1.0.8
     release (#176).


File: shapely.info,  Node: 1 0 9 2008-11-16,  Next: 1 0 8 2008-11-01,  Prev: 1 0 10 2008-11-17,  Up: Changes

1.1.8.84 1.0.9 (2008-11-16)
...........................

   - Find and load MacPorts libgeos.


File: shapely.info,  Node: 1 0 8 2008-11-01,  Next: 1 0 7 2008-08-22,  Prev: 1 0 9 2008-11-16,  Up: Changes

1.1.8.85 1.0.8 (2008-11-01)
...........................

   - Fill out GEOS function result and argument types to prevent faults
     on a 64-bit arch.


File: shapely.info,  Node: 1 0 7 2008-08-22,  Next: 1 0 6 2008-07-10,  Prev: 1 0 8 2008-11-01,  Up: Changes

1.1.8.86 1.0.7 (2008-08-22)
...........................

   - Polygon rings now have the same dimensions as parent (#168).

   - Eliminated reference cycles in polygons (#169).


File: shapely.info,  Node: 1 0 6 2008-07-10,  Next: 1 0 5 2008-05-20,  Prev: 1 0 7 2008-08-22,  Up: Changes

1.1.8.87 1.0.6 (2008-07-10)
...........................

   - Fixed adaptation of multi polygon data.

   - Raise exceptions earlier from binary predicates.

   - Beginning distributing new windows DLLs (#166).


File: shapely.info,  Node: 1 0 5 2008-05-20,  Next: 1 0 4 2008-05-01,  Prev: 1 0 6 2008-07-10,  Up: Changes

1.1.8.88 1.0.5 (2008-05-20)
...........................

   - Added access to GEOS polygonizer function.

   - Raise exception when insufficient coordinate tuples are passed to
     LinearRing constructor (#164).


File: shapely.info,  Node: 1 0 4 2008-05-01,  Next: 1 0 3 2008-04-09,  Prev: 1 0 5 2008-05-20,  Up: Changes

1.1.8.89 1.0.4 (2008-05-01)
...........................

   - Disentangle Python and topological equality (#163).

   - Add shape(), a factory that copies coordinates from a geo interface
     provider.  To be used instead of asShape() unless you really need
     to store coordinates outside shapely for efficient use in other
     code.

   - Cache GEOS geometries in adapters (#163).


File: shapely.info,  Node: 1 0 3 2008-04-09,  Next: 1 0 2 2008-02-26,  Prev: 1 0 4 2008-05-01,  Up: Changes

1.1.8.90 1.0.3 (2008-04-09)
...........................

   - Do not release GIL when calling GEOS functions (#158).

   - Prevent faults when chaining multiple GEOS operators (#159).


File: shapely.info,  Node: 1 0 2 2008-02-26,  Next: 1 0 1 2008-02-08,  Prev: 1 0 3 2008-04-09,  Up: Changes

1.1.8.91 1.0.2 (2008-02-26)
...........................

   - Fix loss of dimensionality in polygon rings (#155).


File: shapely.info,  Node: 1 0 1 2008-02-08,  Next: 1 0 2008-01-18,  Prev: 1 0 2 2008-02-26,  Up: Changes

1.1.8.92 1.0.1 (2008-02-08)
...........................

   - Allow chaining expressions involving coordinate sequences and
     geometry parts (#151).

   - Protect against abnormal use of coordinate accessors (#152).

   - Coordinate sequences now implement the numpy array protocol (#153).


File: shapely.info,  Node: 1 0 2008-01-18,  Next: 1 0 RC2 2008-01-16,  Prev: 1 0 1 2008-02-08,  Up: Changes

1.1.8.93 1.0 (2008-01-18)
.........................

   - Final release.


File: shapely.info,  Node: 1 0 RC2 2008-01-16,  Next: 1 0 RC1 2008-01-14,  Prev: 1 0 2008-01-18,  Up: Changes

1.1.8.94 1.0 RC2 (2008-01-16)
.............................

   - Added temporary solution for #149.


File: shapely.info,  Node: 1 0 RC1 2008-01-14,  Prev: 1 0 RC2 2008-01-16,  Up: Changes

1.1.8.95 1.0 RC1 (2008-01-14)
.............................

   - First release candidate


File: shapely.info,  Node: Frequently asked questions and answers,  Prev: Changes,  Up: Shapely<2>

1.1.9 Frequently asked questions and answers
--------------------------------------------

* Menu:

* Are there references for the algorithms used by shapely?::
* I used .buffer() on a geometry with Z coordinates. Where did the Z coordinates go?: I used buffer on a geometry with Z coordinates Where did the Z coordinates go?.


File: shapely.info,  Node: Are there references for the algorithms used by shapely?,  Next: I used buffer on a geometry with Z coordinates Where did the Z coordinates go?,  Up: Frequently asked questions and answers

1.1.9.1 Are there references for the algorithms used by shapely?
................................................................

Generally speaking, shapely’s predicates and operations are derived from
methods of the same name from GEOS(1) and the JTS Topology Suite(2).
See the JTS FAQ(3) for references describing the JTS algorithms.

   ---------- Footnotes ----------

   (1) https://trac.osgeo.org/geos/

   (2) https://locationtech.github.io/jts/

   (3) https://locationtech.github.io/jts/jts-faq.html#E1


File: shapely.info,  Node: I used buffer on a geometry with Z coordinates Where did the Z coordinates go?,  Prev: Are there references for the algorithms used by shapely?,  Up: Frequently asked questions and answers

1.1.9.2 I used .buffer() on a geometry with Z coordinates. Where did the Z coordinates go?
..........................................................................................

The buffer algorithm in GEOS(1) is purely two-dimensional and discards
any Z coordinates.  This is generally the case for the GEOS algorithms.

   ---------- Footnotes ----------

   (1) https://trac.osgeo.org/geos/


File: shapely.info,  Node: The Shapely User Manual,  Prev: Shapely<2>,  Up: Documentation Contents

1.2 The Shapely User Manual
===========================


Author: Sean Gillies, <<sean.gillies@gmail.com>>


Version: 1.7.0


Date: Jan 19, 2021


Copyright: This work is licensed under a Creative Commons Attribution
3.0 United States License(1).


Abstract: This document explains how to use the Shapely Python package
for computational geometry.

* Menu:

* Introduction::
* Geometric Objects::
* Predicates and Relationships::
* Spatial Analysis Methods::
* Affine Transformations::
* Other Transformations::
* Other Operations::
* STR-packed R-tree::
* Interoperation::
* Performance::
* Conclusion::
* References::

   ---------- Footnotes ----------

   (1) https://creativecommons.org/licenses/by/3.0/us/


File: shapely.info,  Node: Introduction,  Next: Geometric Objects,  Up: The Shapely User Manual

1.2.1 Introduction
------------------

Deterministic spatial analysis is an important component of
computational approaches to problems in agriculture, ecology,
epidemiology, sociology, and many other fields.  What is the surveyed
perimeter/area ratio of these patches of animal habitat?  Which
properties in this town intersect with the 50-year flood contour from
this new flooding model?  What are the extents of findspots for ancient
ceramic wares with maker’s marks “A” and “B”, and where do the extents
overlap?  What’s the path from home to office that best skirts
identified zones of location based spam?  These are just a few of the
possible questions addressable using non-statistical spatial analysis,
and more specifically, computational geometry.

Shapely is a Python package for set-theoretic analysis and manipulation
of planar features using (via Python’s ‘ctypes’ module) functions from
the well known and widely deployed GEOS(1) library.  GEOS, a port of the
Java Topology Suite(2) (JTS), is the geometry engine of the PostGIS(3)
spatial extension for the PostgreSQL RDBMS. The designs of JTS and GEOS
are largely guided by the Open Geospatial Consortium(4)’s Simple
Features Access Specification (5) and Shapely adheres mainly to the same
set of standard classes and operations.  Shapely is thereby deeply
rooted in the conventions of the geographic information systems (GIS)
world, but aspires to be equally useful to programmers working on
non-conventional problems.

The first premise of Shapely is that Python programmers should be able
to perform PostGIS type geometry operations outside of an RDBMS. Not all
geographic data originate or reside in a RDBMS or are best processed
using SQL. We can load data into a spatial RDBMS to do work, but if
there’s no mandate to manage (the “M” in “RDBMS”) the data over time in
the database we’re using the wrong tool for the job.  The second premise
is that the persistence, serialization, and map projection of features
are significant, but orthogonal problems.  You may not need a hundred
GIS format readers and writers or the multitude of State Plane
projections, and Shapely doesn’t burden you with them.  The third
premise is that Python idioms trump GIS (or Java, in this case, since
the GEOS library is derived from JTS, a Java project) idioms.

If you enjoy and profit from idiomatic Python, appreciate packages that
do one thing well, and agree that a spatially enabled RDBMS is often
enough the wrong tool for your computational geometry job, Shapely might
be for you.

* Menu:

* Spatial Data Model::
* Relationships::
* Operations::
* Coordinate Systems::

   ---------- Footnotes ----------

   (1) https://trac.osgeo.org/geos/

   (2) https://projects.eclipse.org/projects/locationtech.jts

   (3) http://postgis.refractions.net

   (4) https://www.opengeospatial.org/

   (5) (1) John R. Herring, Ed., “OpenGIS Implementation Specification
for Geographic information - Simple feature access - Part 1: Common
architecture,” Oct.  2006.


File: shapely.info,  Node: Spatial Data Model,  Next: Relationships,  Up: Introduction

1.2.1.1 Spatial Data Model
..........................

The fundamental types of geometric objects implemented by Shapely are
points, curves, and surfaces.  Each is associated with three sets of
(possibly infinite) points in the plane.  The ‘interior’, ‘boundary’,
and ‘exterior’ sets of a feature are mutually exclusive and their union
coincides with the entire plane (1).

   * A ‘Point’ has an ‘interior’ set of exactly one point, a ‘boundary’
     set of exactly no points, and an ‘exterior’ set of all other
     points.  A ‘Point’ has a topological dimension of 0.

   * A ‘Curve’ has an ‘interior’ set consisting of the infinitely many
     points along its length (imagine a ‘Point’ dragged in space), a
     ‘boundary’ set consisting of its two end points, and an ‘exterior’
     set of all other points.  A ‘Curve’ has a topological dimension of
     1.

   * A ‘Surface’ has an ‘interior’ set consisting of the infinitely many
     points within (imagine a ‘Curve’ dragged in space to cover an
     area), a ‘boundary’ set consisting of one or more ‘Curves’, and an
     ‘exterior’ set of all other points including those within holes
     that might exist in the surface.  A ‘Surface’ has a topological
     dimension of 2.

That may seem a bit esoteric, but will help clarify the meanings of
Shapely’s spatial predicates, and it’s as deep into theory as this
manual will go.  Consequences of point-set theory, including some that
manifest themselves as “gotchas”, for different classes will be
discussed later in this manual.

The point type is implemented by a ‘Point’ class; curve by the
‘LineString’ and ‘LinearRing’ classes; and surface by a ‘Polygon’ class.
Shapely implements no smooth (‘i.e.’ having continuous tangents) curves.
All curves must be approximated by linear splines.  All rounded patches
must be approximated by regions bounded by linear splines.

Collections of points are implemented by a ‘MultiPoint’ class,
collections of curves by a ‘MultiLineString’ class, and collections of
surfaces by a ‘MultiPolygon’ class.  These collections aren’t
computationally significant, but are useful for modeling certain kinds
of features.  A Y-shaped line feature, for example, is well modeled as a
whole by a ‘MultiLineString’.

The standard data model has additional constraints specific to certain
types of geometric objects that will be discussed in following sections
of this manual.

See also
‘https://web.archive.org/web/20160719195511/http://www.vividsolutions.com/jts/discussion.htm’
for more illustrations of this data model.

   ---------- Footnotes ----------

   (1) (2) M.J. Egenhofer and John R. Herring, Categorizing Binary
Topological Relations Between Regions, Lines, and Points in Geographic
Databases, Orono, ME: University of Maine, 1991.


File: shapely.info,  Node: Relationships,  Next: Operations,  Prev: Spatial Data Model,  Up: Introduction

1.2.1.2 Relationships
.....................

The spatial data model is accompanied by a group of natural language
relationships between geometric objects – ‘contains’, ‘intersects’,
‘overlaps’, ‘touches’, etc.  – and a theoretical framework for
understanding them using the 3x3 matrix of the mutual intersections of
their component point sets (1): the DE-9IM. A comprehensive review of
the relationships in terms of the DE-9IM is found in (2) and will not be
reiterated in this manual.

   ---------- Footnotes ----------

   (1) (3) E. Clementini, P. Di Felice, and P. van Oosterom, “A Small
Set of Formal Topological Relationships Suitable for End-User
Interaction,” Third International Symposium on Large Spatial Databases
(SSD). Lecture Notes in Computer Science no.  692, David Abel and Beng
Chin Ooi, Eds., Singapore: Springer Verlag, 1993, pp.  277-295.

   (2) (4) C. Strobl, “Dimensionally Extended Nine-Intersection Model
(DE-9IM),” Encyclopedia of GIS, S. Shekhar and H. Xiong, Eds., Springer,
2008, pp.  240-245.  [PDF
(https://giswiki.hsr.ch/images/3/3d/9dem_springer.pdf)]


File: shapely.info,  Node: Operations,  Next: Coordinate Systems,  Prev: Relationships,  Up: Introduction

1.2.1.3 Operations
..................

Following the JTS technical specs (1), this manual will make a
distinction between constructive (‘buffer’, ‘convex hull’) and
set-theoretic operations (‘intersection’, ‘union’, etc.).  The
individual operations will be fully described in a following section of
the manual.

   ---------- Footnotes ----------

   (1) (5) Martin Davis, “JTS Technical Specifications,” Mar.  2003.
[PDF
(https://github.com/locationtech/jts/raw/master/doc/JTS%20Technical%20Specs.pdf)]


File: shapely.info,  Node: Coordinate Systems,  Prev: Operations,  Up: Introduction

1.2.1.4 Coordinate Systems
..........................

Even though the Earth is not flat – and for that matter not exactly
spherical – there are many analytic problems that can be approached by
transforming Earth features to a Cartesian plane, applying tried and
true algorithms, and then transforming the results back to geographic
coordinates.  This practice is as old as the tradition of accurate paper
maps.

Shapely does not support coordinate system transformations.  All
operations on two or more features presume that the features exist in
the same Cartesian plane.


File: shapely.info,  Node: Geometric Objects,  Next: Predicates and Relationships,  Prev: Introduction,  Up: The Shapely User Manual

1.2.2 Geometric Objects
-----------------------

Geometric objects are created in the typical Python fashion, using the
classes themselves as instance factories.  A few of their intrinsic
properties will be discussed in this sections, others in the following
sections on operations and serializations.

Instances of ‘Point’, ‘LineString’, and ‘LinearRing’ have as their most
important attribute a finite sequence of coordinates that determines
their interior, boundary, and exterior point sets.  A line string can be
determined by as few as 2 points, but contains an infinite number of
points.  Coordinate sequences are immutable.  A third ‘z’ coordinate
value may be used when constructing instances, but has no effect on
geometric analysis.  All operations are performed in the ‘x-y’ plane.

In all constructors, numeric values are converted to type ‘float’.  In
other words, ‘Point(0, 0)’ and ‘Point(0.0, 0.0)’ produce geometrically
equivalent instances.  Shapely does not check the topological simplicity
or validity of instances when they are constructed as the cost is
unwarranted in most cases.  Validating factories are easily implemented
using the :attr:‘is_valid’ predicate by users that require them.

     Note: Shapely is a planar geometry library and ‘z’, the height
     above or below the plane, is ignored in geometric analysis.  There
     is a potential pitfall for users here: coordinate tuples that
     differ only in ‘z’ are not distinguished from each other and their
     application can result in suprisingly invalid geometry objects.
     For example, ‘LineString([(0, 0, 0), (0, 0, 1)])’ does not return a
     vertical line of unit length, but an invalid line in the plane with
     zero length.  Similarly, ‘Polygon([(0, 0, 0), (0, 0, 1), (1, 1,
     1)])’ is not bounded by a closed ring and is invalid.

* Menu:

* General Attributes and Methods::
* Points::
* LineStrings::
* LinearRings::
* Polygons::
* Collections::
* Collections of Points::
* Collections of Lines::
* Collections of Polygons::
* Empty features::
* Coordinate sequences::
* Linear Referencing Methods::


File: shapely.info,  Node: General Attributes and Methods,  Next: Points,  Up: Geometric Objects

1.2.2.1 General Attributes and Methods
......................................

 -- Attribute: object.area

     Returns the area (‘float’) of the object.

 -- Attribute: object.bounds

     Returns a ‘(minx, miny, maxx, maxy)’ tuple (‘float’ values) that
     bounds the object.

 -- Attribute: object.length

     Returns the length (‘float’) of the object.

 -- Attribute: object.minimum_clearance

     Returns the smallest distance by which a node could be moved to
     produce an invalid geometry.

     This can be thought of as a measure of the robustness of a
     geometry, where larger values of minimum clearance indicate a more
     robust geometry.  If no minimum clearance exists for a geometry,
     such as a point, this will return ‘math.infinity’.

     Requires GEOS 3.6 or higher.

     >>> from shapely.geometry import Polygon
     >>> Polygon([[0, 0], [1, 0], [1, 1], [0, 1], [0, 0]]).minimum_clearance
     1.0

 -- Attribute: object.geom_type

     Returns a string specifying the ‘Geometry Type’ of the object in
     accordance with (1).

     >>> Point(0, 0).geom_type
     'Point'

 -- Method: object.distance (other)

     Returns the minimum distance (‘float’) to the ‘other’ geometric
     object.

     >>> Point(0,0).distance(Point(1,1))
     1.4142135623730951

 -- Method: object.hausdorff_distance (other)

     Returns the Hausdorff distance (‘float’) to the ‘other’ geometric
     object.  The Hausdorff distance between two geometries is the
     furthest distance that a point on either geometry can be from the
     nearest point to it on the other geometry.

     ‘New in Shapely 1.6.0’

     >>> point = Point(1, 1)
     >>> line = LineString([(2, 0), (2, 4), (3, 4)])
     >>> point.hausdorff_distance(line)
     3.605551275463989
     >>> point.distance(Point(3, 4))
     3.605551275463989

 -- Method: object.representative_point ()

     Returns a cheaply computed point that is guaranteed to be within
     the geometric object.

     Note: This is not in general the same as the centroid.

     >>> donut = Point(0, 0).buffer(2.0).difference(Point(0, 0).buffer(1.0))
     >>> donut.centroid.wkt
     'POINT (-0.0000000000000001 -0.0000000000000000)'
     >>> donut.representative_point().wkt
     'POINT (-1.5000000000000000 0.0000000000000000)'

   ---------- Footnotes ----------

   (1) (1) John R. Herring, Ed., “OpenGIS Implementation Specification
for Geographic information - Simple feature access - Part 1: Common
architecture,” Oct.  2006.


File: shapely.info,  Node: Points,  Next: LineStrings,  Prev: General Attributes and Methods,  Up: Geometric Objects

1.2.2.2 Points
..............

 -- Class: Point (coordinates)

     The ‘Point’ constructor takes positional coordinate values or point
     tuple parameters.

     >>> from shapely.geometry import Point
     >>> point = Point(0.0, 0.0)
     >>> q = Point((0.0, 0.0))

A ‘Point’ has zero area and zero length.

     >>> point.area
     0.0
     >>> point.length
     0.0

Its ‘x-y’ bounding box is a ‘(minx, miny, maxx, maxy)’ tuple.

     >>> point.bounds
     (0.0, 0.0, 0.0, 0.0)

Coordinate values are accessed via ‘coords’, ‘x’, ‘y’, and ‘z’
properties.

     >>> list(point.coords)
     [(0.0, 0.0)]
     >>> point.x
     0.0
     >>> point.y
     0.0

Coordinates may also be sliced.  ‘New in version 1.2.14’.

     >>> point.coords[:]
     [(0.0, 0.0)]

The ‘Point’ constructor also accepts another ‘Point’ instance, thereby
making a copy.

     >>> Point(point)
     <shapely.geometry.point.Point object at 0x...>


File: shapely.info,  Node: LineStrings,  Next: LinearRings,  Prev: Points,  Up: Geometric Objects

1.2.2.3 LineStrings
...................

 -- Class: LineString (coordinates)

     The ‘LineString’ constructor takes an ordered sequence of 2 or more
     ‘(x, y[, z])’ point tuples.

The constructed ‘LineString’ object represents one or more connected
linear splines between the points.  Repeated points in the ordered
sequence are allowed, but may incur performance penalties and should be
avoided.  A ‘LineString’ may cross itself (`i.e.'  be ‘complex’ and not
‘simple’).

[shapely-figures/linestring]
Figure

Figure 1.  A simple ‘LineString’ on the left, a complex ‘LineString’ on
the right.  The (‘MultiPoint’) boundary of each is shown in black, the
other points that describe the lines are shown in grey.

A ‘LineString’ has zero area and non-zero length.

     >>> from shapely.geometry import LineString
     >>> line = LineString([(0, 0), (1, 1)])
     >>> line.area
     0.0
     >>> line.length
     1.4142135623730951

Its ‘x-y’ bounding box is a ‘(minx, miny, maxx, maxy)’ tuple.

     >>> line.bounds
     (0.0, 0.0, 1.0, 1.0)

The defining coordinate values are accessed via the ‘coords’ property.

     >>> len(line.coords)
     2
     >>> list(line.coords)
     [(0.0, 0.0), (1.0, 1.0)]

Coordinates may also be sliced.  ‘New in version 1.2.14’.

     >>> point.coords[:]
     [(0.0, 0.0), (1.0, 1.0)]
     >>> point.coords[1:]
     [(1.0, 1.0)]

The constructor also accepts another ‘LineString’ instance, thereby
making a copy.

     >>> LineString(line)
     <shapely.geometry.linestring.LineString object at 0x...>

A ‘LineString’ may also be constructed using a sequence of mixed ‘Point’
instances or coordinate tuples.  The individual coordinates are copied
into the new object.

     >>> LineString([Point(0.0, 1.0), (2.0, 3.0), Point(4.0, 5.0)])
     <shapely.geometry.linestring.LineString object at 0x...>


File: shapely.info,  Node: LinearRings,  Next: Polygons,  Prev: LineStrings,  Up: Geometric Objects

1.2.2.4 LinearRings
...................

 -- Class: LinearRing (coordinates)

     The ‘LinearRing’ constructor takes an ordered sequence of ‘(x, y[,
     z])’ point tuples.

The sequence may be explicitly closed by passing identical values in the
first and last indices.  Otherwise, the sequence will be implicitly
closed by copying the first tuple to the last index.  As with a
‘LineString’, repeated points in the ordered sequence are allowed, but
may incur performance penalties and should be avoided.  A ‘LinearRing’
may not cross itself, and may not touch itself at a single point.

[shapely-figures/linearring]
Figure

Figure 2.  A valid ‘LinearRing’ on the left, an invalid self-touching
‘LinearRing’ on the right.  The points that describe the rings are shown
in grey.  A ring’s boundary is ‘empty’.

     Note: Shapely will not prevent the creation of such rings, but
     exceptions will be raised when they are operated on.

A ‘LinearRing’ has zero area and non-zero length.

     >>> from shapely.geometry.polygon import LinearRing
     >>> ring = LinearRing([(0, 0), (1, 1), (1, 0)])
     >>> ring.area
     0.0
     >>> ring.length
     3.4142135623730949

Its ‘x-y’ bounding box is a ‘(minx, miny, maxx, maxy)’ tuple.

     >>> ring.bounds
     (0.0, 0.0, 1.0, 1.0)

Defining coordinate values are accessed via the ‘coords’ property.

     >>> len(ring.coords)
     4
     >>> list(ring.coords)
     [(0.0, 0.0), (1.0, 1.0), (1.0, 0.0), (0.0, 0.0)]

The ‘LinearRing’ constructor also accepts another ‘LineString’ or
‘LinearRing’ instance, thereby making a copy.

     >>> LinearRing(ring)
     <shapely.geometry.polygon.LinearRing object at 0x...>

As with ‘LineString’, a sequence of ‘Point’ instances is not a valid
constructor parameter.


File: shapely.info,  Node: Polygons,  Next: Collections,  Prev: LinearRings,  Up: Geometric Objects

1.2.2.5 Polygons
................

 -- Class: Polygon (shell[, holes=None])

     The ‘Polygon’ constructor takes two positional parameters.  The
     first is an ordered sequence of ‘(x, y[, z])’ point tuples and is
     treated exactly as in the ‘LinearRing’ case.  The second is an
     optional unordered sequence of ring-like sequences specifying the
     interior boundaries or “holes” of the feature.

Rings of a ‘valid’ ‘Polygon’ may not cross each other, but may touch at
a single point only.  Again, Shapely will not prevent the creation of
invalid features, but exceptions will be raised when they are operated
on.

Figure 3.  On the left, a valid ‘Polygon’ with one interior ring that
touches the exterior ring at one point, and on the right a ‘Polygon’
that is ‘invalid’ because its interior ring touches the exterior ring at
more than one point.  The points that describe the rings are shown in
grey.

Figure 4.  On the left, a ‘Polygon’ that is ‘invalid’ because its
exterior and interior rings touch along a line, and on the right, a
‘Polygon’ that is ‘invalid’ because its interior rings touch along a
line.

A ‘Polygon’ has non-zero area and non-zero length.

     >>> from shapely.geometry import Polygon
     >>> polygon = Polygon([(0, 0), (1, 1), (1, 0)])
     >>> polygon.area
     0.5
     >>> polygon.length
     3.4142135623730949

Its ‘x-y’ bounding box is a ‘(minx, miny, maxx, maxy)’ tuple.

     >>> polygon.bounds
     (0.0, 0.0, 1.0, 1.0)

Component rings are accessed via ‘exterior’ and ‘interiors’ properties.

     >>> list(polygon.exterior.coords)
     [(0.0, 0.0), (1.0, 1.0), (1.0, 0.0), (0.0, 0.0)]
     >>> list(polygon.interiors)
     []

The ‘Polygon’ constructor also accepts instances of ‘LineString’ and
‘LinearRing’.

     >>> coords = [(0, 0), (1, 1), (1, 0)]
     >>> r = LinearRing(coords)
     >>> s = Polygon(r)
     >>> s.area
     0.5
     >>> t = Polygon(s.buffer(1.0).exterior, [r])
     >>> t.area
     6.5507620529190334

Rectangular polygons occur commonly, and can be conveniently constructed
using the *note shapely.geometry.box(): 97. function.

 -- Function: shapely.geometry.box (minx, miny, maxx, maxy, ccw=True)

     Makes a rectangular polygon from the provided bounding box values,
     with counter-clockwise order by default.

     ‘New in version 1.2.9’.

For example:

     >>> from shapely.geometry import box
     >>> b = box(0.0, 0.0, 1.0, 1.0)
     >>> b
     <shapely.geometry.polygon.Polygon object at 0x...>
     >>> list(b.exterior.coords)
     [(1.0, 0.0), (1.0, 1.0), (0.0, 1.0), (0.0, 0.0), (1.0, 0.0)]

This is the first appearance of an explicit polygon handedness in
Shapely.

To obtain a polygon with a known orientation, use *note
shapely.geometry.polygon.orient(): 98.:

 -- Function: shapely.geometry.polygon.orient (polygon, sign=1.0)

     Returns a properly oriented copy of the given polygon.  The signed
     area of the result will have the given sign.  A sign of 1.0 means
     that the coordinates of the product’s exterior ring will be
     oriented counter-clockwise and the interior rings (holes) will be
     oriented clockwise.

     ‘New in version 1.2.10’.


File: shapely.info,  Node: Collections,  Next: Collections of Points,  Prev: Polygons,  Up: Geometric Objects

1.2.2.6 Collections
...................

Heterogeneous collections of geometric objects may result from some
Shapely operations.  For example, two ‘LineStrings’ may intersect along
a line and at a point.  To represent these kind of results, Shapely
provides frozenset(1)-like, immutable collections of geometric objects.
The collections may be homogeneous (‘MultiPoint’ etc.)  or
heterogeneous.

     >>> a = LineString([(0, 0), (1, 1), (1,2), (2,2)])
     >>> b = LineString([(0, 0), (1, 1), (2,1), (2,2)])
     >>> x = a.intersection(b)
     >>> x
     <shapely.geometry.collection.GeometryCollection object at 0x...>
     >>> from pprint import pprint
     >>> pprint(list(x))
     [<shapely.geometry.point.Point object at 0x...>,
      <shapely.geometry.linestring.LineString object at 0x...>]

[shapely-figures/geometrycollection]
Figure

Figure 5.  a) a green and a yellow line that intersect along a line and
at a single point; b) the intersection (in blue) is a collection
containing one ‘LineString’ and one ‘Point’.

Members of a ‘GeometryCollection’ are accessed via the ‘geoms’ property
or via the iterator protocol using ‘in’ or ‘list()’.

     >>> pprint(list(x.geoms))
     [<shapely.geometry.point.Point object at 0x...>,
      <shapely.geometry.linestring.LineString object at 0x...>]
     >>> pprint(list(x))
     [<shapely.geometry.point.Point object at 0x...>,
      <shapely.geometry.linestring.LineString object at 0x...>]

Collections can also be sliced.

     >>> from shapely.geometry import MultiPoint
     >>> m = MultiPoint([(0, 0), (1, 1), (1,2), (2,2)])
     >>> m[:1].wkt
     'MULTIPOINT (0.0000000000000000 0.0000000000000000)'
     >>> m[3:].wkt
     'MULTIPOINT (2.0000000000000000 2.0000000000000000)'
     >>> m[4:].wkt
     'GEOMETRYCOLLECTION EMPTY'

‘New in version 1.2.14’.

     Note: When possible, it is better to use one of the homogeneous
     collection types described below.

   ---------- Footnotes ----------

   (1) https://docs.python.org/library/stdtypes.html#frozenset


File: shapely.info,  Node: Collections of Points,  Next: Collections of Lines,  Prev: Collections,  Up: Geometric Objects

1.2.2.7 Collections of Points
.............................

 -- Class: MultiPoint (points)

     The ‘MultiPoint’ constructor takes a sequence of ‘(x, y[, z ])’
     point tuples.

A ‘MultiPoint’ has zero area and zero length.

     >>> from shapely.geometry import MultiPoint
     >>> points = MultiPoint([(0.0, 0.0), (1.0, 1.0)])
     >>> points.area
     0.0
     >>> points.length
     0.0

Its ‘x-y’ bounding box is a ‘(minx, miny, maxx, maxy)’ tuple.

     >>> points.bounds
     (0.0, 0.0, 1.0, 1.0)

Members of a multi-point collection are accessed via the ‘geoms’
property or via the iterator protocol using ‘in’ or ‘list()’.

     >>> import pprint
     >>> pprint.pprint(list(points.geoms))
     [<shapely.geometry.point.Point object at 0x...>,
      <shapely.geometry.point.Point object at 0x...>]
     >>> pprint.pprint(list(points))
     [<shapely.geometry.point.Point object at 0x...>,
      <shapely.geometry.point.Point object at 0x...>]

The constructor also accepts another ‘MultiPoint’ instance or an
unordered sequence of ‘Point’ instances, thereby making copies.

     >>> MultiPoint([Point(0, 0), Point(1, 1)])
     <shapely.geometry.multipoint.MultiPoint object at 0x...>


File: shapely.info,  Node: Collections of Lines,  Next: Collections of Polygons,  Prev: Collections of Points,  Up: Geometric Objects

1.2.2.8 Collections of Lines
............................

 -- Class: MultiLineString (lines)

     The ‘MultiLineString’ constructor takes a sequence of line-like
     sequences or objects.

[shapely-figures/multilinestring]
Figure

Figure 6.  On the left, a ‘simple’, disconnected ‘MultiLineString’, and
on the right, a non-simple ‘MultiLineString’.  The points defining the
objects are shown in gray, the boundaries of the objects in black.

A ‘MultiLineString’ has zero area and non-zero length.

     >>> from shapely.geometry import MultiLineString
     >>> coords = [((0, 0), (1, 1)), ((-1, 0), (1, 0))]
     >>> lines = MultiLineString(coords)
     >>> lines.area
     0.0
     >>> lines.length
     3.4142135623730949

Its ‘x-y’ bounding box is a ‘(minx, miny, maxx, maxy)’ tuple.

     >>> lines.bounds
     (-1.0, 0.0, 1.0, 1.0)

Its members are instances of ‘LineString’ and are accessed via the
‘geoms’ property or via the iterator protocol using ‘in’ or ‘list()’.

     >>> len(lines.geoms)
     2
     >>> pprint.pprint(list(lines.geoms))
     [<shapely.geometry.linestring.LineString object at 0x...>,
      <shapely.geometry.linestring.LineString object at 0x...>]
     >>> pprint.pprint(list(lines))
     [<shapely.geometry.linestring.LineString object at 0x...>,
      <shapely.geometry.linestring.LineString object at 0x...>]

The constructor also accepts another instance of ‘MultiLineString’ or an
unordered sequence of ‘LineString’ instances, thereby making copies.

     >>> MultiLineString(lines)
     <shapely.geometry.multilinestring.MultiLineString object at 0x...>
     >>> MultiLineString(lines.geoms)
     <shapely.geometry.multilinestring.MultiLineString object at 0x...>


File: shapely.info,  Node: Collections of Polygons,  Next: Empty features,  Prev: Collections of Lines,  Up: Geometric Objects

1.2.2.9 Collections of Polygons
...............................

 -- Class: MultiPolygon (polygons)

     The ‘MultiPolygon’ constructor takes a sequence of exterior ring
     and hole list tuples: [((a1, …, aM), [(b1, …, bN), …]), …].

More clearly, the constructor also accepts an unordered sequence of
‘Polygon’ instances, thereby making copies.

     >>> polygons = MultiPolygon([polygon, s, t])
     >>> len(polygons.geoms)
     3

Figure 7.  On the left, a ‘valid’ ‘MultiPolygon’ with 2 members, and on
the right, a ‘MultiPolygon’ that is invalid because its members touch at
an infinite number of points (along a line).

Its ‘x-y’ bounding box is a ‘(minx, miny, maxx, maxy)’ tuple.

     >>> polygons.bounds
     (-1.0, -1.0, 2.0, 2.0)

Its members are instances of ‘Polygon’ and are accessed via the ‘geoms’
property or via the iterator protocol using ‘in’ or ‘list()’.

     >>> len(polygons.geoms)
     3
     >>> len(polygons)
     3


File: shapely.info,  Node: Empty features,  Next: Coordinate sequences,  Prev: Collections of Polygons,  Up: Geometric Objects

1.2.2.10 Empty features
.......................

An “empty” feature is one with a point set that coincides with the empty
set; not ‘None’, but like ‘set([])’.  Empty features can be created by
calling the various constructors with no arguments.  Almost no
operations are supported by empty features.

     >>> line = LineString()
     >>> line.is_empty
     True
     >>> line.length
     0.0
     >>> line.bounds
     ()
     >>> line.coords
     []

The coordinates of a empty feature can be set, after which the geometry
is no longer empty.

     >>> line.coords = [(0, 0), (1, 1)]
     >>> line.is_empty
     False
     >>> line.length
     1.4142135623730951
     >>> line.bounds
     (0.0, 0.0, 1.0, 1.0)


File: shapely.info,  Node: Coordinate sequences,  Next: Linear Referencing Methods,  Prev: Empty features,  Up: Geometric Objects

1.2.2.11 Coordinate sequences
.............................

The list of coordinates that describe a geometry are represented as the
‘CoordinateSequence’ object.  These sequences should not be initialised
directly, but can be accessed from an existing geometry as the
‘Geometry.coords’ property.

     >>> line = LineString([(0, 1), (2, 3), (4, 5)])
     >>> line.coords
     <shapely.coords.CoordinateSequence object at 0x00000276EED1C7F0>

Coordinate sequences can be indexed, sliced and iterated over as if they
were a list of coordinate tuples.

     >>> line.coords[0]
     (0.0, 1.0)
     >>> line.coords[1:]
     [(2.0, 3.0), (4.0, 5.0)]
     >>> for x, y in line.coords:
     ...     print("x={}, y={}".format(x, y))
     ...
     x=0.0, y=1.0
     x=2.0, y=3.0
     x=4.0, y=5.0

Polygons have a coordinate sequence for their exterior and each of their
interior rings.

     >>> poly = Polygon([(0, 0), (0, 1), (1, 1), (0, 0)])
     >>> poly.exterior.coords
     <shapely.coords.CoordinateSequence object at 0x00000276EED1C048>

Multipart geometries do not have a coordinate sequence.  Instead the
coordinate sequences are stored on their component geometries.

     >>> p = MultiPoint([(0, 0), (1, 1), (2, 2)])
     >>> p[2].coords
     <shapely.coords.CoordinateSequence object at 0x00000276EFB9B320>


File: shapely.info,  Node: Linear Referencing Methods,  Prev: Coordinate sequences,  Up: Geometric Objects

1.2.2.12 Linear Referencing Methods
...................................

It can be useful to specify position along linear features such as
‘LineStrings’ and ‘MultiLineStrings’ with a 1-dimensional referencing
system.  Shapely supports linear referencing based on length or
distance, evaluating the distance along a geometric object to the
projection of a given point, or the point at a given distance along the
object.

 -- Method: object.interpolate (distance[, normalized=False])

     Return a point at the specified distance along a linear geometric
     object.

If the ‘normalized’ arg is ‘True’, the distance will be interpreted as a
fraction of the geometric object’s length.

     >>> ip = LineString([(0, 0), (0, 1), (1, 1)]).interpolate(1.5)
     >>> ip
     <shapely.geometry.point.Point object at 0x740570>
     >>> ip.wkt
     'POINT (0.5000000000000000 1.0000000000000000)'
     >>> LineString([(0, 0), (0, 1), (1, 1)]).interpolate(0.75, normalized=True).wkt
     'POINT (0.5000000000000000 1.0000000000000000)'

 -- Method: object.project (other[, normalized=False])

     Returns the distance along this geometric object to a point nearest
     the ‘other’ object.

If the ‘normalized’ arg is ‘True’, return the distance normalized to the
length of the object.  The *note project(): a9. method is the inverse of
*note interpolate(): a8.

     >>> LineString([(0, 0), (0, 1), (1, 1)]).project(ip)
     1.5
     >>> LineString([(0, 0), (0, 1), (1, 1)]).project(ip, normalized=True)
     0.75

For example, the linear referencing methods might be used to cut lines
at a specified distance.

     def cut(line, distance):
         # Cuts a line in two at a distance from its starting point
         if distance <= 0.0 or distance >= line.length:
             return [LineString(line)]
         coords = list(line.coords)
         for i, p in enumerate(coords):
             pd = line.project(Point(p))
             if pd == distance:
                 return [
                     LineString(coords[:i+1]),
                     LineString(coords[i:])]
             if pd > distance:
                 cp = line.interpolate(distance)
                 return [
                     LineString(coords[:i] + [(cp.x, cp.y)]),
                     LineString([(cp.x, cp.y)] + coords[i:])]

     >>> line = LineString([(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0)])
     >>> pprint([list(x.coords) for x in cut(line, 1.0)])
     [[(0.0, 0.0), (1.0, 0.0)],
      [(1.0, 0.0), (2.0, 0.0), (3.0, 0.0), (4.0, 0.0), (5.0, 0.0)]]
     >>> pprint([list(x.coords) for x in cut(line, 2.5)])
     [[(0.0, 0.0), (1.0, 0.0), (2.0, 0.0), (2.5, 0.0)],
      [(2.5, 0.0), (3.0, 0.0), (4.0, 0.0), (5.0, 0.0)]]


File: shapely.info,  Node: Predicates and Relationships,  Next: Spatial Analysis Methods,  Prev: Geometric Objects,  Up: The Shapely User Manual

1.2.3 Predicates and Relationships
----------------------------------

Objects of the types explained in *note Geometric Objects: 81. provide
standard (1) predicates as attributes (for unary predicates) and methods
(for binary predicates).  Whether unary or binary, all return ‘True’ or
‘False’.

* Menu:

* Unary Predicates::
* Binary Predicates::
* DE-9IM Relationships::

   ---------- Footnotes ----------

   (1) (1) John R. Herring, Ed., “OpenGIS Implementation Specification
for Geographic information - Simple feature access - Part 1: Common
architecture,” Oct.  2006.


File: shapely.info,  Node: Unary Predicates,  Next: Binary Predicates,  Up: Predicates and Relationships

1.2.3.1 Unary Predicates
........................

Standard unary predicates are implemented as read-only property
attributes.  An example will be shown for each.

 -- Attribute: object.has_z

     Returns ‘True’ if the feature has not only ‘x’ and ‘y’, but also
     ‘z’ coordinates for 3D (or so-called, 2.5D) geometries.

     >>> Point(0, 0).has_z
     False
     >>> Point(0, 0, 0).has_z
     True

 -- Attribute: object.is_ccw

     Returns ‘True’ if coordinates are in counter-clockwise order
     (bounding a region with positive signed area).  This method applies
     to ‘LinearRing’ objects only.

     ‘New in version 1.2.10’.

     >>> LinearRing([(1,0), (1,1), (0,0)]).is_ccw
     True

A ring with an undesired orientation can be reversed like this:

     >>> ring = LinearRing([(0,0), (1,1), (1,0)])
     >>> ring.is_ccw
     False
     >>> ring.coords = list(ring.coords)[::-1]
     >>> ring.is_ccw
     True

 -- Attribute: object.is_empty

     Returns ‘True’ if the feature’s ‘interior’ and ‘boundary’ (in point
     set terms) coincide with the empty set.

     >>> Point().is_empty
     True
     >>> Point(0, 0).is_empty
     False

     Note: With the help of the ‘operator’ module’s ‘attrgetter()’
     function, unary predicates such as ‘is_empty’ can be easily used as
     predicates for the built in ‘filter()’ or ‘itertools.ifilter()’.

     >>> from operator import attrgetter
     >>> empties = filter(attrgetter('is_empty'), [Point(), Point(0, 0)])
     >>> len(empties)
     1

 -- Attribute: object.is_ring

     Returns ‘True’ if the feature is a closed and simple ‘LineString’.
     A closed feature’s ‘boundary’ coincides with the empty set.

     >>> LineString([(0, 0), (1, 1), (1, -1)]).is_ring
     False
     >>> LinearRing([(0, 0), (1, 1), (1, -1)]).is_ring
     True

This property is applicable to ‘LineString’ and ‘LinearRing’ instances,
but meaningless for others.

 -- Attribute: object.is_simple

     Returns ‘True’ if the feature does not cross itself.

     Note: The simplicity test is meaningful only for ‘LineStrings’ and
     ‘LinearRings’.

     >>> LineString([(0, 0), (1, 1), (1, -1), (0, 1)]).is_simple
     False

Operations on non-simple ‘LineStrings’ are fully supported by Shapely.

 -- Attribute: object.is_valid

     Returns ‘True’ if a feature is “valid” in the sense of (1).

     Note: The validity test is meaningful only for ‘Polygons’ and
     ‘MultiPolygons’.  ‘True’ is always returned for other types of
     geometries.

A valid ‘Polygon’ may not possess any overlapping exterior or interior
rings.  A valid ‘MultiPolygon’ may not collect any overlapping polygons.
Operations on invalid features may fail.

     >>> MultiPolygon([Point(0, 0).buffer(2.0), Point(1, 1).buffer(2.0)]).is_valid
     False

The two points above are close enough that the polygons resulting from
the buffer operations (explained in a following section) overlap.

     Note: The ‘is_valid’ predicate can be used to write a validating
     decorator that could ensure that only valid objects are returned
     from a constructor function.

     from functools import wraps
     def validate(func):
         @wraps(func)
         def wrapper(*args, **kwargs):
             ob = func(*args, **kwargs)
             if not ob.is_valid:
                 raise TopologicalError(
                     "Given arguments do not determine a valid geometric object")
             return ob
         return wrapper

     >>> @validate
     ... def ring(coordinates):
     ...     return LinearRing(coordinates)
     ...
     >>> coords = [(0, 0), (1, 1), (1, -1), (0, 1)]
     >>> ring(coords)
     Traceback (most recent call last):
       File "<stdin>", line 1, in <module>
       File "<stdin>", line 7, in wrapper
     shapely.geos.TopologicalError: Given arguments do not determine a valid geometric object

   ---------- Footnotes ----------

   (1) (1) John R. Herring, Ed., “OpenGIS Implementation Specification
for Geographic information - Simple feature access - Part 1: Common
architecture,” Oct.  2006.


File: shapely.info,  Node: Binary Predicates,  Next: DE-9IM Relationships,  Prev: Unary Predicates,  Up: Predicates and Relationships

1.2.3.2 Binary Predicates
.........................

Standard binary predicates are implemented as methods.  These predicates
evaluate topological, set-theoretic relationships.  In a few cases the
results may not be what one might expect starting from different
assumptions.  All take another geometric object as argument and return
‘True’ or ‘False’.

 -- Method: object.__eq__ (other)

     Returns ‘True’ if the two objects are of the same geometric type,
     and the coordinates of the two objects match precisely.

 -- Method: object.equals (other)

     Returns ‘True’ if the set-theoretic ‘boundary’, ‘interior’, and
     ‘exterior’ of the object coincide with those of the other.

The coordinates passed to the object constructors are of these sets, and
determine them, but are not the entirety of the sets.  This is a
potential “gotcha” for new users.  Equivalent lines, for example, can be
constructed differently.

     >>> a = LineString([(0, 0), (1, 1)])
     >>> b = LineString([(0, 0), (0.5, 0.5), (1, 1)])
     >>> c = LineString([(0, 0), (0, 0), (1, 1)])
     >>> a.equals(b)
     True
     >>> a == b
     False
     >>> b.equals(c)
     True
     >>> b == c
     False

 -- Method: object.almost_equals (other[, decimal=6])

     Returns ‘True’ if the object is approximately equal to the ‘other’
     at all points to specified ‘decimal’ place precision.

 -- Method: object.contains (other)

     Returns ‘True’ if no points of ‘other’ lie in the exterior of the
     ‘object’ and at least one point of the interior of ‘other’ lies in
     the interior of ‘object’.

This predicate applies to all types, and is inverse to *note within():
ba.  The expression ‘a.contains(b) == b.within(a)’ always evaluates to
‘True’.

     >>> coords = [(0, 0), (1, 1)]
     >>> LineString(coords).contains(Point(0.5, 0.5))
     True
     >>> Point(0.5, 0.5).within(LineString(coords))
     True

A line’s endpoints are part of its ‘boundary’ and are therefore not
contained.

     >>> LineString(coords).contains(Point(1.0, 1.0))
     False

     Note: Binary predicates can be used directly as predicates for
     ‘filter()’ or ‘itertools.ifilter()’.

     >>> line = LineString(coords)
     >>> contained = filter(line.contains, [Point(), Point(0.5, 0.5)])
     >>> len(contained)
     1
     >>> [p.wkt for p in contained]
     ['POINT (0.5000000000000000 0.5000000000000000)']

 -- Method: object.crosses (other)

     Returns ‘True’ if the ‘interior’ of the object intersects the
     ‘interior’ of the other but does not contain it, and the dimension
     of the intersection is less than the dimension of the one or the
     other.

     >>> LineString(coords).crosses(LineString([(0, 1), (1, 0)]))
     True

A line does not cross a point that it contains.

     >>> LineString(coords).crosses(Point(0.5, 0.5))
     False

 -- Method: object.disjoint (other)

     Returns ‘True’ if the ‘boundary’ and ‘interior’ of the object do
     not intersect at all with those of the other.

     >>> Point(0, 0).disjoint(Point(1, 1))
     True

This predicate applies to all types and is the inverse of *note
intersects(): bd.

 -- Method: object.intersects (other)

     Returns ‘True’ if the ‘boundary’ or ‘interior’ of the object
     intersect in any way with those of the other.

In other words, geometric objects intersect if they have any boundary or
interior point in common.

 -- Method: object.overlaps (other)

     Returns ‘True’ if the geometries have more than one but not all
     points in common, have the same dimension, and the intersection of
     the interiors of the geometries has the same dimension as the
     geometries themselves.

 -- Method: object.touches (other)

     Returns ‘True’ if the objects have at least one point in common and
     their interiors do not intersect with any part of the other.

Overlapping features do not therefore ‘touch’, another potential
“gotcha”.  For example, the following lines touch at ‘(1, 1)’, but do
not overlap.

     >>> a = LineString([(0, 0), (1, 1)])
     >>> b = LineString([(1, 1), (2, 2)])
     >>> a.touches(b)
     True

 -- Method: object.within (other)

     Returns ‘True’ if the object’s ‘boundary’ and ‘interior’ intersect
     only with the ‘interior’ of the other (not its ‘boundary’ or
     ‘exterior’).

This applies to all types and is the inverse of *note contains(): b9.

Used in a ‘sorted()’ ‘key’, *note within(): ba. makes it easy to
spatially sort objects.  Let’s say we have 4 stereotypic features: a
point that is contained by a polygon which is itself contained by
another polygon, and a free spirited point contained by none

     >>> a = Point(2, 2)
     >>> b = Polygon([[1, 1], [1, 3], [3, 3], [3, 1]])
     >>> c = Polygon([[0, 0], [0, 4], [4, 4], [4, 0]])
     >>> d = Point(-1, -1)

and that copies of these are collected into a list

     >>> features = [c, a, d, b, c]

that we’d prefer to have ordered as ‘[d, c, c, b, a]’ in reverse
containment order.  As explained in the Python Sorting HowTo(1), we can
define a key function that operates on each list element and returns a
value for comparison.  Our key function will be a wrapper class that
implements ‘__lt__()’ using Shapely’s binary *note within(): ba.
predicate.

     class Within(object):
         def __init__(self, o):
             self.o = o
         def __lt__(self, other):
             return self.o.within(other.o)

As the howto says, the ‘less than’ comparison is guaranteed to be used
in sorting.  That’s what we’ll rely on to spatially sort, and the reason
why we use *note within(): ba. in reverse instead of *note contains():
b9.  Trying it out on features ‘d’ and ‘c’, we see that it works.

     >>> d < c
     True
     >>> Within(d) < Within(c)
     False

It also works on the list of features, producing the order we want.

     >>> [d, c, c, b, a] == sorted(features, key=Within, reverse=True)
     True

   ---------- Footnotes ----------

   (1) https://wiki.python.org/moin/HowTo/Sorting/


File: shapely.info,  Node: DE-9IM Relationships,  Prev: Binary Predicates,  Up: Predicates and Relationships

1.2.3.3 DE-9IM Relationships
............................

The *note relate(): c1. method tests all the DE-9IM (1) relationships
between objects, of which the named relationship predicates above are a
subset.

 -- Method: object.relate (other)

     Returns a string representation of the DE-9IM matrix of
     relationships between an object’s ‘interior’, ‘boundary’,
     ‘exterior’ and those of another geometric object.

The named relationship predicates (*note contains(): b9, etc.)  are
typically implemented as wrappers around *note relate(): c1.

Two different points have mainly ‘F’ (false) values in their matrix; the
intersection of their ‘external’ sets (the 9th element) is a ‘2’
dimensional object (the rest of the plane).  The intersection of the
‘interior’ of one with the ‘exterior’ of the other is a ‘0’ dimensional
object (3rd and 7th elements of the matrix).

     >>> Point(0, 0).relate(Point(1, 1))
     'FF0FFF0F2'

The matrix for a line and a point on the line has more “true” (not ‘F’)
elements.

     >>> Point(0, 0).relate(LineString([(0, 0), (1, 1)]))
     'F0FFFF102'

 -- Method: object.relate_pattern (other, pattern)

     Returns True if the DE-9IM string code for the relationship between
     the geometries satisfies the pattern, otherwise False.

The *note relate_pattern(): c2. compares the DE-9IM code string for two
geometries against a specified pattern.  If the string matches the
pattern then ‘True’ is returned, otherwise ‘False’.  The pattern
specified can be an exact match (‘0’, ‘1’ or ‘2’), a boolean match (‘T’
or ‘F’), or a wildcard (‘*’).  For example, the pattern for the ‘within’
predicate is ‘T*****FF*’.

     >> point = Point(0.5, 0.5)
     >> square = Polygon([(0, 0), (0, 1), (1, 1), (1, 0)])
     >> square.relate_pattern(point, 'T*****FF*')
     True
     >> point.within(square)
     True

Note that the order or the geometries is significant, as demonstrated
below.  In this example the square contains the point, but the point
does not contain the square.

     >>> point.relate(square)
     '0FFFFF212'
     >>> square.relate(point)
     '0F2FF1FF2'

Further discussion of the DE-9IM matrix is beyond the scope of this
manual.  See (2) and ‘https://pypi.org/project/de9im/’.

   ---------- Footnotes ----------

   (1) (4) C. Strobl, “Dimensionally Extended Nine-Intersection Model
(DE-9IM),” Encyclopedia of GIS, S. Shekhar and H. Xiong, Eds., Springer,
2008, pp.  240-245.  [PDF
(https://giswiki.hsr.ch/images/3/3d/9dem_springer.pdf)]

   (2) (4) C. Strobl, “Dimensionally Extended Nine-Intersection Model
(DE-9IM),” Encyclopedia of GIS, S. Shekhar and H. Xiong, Eds., Springer,
2008, pp.  240-245.  [PDF
(https://giswiki.hsr.ch/images/3/3d/9dem_springer.pdf)]


File: shapely.info,  Node: Spatial Analysis Methods,  Next: Affine Transformations,  Prev: Predicates and Relationships,  Up: The Shapely User Manual

1.2.4 Spatial Analysis Methods
------------------------------

As well as boolean attributes and methods, Shapely provides analysis
methods that return new geometric objects.

* Menu:

* Set-theoretic Methods::
* Constructive Methods::


File: shapely.info,  Node: Set-theoretic Methods,  Next: Constructive Methods,  Up: Spatial Analysis Methods

1.2.4.1 Set-theoretic Methods
.............................

Almost every binary predicate method has a counterpart that returns a
new geometric object.  In addition, the set-theoretic ‘boundary’ of an
object is available as a read-only attribute.

     Note: These methods will ‘always’ return a geometric object.  An
     intersection of disjoint geometries for example will return an
     empty ‘GeometryCollection’, not ‘None’ or ‘False’.  To test for a
     non-empty result, use the geometry’s is_empty property.

 -- Attribute: object.boundary

     Returns a lower dimensional object representing the object’s
     set-theoretic ‘boundary’.

The boundary of a polygon is a line, the boundary of a line is a
collection of points.  The boundary of a point is an empty (null)
collection.

     >> coords = [((0, 0), (1, 1)), ((-1, 0), (1, 0))]
     >>> lines = MultiLineString(coords)
     >>> lines.boundary
     <shapely.geometry.multipoint.MultiPoint object at 0x...>
     >>> pprint(list(lines.boundary))
     [<shapely.geometry.point.Point object at 0x...>,
      <shapely.geometry.point.Point object at 0x...>,
      <shapely.geometry.point.Point object at 0x...>,
      <shapely.geometry.point.Point object at 0x...>]
     >>> lines.boundary.boundary
     <shapely.geometry.collection.GeometryCollection object at 0x...>
     >>> lines.boundary.boundary.is_empty
     True

See the figures in *note LineStrings: 8f. and *note Collections of
Lines: 9f. for the illustration of lines and their boundaries.

 -- Attribute: object.centroid

     Returns a representation of the object’s geometric centroid
     (point).

     >>> LineString([(0, 0), (1, 1)]).centroid
     <shapely.geometry.point.Point object at 0x...>
     >>> LineString([(0, 0), (1, 1)]).centroid.wkt
     'POINT (0.5000000000000000 0.5000000000000000)'

     Note: The centroid of an object might be one of its points, but
     this is not guaranteed.

 -- Method: object.difference (other)

     Returns a representation of the points making up this geometric
     object that do not make up the `other' object.

     >>> a = Point(1, 1).buffer(1.5)
     >>> b = Point(2, 1).buffer(1.5)
     >>> a.difference(b)
     <shapely.geometry.polygon.Polygon object at 0x...>

     Note: The *note buffer(): ca. method is used to produce
     approximately circular polygons in the examples of this section; it
     will be explained in detail later in this manual.

Figure 8.  Differences between two approximately circular polygons.

     Note: Shapely can not represent the difference between an object
     and a lower dimensional object (such as the difference between a
     polygon and a line or point) as a single object, and in these cases
     the difference method returns a copy of the object named ‘self’.

 -- Method: object.intersection (other)

     Returns a representation of the intersection of this object with
     the ‘other’ geometric object.

     >>> a = Point(1, 1).buffer(1.5)
     >>> b = Point(2, 1).buffer(1.5)
     >>> a.intersection(b)
     <shapely.geometry.polygon.Polygon object at 0x...>

See the figure under *note symmetric_difference(): cc. below.

 -- Method: object.symmetric_difference (other)

     Returns a representation of the points in this object not in the
     ‘other’ geometric object, and the points in the ‘other’ not in this
     geometric object.

     >>> a = Point(1, 1).buffer(1.5)
     >>> b = Point(2, 1).buffer(1.5)
     >>> a.symmetric_difference(b)
     <shapely.geometry.multipolygon.MultiPolygon object at ...>

 -- Method: object.union (other)

     Returns a representation of the union of points from this object
     and the ‘other’ geometric object.

The type of object returned depends on the relationship between the
operands.  The union of polygons (for example) will be a polygon or a
multi-polygon depending on whether they intersect or not.

     >>> a = Point(1, 1).buffer(1.5)
     >>> b = Point(2, 1).buffer(1.5)
     >>> a.union(b)
     <shapely.geometry.polygon.Polygon object at 0x...>

The semantics of these operations vary with type of geometric object.
For example, compare the boundary of the union of polygons to the union
of their boundaries.

     >>> a.union(b).boundary
     <shapely.geometry.polygon.LinearRing object at 0x...>
     >>> a.boundary.union(b.boundary)
     <shapely.geometry.multilinestring.MultiLineString object at 0x...>

     Note: *note union(): cd. is an expensive way to find the cumulative
     union of many objects.  See *note shapely.ops.unary_union(): ce.
     for a more effective method.

Several of these set-theoretic methods can be invoked using overloaded
operators:

   - ‘intersection’ can be accessed with and, ‘&’

   - ‘union’ can be accessed with or, ‘|’

   - ‘difference’ can be accessed with minus, ‘-’

   - ‘symmetric_difference’ can be accessed with xor, ‘^’



     >>> from shapely import wkt
     >>> p1 = wkt.loads('POLYGON((0 0, 1 0, 1 1, 0 1, 0 0))')
     >>> p2 = wkt.loads('POLYGON((0.5 0, 1.5 0, 1.5 1, 0.5 1, 0.5 0))')
     >>> (p1 & p2).wkt
     'POLYGON ((1 0, 0.5 0, 0.5 1, 1 1, 1 0))'
     >>> (p1 | p2).wkt
     'POLYGON ((0.5 0, 0 0, 0 1, 0.5 1, 1 1, 1.5 1, 1.5 0, 1 0, 0.5 0))'
     >>> (p1 - p2).wkt
     'POLYGON ((0.5 0, 0 0, 0 1, 0.5 1, 0.5 0))'
     >>> (p1 ^ p2).wkt
     'MULTIPOLYGON (((0.5 0, 0 0, 0 1, 0.5 1, 0.5 0)), ((1 0, 1 1, 1.5 1, 1.5 0, 1 0)))'


File: shapely.info,  Node: Constructive Methods,  Prev: Set-theoretic Methods,  Up: Spatial Analysis Methods

1.2.4.2 Constructive Methods
............................

Shapely geometric object have several methods that yield new objects not
derived from set-theoretic analysis.

 -- Method: object.buffer (distance, resolution=16, cap_style=1,
          join_style=1, mitre_limit=5.0)

     Returns an approximate representation of all points within a given
     ‘distance’ of the this geometric object.

     The styles of caps are specified by integer values: 1 (round), 2
     (flat), 3 (square).  These values are also enumerated by the object
     *note shapely.geometry.CAP_STYLE: d0. (see below).

     The styles of joins between offset segments are specified by
     integer values: 1 (round), 2 (mitre), and 3 (bevel).  These values
     are also enumerated by the object *note
     shapely.geometry.JOIN_STYLE: d1. (see below).

 -- Data: shapely.geometry.CAP_STYLE

     Attribute     Value
                   
     ------------------------
                   
     round         1
                   
                   
     flat          2
                   
                   
     square        3
                   

 -- Data: shapely.geometry.JOIN_STYLE

     Attribute     Value
                   
     ------------------------
                   
     round         1
                   
                   
     mitre         2
                   
                   
     bevel         3
                   

     >>> from shapely.geometry import CAP_STYLE, JOIN_STYLE
     >>> CAP_STYLE.flat
     2
     >>> JOIN_STYLE.bevel
     3

A positive distance has an effect of dilation; a negative distance,
erosion.  The optional ‘resolution’ argument determines the number of
segments used to approximate a quarter circle around a point.

     >>> line = LineString([(0, 0), (1, 1), (0, 2), (2, 2), (3, 1), (1, 0)])
     >>> dilated = line.buffer(0.5)
     >>> eroded = dilated.buffer(-0.3)

Figure 9.  Dilation of a line (left) and erosion of a polygon (right).
New object is shown in blue.

The default (‘resolution’ of 16) buffer of a point is a polygonal patch
with 99.8% of the area of the circular disk it approximates.

     >>> p = Point(0, 0).buffer(10.0)
     >>> len(p.exterior.coords)
     66
     >>> p.area
     313.65484905459385

With a ‘resolution’ of 1, the buffer is a square patch.

     >>> q = Point(0, 0).buffer(10.0, 1)
     >>> len(q.exterior.coords)
     5
     >>> q.area
     200.0

Passed a ‘distance’ of 0, *note buffer(): ca. can sometimes be used to
“clean” self-touching or self-crossing polygons such as the classic
“bowtie”.  Users have reported that very small distance values sometimes
produce cleaner results than 0.  Your mileage may vary when cleaning
surfaces.

     >>> coords = [(0, 0), (0, 2), (1, 1), (2, 2), (2, 0), (1, 1), (0, 0)]
     >>> bowtie = Polygon(coords)
     >>> bowtie.is_valid
     False
     >>> clean = bowtie.buffer(0)
     >>> clean.is_valid
     True
     >>> clean
     <shapely.geometry.multipolygon.MultiPolygon object at ...>
     >>> len(clean)
     2
     >>> list(clean[0].exterior.coords)
     [(0.0, 0.0), (0.0, 2.0), (1.0, 1.0), (0.0, 0.0)]
     >>> list(clean[1].exterior.coords)
     [(1.0, 1.0), (2.0, 2.0), (2.0, 0.0), (1.0, 1.0)]

Buffering splits the polygon in two at the point where they touch.

 -- Attribute: object.convex_hull

     Returns a representation of the smallest convex ‘Polygon’
     containing all the points in the object unless the number of points
     in the object is less than three.  For two points, the convex hull
     collapses to a ‘LineString’; for 1, a ‘Point’.

     >>> Point(0, 0).convex_hull
     <shapely.geometry.point.Point object at 0x...>
     >>> MultiPoint([(0, 0), (1, 1)]).convex_hull
     <shapely.geometry.linestring.LineString object at 0x...>
     >>> MultiPoint([(0, 0), (1, 1), (1, -1)]).convex_hull
     <shapely.geometry.polygon.Polygon object at 0x...>

Figure 10.  Convex hull (blue) of 2 points (left) and of 6 points
(right).

 -- Attribute: object.envelope

     Returns a representation of the point or smallest rectangular
     polygon (with sides parallel to the coordinate axes) that contains
     the object.

     >>> Point(0, 0).envelope
     <shapely.geometry.point.Point object at 0x...>
     >>> MultiPoint([(0, 0), (1, 1)]).envelope
     <shapely.geometry.polygon.Polygon object at 0x...>

 -- Attribute: object.minimum_rotated_rectangle

     Returns the general minimum bounding rectangle that contains the
     object.  Unlike envelope this rectangle is not constrained to be
     parallel to the coordinate axes.  If the convex hull of the object
     is a degenerate (line or point) this degenerate is returned.

     ‘New in Shapely 1.6.0’

     >>> Point(0, 0).minimum_rotated_rectangle
     <shapely.geometry.point.Point object at 0x...>
     >>> MultiPoint([(0,0),(1,1),(2,0.5)]).minimum_rotated_rectangle
     <shapely.geometry.polygon.Polygon object at 0x...>

Figure 11.  Minimum rotated rectangle for a multipoint feature (left)
and a linestring feature (right).

 -- Method: object.parallel_offset (distance, side, resolution=16,
          join_style=1, mitre_limit=5.0)

     Returns a LineString or MultiLineString geometry at a distance from
     the object on its right or its left side.

     The ‘distance’ parameter must be a positive float value.

     The ‘side’ parameter may be ‘left’ or ‘right’.  Left and right are
     determined by following the direction of the given geometric points
     of the LineString.  Right hand offsets are returned in the reverse
     direction of the original LineString or LineRing, while left side
     offsets flow in the same direction.

     The ‘resolution’ of the offset around each vertex of the object is
     parameterized as in the *note buffer(): ca. method.

     The ‘join_style’ is for outside corners between line segments.
     Accepted integer values are 1 (round), 2 (mitre), and 3 (bevel).
     See also *note shapely.geometry.JOIN_STYLE: d1.

     Severely mitered corners can be controlled by the ‘mitre_limit’
     parameter (spelled in British English, en-gb).  The corners of a
     parallel line will be further from the original than most places
     with the mitre join style.  The ratio of this further distance to
     the specified ‘distance’ is the miter ratio.  Corners with a ratio
     which exceed the limit will be beveled.

          Note: This method may sometimes return a ‘MultiLineString’
          where a simple ‘LineString’ was expected; for example, an
          offset to a slightly curved LineString.

          Note: This method is only available for ‘LinearRing’ and
          ‘LineString’ objects.

Figure 12.  Three styles of parallel offset lines on the left side of a
simple line string (its starting point shown as a circle) and one offset
on the right side, a multipart.

The effect of the ‘mitre_limit’ parameter is shown below.

Figure 13.  Large and small mitre_limit values for left and right
offsets.

 -- Method: object.simplify (tolerance, preserve_topology=True)

     Returns a simplified representation of the geometric object.

All points in the simplified object will be within the ‘tolerance’
distance of the original geometry.  By default a slower algorithm is
used that preserves topology.  If preserve topology is set to ‘False’
the much quicker Douglas-Peucker algorithm (1) is used.

     >>> p = Point(0.0, 0.0)
     >>> x = p.buffer(1.0)
     >>> x.area
     3.1365484905459389
     >>> len(x.exterior.coords)
     66
     >>> s = x.simplify(0.05, preserve_topology=False)
     >>> s.area
     3.0614674589207187
     >>> len(s.exterior.coords)
     17

Figure 14.  Simplification of a nearly circular polygon using a
tolerance of 0.2 (left) and 0.5 (right).

     Note: ‘Invalid’ geometric objects may result from simplification
     that does not preserve topology and simplification may be sensitive
     to the order of coordinates: two geometries differing only in order
     of coordinates may be simplified differently.

   ---------- Footnotes ----------

   (1) (6) David H. Douglas and Thomas K. Peucker, “Algorithms for the
Reduction of the Number of Points Required to Represent a Digitized Line
or its Caricature,” Cartographica: The International Journal for
Geographic Information and Geovisualization, vol.  10, Dec.  1973, pp.
112-122.


File: shapely.info,  Node: Affine Transformations,  Next: Other Transformations,  Prev: Spatial Analysis Methods,  Up: The Shapely User Manual

1.2.5 Affine Transformations
----------------------------

A collection of affine transform functions are in the ‘shapely.affinity’
module, which return transformed geometries by either directly supplying
coefficients to an affine transformation matrix, or by using a specific,
named transform (‘rotate’, ‘scale’, etc.).  The functions can be used
with all geometry types (except ‘GeometryCollection’), and 3D types are
either preserved or supported by 3D affine transformations.

‘New in version 1.2.17’.

 -- Function: shapely.affinity.affine_transform (geom, matrix)

     Returns a transformed geometry using an affine transformation
     matrix.

     The coefficient ‘matrix’ is provided as a list or tuple with 6 or
     12 items for 2D or 3D transformations, respectively.

     For 2D affine transformations, the 6 parameter ‘matrix’ is:

          ‘[a, b, d, e, xoff, yoff]’

     which represents the augmented matrix:

          \begin{bmatrix} x' \\ y' \\ 1 \end{bmatrix} = \begin{bmatrix} a & b & x_\mathrm{off} \\ d & e & y_\mathrm{off} \\ 0 & 0 & 1 \end{bmatrix} \begin{bmatrix} x \\ y \\ 1 \end{bmatrix}

     or the equations for the transformed coordinates:

          x' &= a x + b y + x_\mathrm{off} \\ y' &= d x + e y + y_\mathrm{off}.

     For 3D affine transformations, the 12 parameter ‘matrix’ is:

          ‘[a, b, c, d, e, f, g, h, i, xoff, yoff, zoff]’

     which represents the augmented matrix:

          \begin{bmatrix} x' \\ y' \\ z' \\ 1 \end{bmatrix} = \begin{bmatrix} a & b & c & x_\mathrm{off} \\ d & e & f & y_\mathrm{off} \\ g & h & i & z_\mathrm{off} \\ 0 & 0 & 0 & 1 \end{bmatrix} \begin{bmatrix} x \\ y \\ z \\ 1 \end{bmatrix}

     or the equations for the transformed coordinates:

          x' &= a x + b y + c z + x_\mathrm{off} \\ y' &= d x + e y + f z + y_\mathrm{off} \\ z' &= g x + h y + i z + z_\mathrm{off}.

 -- Function: shapely.affinity.rotate (geom, angle, origin='center',
          use_radians=False)

     Returns a rotated geometry on a 2D plane.

     The angle of rotation can be specified in either degrees (default)
     or radians by setting ‘use_radians=True’.  Positive angles are
     counter-clockwise and negative are clockwise rotations.

     The point of origin can be a keyword ‘'center'’ for the bounding
     box center (default), ‘'centroid'’ for the geometry’s centroid, a
     ‘Point’ object or a coordinate tuple ‘(x0, y0)’.

     The affine transformation matrix for 2D rotation with angle \theta
     is:

          \begin{bmatrix} \cos{\theta} & -\sin{\theta} & x_\mathrm{off} \\ \sin{\theta} & \cos{\theta} & y_\mathrm{off} \\ 0 & 0 & 1 \end{bmatrix}

     where the offsets are calculated from the origin (x_0, y_0):

          x_\mathrm{off} &= x_0 - x_0 \cos{\theta} + y_0 \sin{\theta} \\ y_\mathrm{off} &= y_0 - x_0 \sin{\theta} - y_0 \cos{\theta}

          >>> from shapely import affinity
          >>> line = LineString([(1, 3), (1, 1), (4, 1)])
          >>> rotated_a = affinity.rotate(line, 90)
          >>> rotated_b = affinity.rotate(line, 90, origin='centroid')

[shapely-figures/rotate]
     Figure
     
     Figure 15.  Rotation of a ‘LineString’ (gray) by an angle of 90°
     counter-clockwise (blue) using different origins.

 -- Function: shapely.affinity.scale (geom, xfact=1.0, yfact=1.0,
          zfact=1.0, origin='center')

     Returns a scaled geometry, scaled by factors along each dimension.

     The point of origin can be a keyword ‘'center'’ for the 2D bounding
     box center (default), ‘'centroid'’ for the geometry’s 2D centroid,
     a ‘Point’ object or a coordinate tuple ‘(x0, y0, z0)’.

     Negative scale factors will mirror or reflect coordinates.

     The general 3D affine transformation matrix for scaling is:

          \begin{bmatrix} x_\mathrm{fact} & 0 & 0 & x_\mathrm{off} \\ 0 & y_\mathrm{fact} & 0 & y_\mathrm{off} \\ 0 & 0 & z_\mathrm{fact} & z_\mathrm{off} \\ 0 & 0 & 0 & 1 \end{bmatrix}

     where the offsets are calculated from the origin (x_0, y_0, z_0):

          x_\mathrm{off} &= x_0 - x_0 x_\mathrm{fact} \\ y_\mathrm{off} &= y_0 - y_0 y_\mathrm{fact} \\ z_\mathrm{off} &= z_0 - z_0 z_\mathrm{fact}

          >>> triangle = Polygon([(1, 1), (2, 3), (3, 1)])
          >>> triangle_a = affinity.scale(triangle, xfact=1.5, yfact=-1)
          >>> triangle_a.exterior.coords[:]
          [(0.5, 3.0), (2.0, 1.0), (3.5, 3.0), (0.5, 3.0)]
          >>> triangle_b = affinity.scale(triangle, xfact=2, origin=(1,1))
          >>> triangle_b.exterior.coords[:]
          [(1.0, 1.0), (3.0, 3.0), (5.0, 1.0), (1.0, 1.0)]

     Figure 16.  Scaling of a gray triangle to blue result: a) by a
     factor of 1.5 along x-direction, with reflection across y-axis; b)
     by a factor of 2 along x-direction with custom origin at (1, 1).

 -- Function: shapely.affinity.skew (geom, xs=0.0, ys=0.0,
          origin='center', use_radians=False)

     Returns a skewed geometry, sheared by angles along x and y
     dimensions.

     The shear angle can be specified in either degrees (default) or
     radians by setting ‘use_radians=True’.

     The point of origin can be a keyword ‘'center'’ for the bounding
     box center (default), ‘'centroid'’ for the geometry’s centroid, a
     ‘Point’ object or a coordinate tuple ‘(x0, y0)’.

     The general 2D affine transformation matrix for skewing is:

          \begin{bmatrix} 1 & \tan{x_s} & x_\mathrm{off} \\ \tan{y_s} & 1 & y_\mathrm{off} \\ 0 & 0 & 1 \end{bmatrix}

     where the offsets are calculated from the origin (x_0, y_0):

          x_\mathrm{off} &= -y_0 \tan{x_s} \\ y_\mathrm{off} &= -x_0 \tan{y_s}

     Figure 17.  Skewing of a gray “R” to blue result: a) by a shear
     angle of 20° along the x-direction and an origin at (1, 1); b) by a
     shear angle of 30° along the y-direction, using default origin.

 -- Function: shapely.affinity.translate (geom, xoff=0.0, yoff=0.0,
          zoff=0.0)

     Returns a translated geometry shifted by offsets along each
     dimension.

     The general 3D affine transformation matrix for translation is:

          \begin{bmatrix} 1 & 0 & 0 & x_\mathrm{off} \\ 0 & 1 & 0 & y_\mathrm{off} \\ 0 & 0 & 1 & z_\mathrm{off} \\ 0 & 0 & 0 & 1 \end{bmatrix}


File: shapely.info,  Node: Other Transformations,  Next: Other Operations,  Prev: Affine Transformations,  Up: The Shapely User Manual

1.2.6 Other Transformations
---------------------------

Shapely supports map projections and other arbitrary transformations of
geometric objects.

 -- Function: shapely.ops.transform (func, geom)

     Applies ‘func’ to all coordinates of ‘geom’ and returns a new
     geometry of the same type from the transformed coordinates.

     ‘func’ maps x, y, and optionally z to output xp, yp, zp.  The input
     parameters may be iterable types like lists or arrays or single
     values.  The output shall be of the same type: scalars in, scalars
     out; lists in, lists out.

     ‘transform’ tries to determine which kind of function was passed in
     by calling ‘func’ first with n iterables of coordinates, where n is
     the dimensionality of the input geometry.  If ‘func’ raises a
     ‘TypeError’ when called with iterables as arguments, then it will
     instead call ‘func’ on each individual coordinate in the geometry.

     ‘New in version 1.2.18’.

For example, here is an identity function applicable to both types of
input (scalar or array).

     def id_func(x, y, z=None):
         return tuple(filter(None, [x, y, z]))

     g2 = transform(id_func, g1)

If using ‘pyproj>=2.1.0’, the preferred method to project geometries is:

     import pyproj

     from shapely.geometry import Point
     from shapely.ops import transform

     wgs84_pt = Point(-72.2495, 43.886)

     wgs84 = pyproj.CRS('EPSG:4326')
     utm = pyproj.CRS('EPSG:32618')

     project = pyproj.Transformer.from_crs(wgs84, utm, always_xy=True).transform
     utm_point = transform(project, wgs84_pt)

It is important to note that in the example above, the ‘always_xy’ kwarg
is required as Shapely only supports coordinates in X,Y order, and in
PROJ 6 the WGS84 CRS uses the EPSG-defined Lat/Lon coordinate order
instead of the expected Lon/Lat.

If using ‘pyproj < 2.1’, then the canonical example is:

     from functools import partial
     import pyproj

     from shapely.ops import transform

     wgs84 = pyproj.Proj(init='epsg:4326')
     utm = pyproj.Proj(init='epsg:32618')

     project = partial(
         pyproj.transform,
         wgs84,
         utm)

     utm_point = transform(project, wgs84_pt)

Lambda expressions such as the one in

     g2 = transform(lambda x, y, z=None: (x+1.0, y+1.0), g1)

also satisfy the requirements for ‘func’.


File: shapely.info,  Node: Other Operations,  Next: STR-packed R-tree,  Prev: Other Transformations,  Up: The Shapely User Manual

1.2.7 Other Operations
----------------------

* Menu:

* Merging Linear Features::
* Efficient Unions::
* Delaunay triangulation::
* Voronoi Diagram::
* Nearest points::
* Snapping::
* Shared paths::
* Splitting::
* Substring::
* Prepared Geometry Operations::
* Diagnostics::
* Polylabel::


File: shapely.info,  Node: Merging Linear Features,  Next: Efficient Unions,  Up: Other Operations

1.2.7.1 Merging Linear Features
...............................

Sequences of touching lines can be merged into ‘MultiLineStrings’ or
‘Polygons’ using functions in the ‘shapely.ops’ module.

 -- Function: shapely.ops.polygonize (lines)

     Returns an iterator over polygons constructed from the input
     ‘lines’.

     As with the *note MultiLineString: a0. constructor, the input
     elements may be any line-like object.

          >>> from shapely.ops import polygonize
          >>> lines = [
          ...     ((0, 0), (1, 1)),
          ...     ((0, 0), (0, 1)),
          ...     ((0, 1), (1, 1)),
          ...     ((1, 1), (1, 0)),
          ...     ((1, 0), (0, 0))
          ...     ]
          >>> pprint(list(polygonize(lines)))
          [<shapely.geometry.polygon.Polygon object at 0x...>,
           <shapely.geometry.polygon.Polygon object at 0x...>]

 -- Function: shapely.ops.polygonize_full (lines)

     Creates polygons from a source of lines, returning the polygons and
     leftover geometries.

     The source may be a MultiLineString, a sequence of LineString
     objects, or a sequence of objects than can be adapted to
     LineStrings.

     Returns a tuple of objects: (polygons, dangles, cut edges, invalid
     ring lines).  Each are a geometry collection.

     Dangles are edges which have one or both ends which are not
     incident on another edge endpoint.  Cut edges are connected at both
     ends but do not form part of polygon.  Invalid ring lines form
     rings which are invalid (bowties, etc).

     ‘New in version 1.2.18.’

          >>> lines = [
          ...     ((0, 0), (1, 1)),
          ...     ((0, 0), (0, 1)),
          ...     ((0, 1), (1, 1)),
          ...     ((1, 1), (1, 0)),
          ...     ((1, 0), (0, 0)),
          ...     ((5, 5), (6, 6)),
          ...     ((1, 1), (100, 100)),
          ...     ]
          >>> result, dangles, cuts, invalids = polygonize_full(lines)
          >>> len(result)
          2
          >>> list(result.geoms)
          [<shapely.geometry.polygon.Polygon object at ...>, <shapely.geometry.polygon.Polygon object at ...>]
          >>> list(cuts.geoms)
          [<shapely.geometry.linestring.LineString object at ...>, <shapely.geometry.linestring.LineString object at ...>]

 -- Function: shapely.ops.linemerge (lines)

     Returns a ‘LineString’ or ‘MultiLineString’ representing the merger
     of all contiguous elements of ‘lines’.

     As with *note shapely.ops.polygonize(): e1, the input elements may
     be any line-like object.

     >>> from shapely.ops import linemerge
     >>> linemerge(lines)
     <shapely.geometry.multilinestring.MultiLineString object at 0x...>
     >>> pprint(list(linemerge(lines)))
     [<shapely.geometry.linestring.LineString object at 0x...>,
      <shapely.geometry.linestring.LineString object at 0x...>,
      <shapely.geometry.linestring.LineString object at 0x...>]


File: shapely.info,  Node: Efficient Unions,  Next: Delaunay triangulation,  Prev: Merging Linear Features,  Up: Other Operations

1.2.7.2 Efficient Unions
........................

The *note unary_union(): ce. function in ‘shapely.ops’ is more efficient
than accumulating with *note union(): cd.

 -- Function: shapely.ops.unary_union (geoms)

     Returns a representation of the union of the given geometric
     objects.

     Areas of overlapping ‘Polygons’ will get merged.  ‘LineStrings’
     will get fully dissolved and noded.  Duplicate ‘Points’ will get
     merged.

          >>> from shapely.ops import unary_union
          >>> polygons = [Point(i, 0).buffer(0.7) for i in range(5)]
          >>> unary_union(polygons)
          <shapely.geometry.polygon.Polygon object at 0x...>

     Because the union merges the areas of overlapping ‘Polygons’ it can
     be used in an attempt to fix invalid ‘MultiPolygons’.  As with the
     zero distance *note buffer(): ca. trick, your mileage may vary when
     using this.

          >>> m = MultiPolygon(polygons)
          >>> m.area
          7.6845438018375516
          >>> m.is_valid
          False
          >>> unary_union(m).area
          6.6103013551167971
          >>> unary_union(m).is_valid
          True

 -- Function: shapely.ops.cascaded_union (geoms)

     Returns a representation of the union of the given geometric
     objects.

          Note: In 1.8.0 *note shapely.ops.cascaded_union(): e5. is
          deprecated, as it was superseded by *note
          shapely.ops.unary_union(): ce.


File: shapely.info,  Node: Delaunay triangulation,  Next: Voronoi Diagram,  Prev: Efficient Unions,  Up: Other Operations

1.2.7.3 Delaunay triangulation
..............................

The *note triangulate(): e7. function in ‘shapely.ops’ calculates a
Delaunay triangulation from a collection of points.

 -- Function: shapely.ops.triangulate (geom, tolerance=0.0, edges=False)

     Returns a Delaunay triangulation of the vertices of the input
     geometry.

     The source may be any geometry type.  All vertices of the geometry
     will be used as the points of the triangulation.

     The ‘tolerance’ keyword argument sets the snapping tolerance used
     to improve the robustness of the triangulation computation.  A
     tolerance of 0.0 specifies that no snapping will take place.

     If the ‘edges’ keyword argument is ‘False’ a list of ‘Polygon’
     triangles will be returned.  Otherwise a list of ‘LineString’ edges
     is returned.

     ‘New in version 1.4.0’

     >>> from shapely.ops import triangulate
     >>> points = MultiPoint([(0, 0), (1, 1), (0, 2), (2, 2), (3, 1), (1, 0)])
     >>> triangles = triangulate(points)
     >>> pprint([triangle.wkt for triangle in triangles])
     ['POLYGON ((0 2, 0 0, 1 1, 0 2))',
      'POLYGON ((0 2, 1 1, 2 2, 0 2))',
      'POLYGON ((2 2, 1 1, 3 1, 2 2))',
      'POLYGON ((3 1, 1 1, 1 0, 3 1))',
      'POLYGON ((1 0, 1 1, 0 0, 1 0))']


File: shapely.info,  Node: Voronoi Diagram,  Next: Nearest points,  Prev: Delaunay triangulation,  Up: Other Operations

1.2.7.4 Voronoi Diagram
.......................

The *note voronoi_diagram(): e9. function in ‘shapely.ops’ constructs a
Voronoi diagram from a collection points, or the vertices of any
geometry.

 -- Function: shapely.ops.voronoi_diagram (geom, envelope=None,
          tolerance=0.0, edges=False)

     Constructs a Voronoi diagram from the vertices of the input
     geometry.

     The source may be any geometry type.  All vertices of the geometry
     will be used as the input points to the diagram.

     The ‘envelope’ keyword argument provides an envelope to use to clip
     the resulting diagram.  If ‘None’, it will be calculated
     automatically.  The diagram will be clipped to the `larger' of the
     provided envelope or an envelope surrounding the sites.

     The ‘tolerance’ keyword argument sets the snapping tolerance used
     to improve the robustness of the computation.  A tolerance of 0.0
     specifies that no snapping will take place.  The tolerance
     ‘argument’ can be finicky and is known to cause the algorithm to
     fail in several cases.  If you’re using ‘tolerance’ and getting a
     failure, try removing it.  The test cases in
     ‘tests/test_voronoi_diagram.py’ show more details.

     If the ‘edges’ keyword argument is ‘False’ a list of ‘Polygon‘s
     will be returned. Otherwise a list of ‘LineString’ edges is
     returned.

     >>> from shapely.ops import voronoi_diagram
     >>> points = MultiPoint([(0, 0), (1, 1), (0, 2), (2, 2), (3, 1), (1, 0)])
     >>> regions = voronoi_diagram(points)
     >>> pprint([region.wkt for region in regions])
     ['POLYGON ((2 1, 2 0.5, 0.5 0.5, 0 1, 1 2, 2 1))',
      'POLYGON ((6 5, 6 -3, 3.75 -3, 2 0.5, 2 1, 6 5))',
      'POLYGON ((0.5 -3, -3 -3, -3 1, 0 1, 0.5 0.5, 0.5 -3))',
      'POLYGON ((3.75 -3, 0.5 -3, 0.5 0.5, 2 0.5, 3.75 -3))',
      'POLYGON ((-3 1, -3 5, 1 5, 1 2, 0 1, -3 1))',
      'POLYGON ((1 5, 6 5, 2 1, 1 2, 1 5))']


File: shapely.info,  Node: Nearest points,  Next: Snapping,  Prev: Voronoi Diagram,  Up: Other Operations

1.2.7.5 Nearest points
......................

The *note nearest_points(): eb. function in ‘shapely.ops’ calculates the
nearest points in a pair of geometries.

 -- Function: shapely.ops.nearest_points (geom1, geom2)

     Returns a tuple of the nearest points in the input geometries.  The
     points are returned in the same order as the input geometries.

     ‘New in version 1.4.0’.

     >>> from shapely.ops import nearest_points
     >>> triangle = Polygon([(0, 0), (1, 0), (0.5, 1), (0, 0)])
     >>> square = Polygon([(0, 2), (1, 2), (1, 3), (0, 3), (0, 2)])
     >>> [o.wkt for o in nearest_points(triangle, square)]
     ['POINT (0.5 1)', 'POINT (0.5 2)']

Note that the nearest points may not be existing vertices in the
geometries.


File: shapely.info,  Node: Snapping,  Next: Shared paths,  Prev: Nearest points,  Up: Other Operations

1.2.7.6 Snapping
................

The *note snap(): ed. function in ‘shapely.ops’ snaps the vertices in
one geometry to the vertices in a second geometry with a given
tolerance.

 -- Function: shapely.ops.snap (geom1, geom2, tolerance)

     Snaps vertices in ‘geom1’ to vertices in the ‘geom2’.  A copy of
     the snapped geometry is returned.  The input geometries are not
     modified.

     The ‘tolerance’ argument specifies the minimum distance between
     vertices for them to be snapped.

     ‘New in version 1.5.0’

     >>> from shapely.ops import snap
     >>> square = Polygon([(1,1), (2, 1), (2, 2), (1, 2), (1, 1)])
     >>> line = LineString([(0,0), (0.8, 0.8), (1.8, 0.95), (2.6, 0.5)])
     >>> result = snap(line, square, 0.5)
     >>> result.wkt
     'LINESTRING (0 0, 1 1, 2 1, 2.6 0.5)'


File: shapely.info,  Node: Shared paths,  Next: Splitting,  Prev: Snapping,  Up: Other Operations

1.2.7.7 Shared paths
....................

The *note shared_paths(): ef. function in ‘shapely.ops’ finds the shared
paths between two linear geometries.

 -- Function: shapely.ops.shared_paths (geom1, geom2)

     Finds the shared paths between ‘geom1’ and ‘geom2’, where both
     geometries are ‘LineStrings’.

     A ‘GeometryCollection’ is returned with two elements.  The first
     element is a ‘MultiLineString’ containing shared paths with the
     same direction for both inputs.  The second element is a
     MultiLineString containing shared paths with the opposite direction
     for the two inputs.

     ‘New in version 1.6.0’

     >>> from shapely.ops import shared_paths
     >>> g1 = LineString([(0, 0), (10, 0), (10, 5), (20, 5)])
     >>> g2 = LineString([(5, 0), (30, 0), (30, 5), (0, 5)])
     >>> forward, backward = shared_paths(g1, g2)
     >>> forward.wkt
     'MULTILINESTRING ((5 0, 10 0))'
     >>> backward.wkt
     'MULTILINESTRING ((10 5, 20 5))'


File: shapely.info,  Node: Splitting,  Next: Substring,  Prev: Shared paths,  Up: Other Operations

1.2.7.8 Splitting
.................

The *note split(): f1. function in ‘shapely.ops’ splits a geometry by
another geometry.

 -- Function: shapely.ops.split (geom, splitter)

     Splits a geometry by another geometry and returns a collection of
     geometries.  This function is the theoretical opposite of the union
     of the split geometry parts.  If the splitter does not split the
     geometry, a collection with a single geometry equal to the input
     geometry is returned.

     The function supports:

        * Splitting a (Multi)LineString by a (Multi)Point or
          (Multi)LineString or (Multi)Polygon boundary

        * Splitting a (Multi)Polygon by a LineString

     It may be convenient to snap the splitter with low tolerance to the
     geometry.  For example in the case of splitting a line by a point,
     the point must be exactly on the line, for the line to be correctly
     split.  When splitting a line by a polygon, the boundary of the
     polygon is used for the operation.  When splitting a line by
     another line, a ValueError is raised if the two overlap at some
     segment.

     ‘New in version 1.6.0’

     >>> pt = Point((1, 1))
     >>> line = LineString([(0,0), (2,2)])
     >>> result = split(line, pt)
     >>> result.wkt
     'GEOMETRYCOLLECTION (LINESTRING (0 0, 1 1), LINESTRING (1 1, 2 2))'


File: shapely.info,  Node: Substring,  Next: Prepared Geometry Operations,  Prev: Splitting,  Up: Other Operations

1.2.7.9 Substring
.................

The *note substring(): f3. function in ‘shapely.ops’ returns a line
segment between specified distances along a ‘LineString’.

 -- Function: shapely.ops.substring (geom, start_dist, end_dist[,
          normalized=False])

     Return the ‘LineString’ between ‘start_dist’ and ‘end_dist’ or a
     ‘Point’ if they are at the same location

     Negative distance values are taken as measured in the reverse
     direction from the end of the geometry.  Out-of-range index values
     are handled by clamping them to the valid range of values.

     If the start distance equals the end distance, a point is being
     returned.

     If the start distance is actually past the end distance, then the
     reversed substring is returned such that the start distance is at
     the first coordinate.

     If the normalized arg is ‘True’, the distance will be interpreted
     as a fraction of the geometry’s length

     ‘New in version 1.7.0’

     Here are some examples that return ‘LineString’ geometries.

          >>> from shapely.geometry import LineString
          >>> from shapely.ops import substring
          >>> ls = LineString((i, 0) for i in range(6))
          >>> ls.wkt
          'LINESTRING (0 0, 1 0, 2 0, 3 0, 4 0, 5 0)'
          >>> substring(ls, start_dist=1, end_dist=3).wkt
          'LINESTRING (1 0, 2 0, 3 0)'
          >>> substring(ls, start_dist=3, end_dist=1).wkt
          'LINESTRING (3 0, 2 0, 1 0)'
          >>> substring(ls, start_dist=1, end_dist=-3).wkt
          'LINESTRING (1 0, 2 0)'
          >>> substring(ls, start_dist=0.2, end_dist=-0.6, normalized=True).wkt
          'LINESTRING (1 0, 2 0)'

     And here is an example that returns a ‘Point’.

          >>> substring(ls, start_dist=2.5, end_dist=-2.5)
          'POINT (2.5 0)'


File: shapely.info,  Node: Prepared Geometry Operations,  Next: Diagnostics,  Prev: Substring,  Up: Other Operations

1.2.7.10 Prepared Geometry Operations
.....................................

Shapely geometries can be processed into a state that supports more
efficient batches of operations.

 -- Function: prepared.prep (ob)

     Creates and returns a prepared geometric object.

To test one polygon containment against a large batch of points, one
should first use the *note prepared.prep(): f5. function.

     >>> from shapely.geometry import Point
     >>> from shapely.prepared import prep
     >>> points = [...] # large list of points
     >>> polygon = Point(0.0, 0.0).buffer(1.0)
     >>> prepared_polygon = prep(polygon)
     >>> prepared_polygon
     <shapely.prepared.PreparedGeometry object at 0x...>
     >>> hits = filter(prepared_polygon.contains, points)

Prepared geometries instances have the following methods: ‘contains’,
‘contains_properly’, ‘covers’, and ‘intersects’.  All have exactly the
same arguments and usage as their counterparts in non-prepared geometric
objects.


File: shapely.info,  Node: Diagnostics,  Next: Polylabel,  Prev: Prepared Geometry Operations,  Up: Other Operations

1.2.7.11 Diagnostics
....................

 -- Function: validation.explain_validity(ob):

     Returns a string explaining the validity or invalidity of the
     object.

     ‘New in version 1.2.1’.

The messages may or may not have a representation of a problem point
that can be parsed out.

     >>> coords = [(0, 0), (0, 2), (1, 1), (2, 2), (2, 0), (1, 1), (0, 0)]
     >>> p = Polygon(coords)
     >>> from shapely.validation import explain_validity
     >>> explain_validity(p)
     'Ring Self-intersection[1 1]'

 -- Function: validation.make_valid (ob)

     Returns a valid representation of the geometry, if it is invalid.
     If it is valid, the input geometry will be returned.

     In many cases, in order to create a valid geometry, the input
     geometry must be split into multiple parts or multiple geometries.
     If the geometry must be split into multiple parts of the same
     geometry type, then a multi-part geometry (e.g.  a MultiPolygon)
     will be returned.  if the geometry must be split into multiple
     parts of different types, then a GeometryCollection will be
     returned.

     For example, this operation on a geometry with a bow-tie structure:

     >>> from shapely.validation import make_valid
     >>> coords = [(0, 0), (0, 2), (1, 1), (2, 2), (2, 0), (1, 1), (0, 0)]
     >>> p = Polygon(coords)
     >>> str(make_valid(p))
     'MULTIPOLYGON (((0 0, 0 2, 1 1, 0 0)), ((1 1, 2 2, 2 0, 1 1)))'

     Yields a MultiPolygon with two parts:

     >>> from shapely.validation import make_valid
     >>> coords = [(0, 2), (0, 1), (2, 0), (0, 0), (0, 2)]
     >>> p = Polygon(coords)
     >>> str(make_valid(p))

     Yields a GeometryCollection with a Polygon and a LineString:

The Shapely version, GEOS library version, and GEOS C API version are
accessible via ‘shapely.__version__’,
‘shapely.geos.geos_version_string’, and
‘shapely.geos.geos_capi_version’.

     >>> import shapely
     >>> shapely.__version__
     '1.3.0'
     >>> import shapely.geos
     >>> shapely.geos.geos_version
     (3, 3, 0)
     >>> shapely.geos.geos_version_string
     '3.3.0-CAPI-1.7.0'


File: shapely.info,  Node: Polylabel,  Prev: Diagnostics,  Up: Other Operations

1.2.7.12 Polylabel
..................

 -- Function: shapely.ops.polylabel (polygon, tolerance)

     Finds the approximate location of the pole of inaccessibility for a
     given polygon.  Based on Vladimir Agafonkin’s polylabel(1).

     ‘New in version 1.6.0’

     Note: Prior to 1.7 ‘polylabel’ must be imported from
     ‘shapely.algorithms.polylabel’ instead of ‘shapely.ops’.

     >>> from shapely.ops import polylabel
     >>> polygon = LineString([(0, 0), (50, 200), (100, 100), (20, 50),
     ... (-100, -20), (-150, -200)]).buffer(100)
     >>> label = polylabel(polygon, tolerance=10)
     >>> label.wkt
     'POINT (59.35615556364569 121.8391962974644)'

   ---------- Footnotes ----------

   (1) https://github.com/mapbox/polylabel


File: shapely.info,  Node: STR-packed R-tree,  Next: Interoperation,  Prev: Other Operations,  Up: The Shapely User Manual

1.2.8 STR-packed R-tree
-----------------------

Shapely provides an interface to the query-only GEOS R-tree packed using
the Sort-Tile-Recursive algorithm.  Pass a list of geometry objects to
the STRtree constructor to create a spatial index that you can query
with another geometric object.  Query-only means that once created, the
‘STRtree’ is immutable.  You cannot add or remove geometries.

 -- Class: strtree.STRtree (geometries)

     The ‘STRtree’ constructor takes a sequence of geometric objects.

     References to these geometric objects are kept and stored in the
     R-tree.

     ‘New in version 1.4.0’.

      -- Method: strtree.query (geom)

          Returns a list of all geometries in the ‘strtree’ whose
          extents intersect the extent of ‘geom’.  This means that a
          subsequent search through the returned subset using the
          desired binary predicate (eg.  intersects, crosses, contains,
          overlaps) may be necessary to further filter the results
          according to their specific spatial relationships.

               >>> from shapely.strtree import STRtree
               >>> points = [Point(i, i) for i in range(10)]
               >>> tree = STRtree(points)
               >>> query_geom = Point(2,2).buffer(0.99)
               >>> [o.wkt for o in tree.query(query_geom)]
               ['POINT (2 2)']
               >>> query_geom = Point(2, 2).buffer(1.0)
               >>> [o.wkt for o in tree.query(query_geom)]
               ['POINT (1 1)', 'POINT (2 2)', 'POINT (3 3)']
               >>> [o.wkt for o in tree.query(query_geom) if o.intersects(query_geom)]
               ['POINT (2 2)']

               Note: To get the original indexes of the query results,
               create an auxiliary dictionary.  But use the geometry
               ‘ids’ as keys since the shapely geometries themselves are
               not hashable.

                    >>> index_by_id = dict((id(pt), i) for i, pt in enumerate(points))
                    >>> [(index_by_id[id(pt)], pt.wkt) for pt in tree.query(Point(2,2).buffer(1.0))]
                    [(1, 'POINT (1 1)'), (2, 'POINT (2 2)'), (3, 'POINT (3 3)')]

      -- Method: strtree.nearest (geom)

          Returns the nearest geometry in ‘strtree’ to ‘geom’.

               >>> tree = STRtree([Point(i, i) for i in range(10)])
               >>> tree.nearest(Point(2.2, 2.2)).wkt
               'Point (2 2)'


File: shapely.info,  Node: Interoperation,  Next: Performance,  Prev: STR-packed R-tree,  Up: The Shapely User Manual

1.2.9 Interoperation
--------------------

Shapely provides 4 avenues for interoperation with other software.

* Menu:

* Well-Known Formats::
* Numpy and Python Arrays::
* Python Geo Interface::


File: shapely.info,  Node: Well-Known Formats,  Next: Numpy and Python Arrays,  Up: Interoperation

1.2.9.1 Well-Known Formats
..........................

A ‘Well Known Text’ (WKT) or ‘Well Known Binary’ (WKB) representation
(1) of any geometric object can be had via its ‘wkt’ or ‘wkb’ attribute.
These representations allow interchange with many GIS programs.
PostGIS, for example, trades in hex-encoded WKB.

     >>> Point(0, 0).wkt
     'POINT (0.0000000000000000 0.0000000000000000)'
     >>> Point(0, 0).wkb.encode('hex')
     '010100000000000000000000000000000000000000'

The ‘shapely.wkt’ and ‘shapely.wkb’ modules provide ‘dumps()’ and
‘loads()’ functions that work almost exactly as their ‘pickle’ and
‘simplejson’ module counterparts.  To serialize a geometric object to a
binary or text string, use ‘dumps()’.  To deserialize a string and get a
new geometric object of the appropriate type, use ‘loads()’.

The default settings for the wkt attribute and ‘shapely.wkt.dumps()’
function are different.  By default, the attribute’s value is trimmed of
excess decimals, while this is not the case for ‘dumps()’, though it can
be replicated by setting ‘trim=True’.

 -- Function: shapely.wkb.dumps (ob)

     Returns a WKB representation of ‘ob’.

 -- Function: shapely.wkb.loads (wkb)

     Returns a geometric object from a WKB representation ‘wkb’.

     >>> from shapely import wkb
     >>> pt = Point(0, 0)
     >>> wkb.dumps(pt)
     b'\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
     >>> pt.wkb
     b'\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
     >>> pt.wkb_hex
     '010100000000000000000000000000000000000000'
     >>> wkb.loads(pt.wkb).wkt
     'POINT (0 0)'

All of Shapely’s geometry types are supported by these functions.

 -- Function: shapely.wkt.dumps (ob)

     Returns a WKT representation of ‘ob’.  Several keyword arguments
     are available to alter the WKT which is returned; see the
     docstrings for more details.

 -- Function: shapely.wkt.loads (wkt)

     Returns a geometric object from a WKT representation ‘wkt’.

     >>> from shapely import wkt
     >>> pt = Point(0, 0)
     >>> thewkt = wkt.dumps(pt)
     >>> thewkt
     'POINT (0.0000000000000000 0.0000000000000000)'
     >>> pt.wkt
     'POINT (0 0)'
     >>> wkt.dumps(pt, trim=True)
     'POINT (0 0)'

   ---------- Footnotes ----------

   (1) (1) John R. Herring, Ed., “OpenGIS Implementation Specification
for Geographic information - Simple feature access - Part 1: Common
architecture,” Oct.  2006.


File: shapely.info,  Node: Numpy and Python Arrays,  Next: Python Geo Interface,  Prev: Well-Known Formats,  Up: Interoperation

1.2.9.2 Numpy and Python Arrays
...............................

All geometric objects with coordinate sequences (‘Point’, ‘LinearRing’,
‘LineString’) provide the Numpy array interface and can thereby be
converted or adapted to Numpy arrays.

     >>> from numpy import asarray
     >>> asarray(Point(0, 0))
     array([ 0.,  0.])
     >>> asarray(LineString([(0, 0), (1, 1)]))
     array([[ 0.,  0.],
            [ 1.,  1.]])

     Note: The Numpy array interface is provided without a dependency on
     Numpy itself.

The coordinates of the same types of geometric objects can be had as
standard Python arrays of ‘x’ and ‘y’ values via the ‘xy’ attribute.

     >>> Point(0, 0).xy
     (array('d', [0.0]), array('d', [0.0]))
     >>> LineString([(0, 0), (1, 1)]).xy
     (array('d', [0.0, 1.0]), array('d', [0.0, 1.0]))

The *note shapely.geometry.asShape(): 105. family of functions can be
used to wrap Numpy coordinate arrays so that they can then be analyzed
using Shapely while maintaining their original storage.  A 1 x 2 array
can be adapted to a point

     >>> from shapely.geometry import asPoint
     >>> pa = asPoint(array([0.0, 0.0]))
     >>> pa.wkt
     'POINT (0.0000000000000000 0.0000000000000000)'

and a N x 2 array can be adapted to a line string

     >>> from shapely.geometry import asLineString
     >>> la = asLineString(array([[1.0, 2.0], [3.0, 4.0]]))
     >>> la.wkt
     'LINESTRING (1.0000000000000000 2.0000000000000000, 3.0000000000000000 4.0000000000000000)'

Polygon and MultiPoint can also be created from N x 2 arrays:

     >>> from shapely.geometry import asMultiPoint
     >>> ma = asMultiPoint(np.array([[1.1, 2.2], [3.3, 4.4], [5.5, 6.6]]))
     >>> ma.wkt
     'MULTIPOINT (1.1 2.2, 3.3 4.4, 5.5 6.6)'

     >>> from shapely.geometry import asPolygon
     >>> pa = asPolygon(np.array([[1.1, 2.2], [3.3, 4.4], [5.5, 6.6]]))
     >>> pa.wkt
     'POLYGON ((1.1 2.2, 3.3 4.4, 5.5 6.6, 1.1 2.2))'


File: shapely.info,  Node: Python Geo Interface,  Prev: Numpy and Python Arrays,  Up: Interoperation

1.2.9.3 Python Geo Interface
............................

Any object that provides the GeoJSON-like Python geo interface(1) can be
adapted and used as a Shapely geometry using the *note
shapely.geometry.asShape(): 105. or *note shapely.geometry.shape(): 107.
functions.

 -- Function: shapely.geometry.asShape (context)

     Adapts the context to a geometry interface.  The coordinates remain
     stored in the context.

 -- Function: shapely.geometry.shape (context)

     Returns a new, independent geometry with coordinates ‘copied’ from
     the context.

For example, a dictionary:

     >>> from shapely.geometry import shape
     >>> data = {"type": "Point", "coordinates": (0.0, 0.0)}
     >>> geom = shape(data)
     >>> geom.geom_type
     'Point'
     >>> list(geom.coords)
     [(0.0, 0.0)]

Or a simple placemark-type object:

     >>> class GeoThing(object):
     ...     def __init__(self, d):
     ...         self.__geo_interface__ = d
     >>> thing = GeoThing({"type": "Point", "coordinates": (0.0, 0.0)})
     >>> geom = shape(thing)
     >>> geom.geom_type
     'Point'
     >>> list(geom.coords)
     [(0.0, 0.0)]

The GeoJSON-like mapping of a geometric object can be obtained using
*note shapely.geometry.mapping(): 108.

 -- Function: shapely.geometry.mapping (ob)

     Returns a new, independent geometry with coordinates ‘copied’ from
     the context.

     ‘New in version 1.2.3’.

     For example, using the same ‘GeoThing’ class:

     >>> from shapely.geometry import mapping
     >>> thing = GeoThing({"type": "Point", "coordinates": (0.0, 0.0)})
     >>> m = mapping(thing)
     >>> m['type']
     'Point'
     >>> m['coordinates']
     (0.0, 0.0)}

   ---------- Footnotes ----------

   (1) https://gist.github.com/2217756


File: shapely.info,  Node: Performance,  Next: Conclusion,  Prev: Interoperation,  Up: The Shapely User Manual

1.2.10 Performance
------------------

Shapely uses the GEOS(1) library for all operations.  GEOS is written in
C++ and used in many applications and you can expect that all operations
are highly optimized.  The creation of new geometries with many
coordinates, however, involves some overhead that might slow down your
code.

New in version 1.2.10.

The ‘shapely.speedups’ module contains performance enhancements written
in C. They are automatically installed when Python has access to a
compiler and GEOS development headers during installation.

You can check if the speedups are installed with the ‘available’
attribute.  To enable the speedups call ‘enable()’.  You can revert to
the slow implementation with ‘disable()’.

     >>> from shapely import speedups
     >>> speedups.available
     True
     >>> speedups.enable()

New in version 1.6.0.

Speedups are now enabled by default if they are available.  You can
check if speedups are enabled with the ‘enabled’ attribute.

     >>> from shapely import speedups
     >>> speedups.enabled
     True

   ---------- Footnotes ----------

   (1) https://trac.osgeo.org/geos/


File: shapely.info,  Node: Conclusion,  Next: References,  Prev: Performance,  Up: The Shapely User Manual

1.2.11 Conclusion
-----------------

We hope that you will enjoy and profit from using Shapely.  This manual
will be updated and improved regularly.  Its source is available at
‘https://github.com/Toblerity/Shapely/tree/master/docs/’.


File: shapely.info,  Node: References,  Prev: Conclusion,  Up: The Shapely User Manual

1.2.12 References
-----------------


File: shapely.info,  Node: Indices and tables,  Next: Index,  Prev: Documentation Contents,  Up: Top

2 Indices and tables
********************

   * genindex

   * search


File: shapely.info,  Node: Index,  Prev: Indices and tables,  Up: Top

Index
*****

 [index ]
* Menu:

* __eq__() (object method):              Binary Predicates.   (line  12)
* almost_equals() (object method):       Binary Predicates.   (line  39)
* area (object attribute):               General Attributes and Methods.
                                                              (line   6)
* boundary (object attribute):           Set-theoretic Methods.
                                                              (line  15)
* bounds (object attribute):             General Attributes and Methods.
                                                              (line  10)
* buffer() (object method):              Constructive Methods.
                                                              (line   9)
* centroid (object attribute):           Set-theoretic Methods.
                                                              (line  41)
* contains() (object method):            Binary Predicates.   (line  44)
* convex_hull (object attribute):        Constructive Methods.
                                                              (line 112)
* crosses() (object method):             Binary Predicates.   (line  76)
* difference() (object method):          Set-theoretic Methods.
                                                              (line  54)
* disjoint() (object method):            Binary Predicates.   (line  91)
* distance() (object method):            General Attributes and Methods.
                                                              (line  43)
* envelope (object attribute):           Constructive Methods.
                                                              (line 129)
* equals() (object method):              Binary Predicates.   (line  17)
* geom_type (object attribute):          General Attributes and Methods.
                                                              (line  35)
* has_z (object attribute):              Unary Predicates.    (line   9)
* hausdorff_distance() (object method):  General Attributes and Methods.
                                                              (line  51)
* interpolate() (object method):         Linear Referencing Methods.
                                                              (line  13)
* intersection() (object method):        Set-theoretic Methods.
                                                              (line  75)
* intersects() (object method):          Binary Predicates.   (line 102)
* is_ccw (object attribute):             Unary Predicates.    (line  19)
* is_empty (object attribute):           Unary Predicates.    (line  39)
* is_ring (object attribute):            Unary Predicates.    (line  58)
* is_simple (object attribute):          Unary Predicates.    (line  71)
* is_valid (object attribute):           Unary Predicates.    (line  83)
* length (object attribute):             General Attributes and Methods.
                                                              (line  15)
* LinearRing (built-in class):           LinearRings.         (line   6)
* LineString (built-in class):           LineStrings.         (line   6)
* minimum_clearance (object attribute):  General Attributes and Methods.
                                                              (line  19)
* minimum_rotated_rectangle (object attribute): Constructive Methods.
                                                              (line 140)
* MultiLineString (built-in class):      Collections of Lines.
                                                              (line   6)
* MultiPoint (built-in class):           Collections of Points.
                                                              (line   6)
* MultiPolygon (built-in class):         Collections of Polygons.
                                                              (line   6)
* nearest() (strtree.STRtree.strtree method): STR-packed R-tree.
                                                              (line  51)
* overlaps() (object method):            Binary Predicates.   (line 110)
* parallel_offset() (object method):     Constructive Methods.
                                                              (line 157)
* Point (built-in class):                Points.              (line   6)
* Polygon (built-in class):              Polygons.            (line   6)
* prepared.prep() (built-in function):   Prepared Geometry Operations.
                                                              (line   9)
* project() (object method):             Linear Referencing Methods.
                                                              (line  29)
* query() (strtree.STRtree.strtree method): STR-packed R-tree.
                                                              (line  21)
* relate() (object method):              DE-9IM Relationships.
                                                              (line  10)
* relate_pattern() (object method):      DE-9IM Relationships.
                                                              (line  34)
* representative_point() (object method): General Attributes and Methods.
                                                              (line  67)
* shapely.affinity.affine_transform() (built-in function): Affine Transformations.
                                                              (line  15)
* shapely.affinity.rotate() (built-in function): Affine Transformations.
                                                              (line  47)
* shapely.affinity.scale() (built-in function): Affine Transformations.
                                                              (line  80)
* shapely.affinity.skew() (built-in function): Affine Transformations.
                                                              (line 111)
* shapely.affinity.translate() (built-in function): Affine Transformations.
                                                              (line 136)
* shapely.geometry.asShape() (built-in function): Python Geo Interface.
                                                              (line  11)
* shapely.geometry.box() (built-in function): Polygons.       (line  66)
* shapely.geometry.CAP_STYLE (built-in variable): Constructive Methods.
                                                              (line  24)
* shapely.geometry.JOIN_STYLE (built-in variable): Constructive Methods.
                                                              (line  39)
* shapely.geometry.mapping() (built-in function): Python Geo Interface.
                                                              (line  46)
* shapely.geometry.polygon.orient() (built-in function): Polygons.
                                                              (line  88)
* shapely.geometry.shape() (built-in function): Python Geo Interface.
                                                              (line  16)
* shapely.ops.cascaded_union() (built-in function): Efficient Unions.
                                                              (line  38)
* shapely.ops.linemerge() (built-in function): Merging Linear Features.
                                                              (line  65)
* shapely.ops.nearest_points() (built-in function): Nearest points.
                                                              (line   9)
* shapely.ops.polygonize() (built-in function): Merging Linear Features.
                                                              (line   9)
* shapely.ops.polygonize_full() (built-in function): Merging Linear Features.
                                                              (line  29)
* shapely.ops.polylabel() (built-in function): Polylabel.     (line   6)
* shapely.ops.shared_paths() (built-in function): Shared paths.
                                                              (line   9)
* shapely.ops.snap() (built-in function): Snapping.           (line  10)
* shapely.ops.split() (built-in function): Splitting.         (line   9)
* shapely.ops.substring() (built-in function): Substring.     (line   9)
* shapely.ops.transform() (built-in function): Other Transformations.
                                                              (line   9)
* shapely.ops.triangulate() (built-in function): Delaunay triangulation.
                                                              (line   9)
* shapely.ops.unary_union() (built-in function): Efficient Unions.
                                                              (line   9)
* shapely.ops.voronoi_diagram() (built-in function): Voronoi Diagram.
                                                              (line  10)
* shapely.wkb.dumps() (built-in function): Well-Known Formats.
                                                              (line  27)
* shapely.wkb.loads() (built-in function): Well-Known Formats.
                                                              (line  31)
* shapely.wkt.dumps() (built-in function): Well-Known Formats.
                                                              (line  48)
* shapely.wkt.loads() (built-in function): Well-Known Formats.
                                                              (line  54)
* simplify() (object method):            Constructive Methods.
                                                              (line 201)
* strtree.STRtree (built-in class):      STR-packed R-tree.   (line  12)
* symmetric_difference() (object method): Set-theoretic Methods.
                                                              (line  87)
* touches() (object method):             Binary Predicates.   (line 117)
* union() (object method):               Set-theoretic Methods.
                                                              (line  98)
* validation.make_valid() (built-in function): Diagnostics.   (line  22)
* within() (object method):              Binary Predicates.   (line 131)



Tag Table:
Node: Top378
Ref: index doc612
Ref: 0612
Node: Documentation Contents6358
Ref: index documentation-contents6460
Ref: 16460
Ref: index shapely6460
Ref: 26460
Node: Shapely<2>6572
Ref: project doc6674
Ref: 36674
Ref: project shapely6674
Ref: 46674
Ref: Shapely<2>-Footnote-17509
Ref: Shapely<2>-Footnote-27546
Ref: Shapely<2>-Footnote-37573
Ref: Shapely<2>-Footnote-47617
Ref: Shapely<2>-Footnote-57662
Node: Usage7712
Ref: project usage7786
Ref: 57786
Node: Requirements8162
Ref: project requirements8263
Ref: 68263
Node: Installing Shapely8365
Ref: project installing-shapely8472
Ref: 78472
Node: Built distributions8682
Ref: project built-distributions8786
Ref: 88786
Node: Source distributions9669
Ref: project source-distributions9773
Ref: 99773
Node: Integration10557
Ref: project integration10675
Ref: a10675
Node: Development and Testing11476
Ref: project development-and-testing11583
Ref: b11583
Node: Support12090
Ref: project support12193
Ref: c12193
Ref: Support-Footnote-112435
Node: Credits12498
Ref: project credits12585
Ref: d12585
Ref: Credits-Footnote-117975
Node: Changes18009
Ref: project changes18127
Ref: e18127
Ref: project pleiades18127
Ref: f18127
Node: 1 8 0 TBD22010
Ref: project tbd22089
Ref: 1022089
Node: 1 7 1 2020-08-2022478
Ref: project id122582
Ref: 1122582
Node: 1 7 0 2020-01-2823784
Ref: project id223895
Ref: 1223895
Node: 1 7b1 2020-01-1324025
Ref: project b1-2020-01-1324136
Ref: 1324136
Node: 1 7a3 2019-12-3124212
Ref: project a3-2019-12-3124323
Ref: 1424323
Node: 1 7a2 2019-06-2125012
Ref: project a2-2019-06-2125123
Ref: 1525123
Node: 1 7a1 2018-07-2926800
Ref: project a1-2018-07-2926917
Ref: 1626917
Node: 1 6 4 post1 2018-01-2427914
Ref: project post1-2018-01-2428031
Ref: 1728031
Node: 1 6 4 2018-01-2428199
Ref: project id328316
Ref: 1828316
Node: 1 6 3 2017-12-0928466
Ref: project id428577
Ref: 1928577
Node: 1 6 2 2017-10-3029081
Ref: project id529192
Ref: 1a29192
Node: 1 6 2 2017-10-2629350
Ref: project id629461
Ref: 1b29461
Node: 1 6 1 2017-09-0129750
Ref: project id729861
Ref: 1c29861
Node: 1 6 0 2017-08-2130480
Ref: project id830591
Ref: 1d30591
Node: 1 6b5 2017-08-1831637
Ref: project b5-2017-08-1831748
Ref: 1e31748
Node: 1 6b4 2017-02-1531984
Ref: project b4-2017-02-1532095
Ref: 1f32095
Node: 1 6b3 2016-12-3132324
Ref: project b3-2016-12-3132435
Ref: 2032435
Node: 1 6b2 2016-12-1232681
Ref: project b2-2016-12-1232792
Ref: 2132792
Node: 1 6b1 2016-12-1232949
Ref: project b1-2016-12-1233060
Ref: 2233060
Node: 1 6a3 2016-12-0133213
Ref: project a3-2016-12-0133324
Ref: 2333324
Node: 1 6a2 2016-11-0933541
Ref: project a2-2016-11-0933652
Ref: 2433652
Node: 1 6a1 2016-09-1434239
Ref: project a1-2016-09-1434351
Ref: 2534351
Node: 1 5 17 2016-08-3135955
Ref: project id936068
Ref: 2636068
Node: 1 5 16 2016-05-2636342
Ref: project id1036456
Ref: 2736456
Node: 1 5 15 2016-03-2936952
Ref: project id1137066
Ref: 2837066
Node: 1 5 14 2016-03-2737351
Ref: project id1237465
Ref: 2937465
Node: 1 5 13 2015-10-0938262
Ref: project id1338376
Ref: 2a38376
Node: 1 5 12 2015-08-2738746
Ref: project id1438860
Ref: 2b38860
Node: 1 5 11 2015-08-2339261
Ref: project id1539375
Ref: 2c39375
Node: 1 5 10 2015-08-2239615
Ref: project id1639728
Ref: 2d39728
Node: 1 5 9 2015-05-2739938
Ref: project id1740050
Ref: 2e40050
Node: 1 5 8 2015-04-2940159
Ref: project id1840270
Ref: 2f40270
Node: 1 5 7 2015-03-1640523
Ref: project id1940634
Ref: 3040634
Node: 1 5 6 2015-02-0240750
Ref: project id2040861
Ref: 3140861
Node: 1 5 5 2015-01-2041011
Ref: project id2141122
Ref: 3241122
Node: 1 5 4 2015-01-1941231
Ref: project id2241342
Ref: 3341342
Node: 1 5 3 2015-01-1241455
Ref: project id2341566
Ref: 3441566
Node: 1 5 2 2015-01-0441740
Ref: project id2441851
Ref: 3541851
Node: 1 5 1 2014-12-0442009
Ref: project id2542120
Ref: 3642120
Node: 1 5 0 2014-12-0242216
Ref: project id2642327
Ref: 3742327
Node: 1 4 4 2014-11-0242630
Ref: project id2742741
Ref: 3842741
Node: 1 4 3 2014-10-0142862
Ref: project id2842973
Ref: 3942973
Node: 1 4 2 2014-09-2943081
Ref: project id2943192
Ref: 3a43192
Node: 1 4 1 2014-09-2343289
Ref: project id3043400
Ref: 3b43400
Node: 1 4 0 2014-09-0843508
Ref: project id3143619
Ref: 3c43619
Node: 1 3 3 2014-07-2344121
Ref: project id3244232
Ref: 3d44232
Node: 1 3 2 2014-05-1344432
Ref: project id3344543
Ref: 3e44543
Node: 1 3 1 2014-04-2244657
Ref: project id3444768
Ref: 3f44768
Node: 1 3 0 2013-12-3144930
Ref: project id3545042
Ref: 4045042
Node: 1 2 19 2013-12-3045442
Ref: project id3645555
Ref: 4145555
Node: 1 2 18 2013-07-2345655
Ref: project id3745769
Ref: 4245769
Node: 1 2 17 2013-01-2746103
Ref: project id3846217
Ref: 4346217
Node: 1 2 16 2012-09-1846633
Ref: project id3946747
Ref: 4446747
Node: 1 2 15 2012-06-2747395
Ref: project id4047509
Ref: 4547509
Node: 1 2 14 2012-01-2347921
Ref: project id4148035
Ref: 4648035
Node: 1 2 13 2011-09-1648290
Ref: project id4248404
Ref: 4748404
Node: 1 2 12 2011-08-1548621
Ref: project id4348735
Ref: 4848735
Node: 1 2 11 2011-08-0448990
Ref: project id4449104
Ref: 4949104
Node: 1 2 10 2011-05-0949364
Ref: project id4549477
Ref: 4a49477
Node: 1 2 9 2011-03-3149737
Ref: project id4649849
Ref: 4b49849
Node: 1 2 8 2011-12-0350063
Ref: project id4750174
Ref: 4c50174
Node: 1 2 7 2010-11-0550300
Ref: project id4850411
Ref: 4d50411
Node: 1 2 6 2010-10-2150500
Ref: project id4950611
Ref: 4e50611
Node: 1 2 5 2010-09-1950926
Ref: project id5051037
Ref: 4f51037
Node: 1 2 4 2010-09-0951199
Ref: project id5151310
Ref: 5051310
Node: 1 2 3 2010-08-1751623
Ref: project id5251734
Ref: 5151734
Node: 1 2 2 2010-07-2351883
Ref: project id5351994
Ref: 5251994
Node: 1 2 1 2010-06-2352090
Ref: project id5452199
Ref: 5352199
Node: 1 2 2010-05-2752362
Ref: project id5552472
Ref: 5452472
Node: 1 2rc2 2010-05-2652546
Ref: project rc2-2010-05-2652657
Ref: 5552657
Node: 1 2rc1 2010-05-2552788
Ref: project rc1-2010-05-2552901
Ref: 5652901
Node: 1 2b7 2010-04-2252985
Ref: project b7-2010-04-2253097
Ref: 5753097
Node: 1 2b6 2010-04-1353220
Ref: project b6-2010-04-1353331
Ref: 5853331
Node: 1 2b5 2010-04-0953427
Ref: project b5-2010-04-0953538
Ref: 5953538
Node: 1 2b4 2010-03-1953900
Ref: project b4-2010-03-1954011
Ref: 5a54011
Node: 1 2b3 2010-02-2854118
Ref: project b3-2010-02-2854229
Ref: 5b54229
Node: 1 2b2 2010-02-1954359
Ref: project b2-2010-02-1954470
Ref: 5c54470
Node: 1 2b1 2010-02-1854584
Ref: project b1-2010-02-1854695
Ref: 5d54695
Node: 1 2a6 2010-02-0954935
Ref: project a6-2010-02-0955046
Ref: 5e55046
Node: 1 2a1 2010-01-2055189
Ref: project a1-2010-01-2055301
Ref: 5f55301
Node: 1 0 12 2009-04-0955575
Ref: project id5655688
Ref: 6055688
Node: 1 0 11 2008-11-2055816
Ref: project id5755930
Ref: 6155930
Node: 1 0 10 2008-11-1756086
Ref: project id5856199
Ref: 6256199
Node: 1 0 9 2008-11-1656346
Ref: project id5956458
Ref: 6356458
Node: 1 0 8 2008-11-0156553
Ref: project id6056664
Ref: 6456664
Node: 1 0 7 2008-08-2256817
Ref: project id6156928
Ref: 6556928
Node: 1 0 6 2008-07-1057106
Ref: project id6257217
Ref: 6657217
Node: 1 0 5 2008-05-2057429
Ref: project id6357540
Ref: 6757540
Node: 1 0 4 2008-05-0157754
Ref: project id6457865
Ref: 6857865
Node: 1 0 3 2008-04-0958253
Ref: project id6558364
Ref: 6958364
Node: 1 0 2 2008-02-2658549
Ref: project id6658660
Ref: 6a58660
Node: 1 0 1 2008-02-0858775
Ref: project id6758884
Ref: 6b58884
Node: 1 0 2008-01-1859178
Ref: project id6859289
Ref: 6c59289
Node: 1 0 RC2 2008-01-1659363
Ref: project rc2-2008-01-1659476
Ref: 6d59476
Node: 1 0 RC1 2008-01-1459578
Ref: project rc1-2008-01-1459668
Ref: 6e59668
Node: Frequently asked questions and answers59759
Ref: project frequently-asked-questions-and-answers59861
Ref: 6f59861
Node: Are there references for the algorithms used by shapely?60189
Ref: project are-there-references-for-the-algorithms-used-by-shapely60408
Ref: 7060408
Ref: Are there references for the algorithms used by shapely?-Footnote-160785
Ref: Are there references for the algorithms used by shapely?-Footnote-260822
Ref: Are there references for the algorithms used by shapely?-Footnote-360866
Node: I used buffer on a geometry with Z coordinates Where did the Z coordinates go?60925
Ref: project i-used-buffer-on-a-geometry-with-z-coordinates-where-did-the-z-coordinates-go61144
Ref: 7161144
Ref: I used buffer on a geometry with Z coordinates Where did the Z coordinates go?-Footnote-161507
Node: The Shapely User Manual61544
Ref: manual doc61646
Ref: 7261646
Ref: manual jts-faq61646
Ref: 7361646
Ref: manual manual61646
Ref: 7461646
Ref: manual the-shapely-user-manual61646
Ref: 7561646
Ref: The Shapely User Manual-Footnote-162303
Node: Introduction62359
Ref: manual intro62458
Ref: 7662458
Ref: manual introduction62458
Ref: 7762458
Ref: Introduction-Footnote-165161
Ref: Introduction-Footnote-265198
Ref: Introduction-Footnote-365261
Ref: Introduction-Footnote-465300
Ref: Introduction-Footnote-565340
Node: Spatial Data Model65511
Ref: manual intro-spatial-data-model65601
Ref: 7865601
Ref: manual spatial-data-model65601
Ref: 7965601
Ref: Spatial Data Model-Footnote-168329
Node: Relationships68517
Ref: manual intro-relationships68626
Ref: 7a68626
Ref: manual relationships68626
Ref: 7b68626
Ref: Relationships-Footnote-169169
Ref: Relationships-Footnote-269512
Node: Operations69742
Ref: manual intro-operations69851
Ref: 7c69851
Ref: manual operations69851
Ref: 7d69851
Ref: Operations-Footnote-170216
Node: Coordinate Systems70377
Ref: manual coordinate-systems70464
Ref: 7e70464
Ref: manual intro-coordinate-systems70464
Ref: 7f70464
Node: Geometric Objects71043
Ref: manual geometric-objects71179
Ref: 8071179
Ref: manual objects71179
Ref: 8171179
Node: General Attributes and Methods73338
Ref: manual general-attributes-and-methods73438
Ref: 8273438
Ref: manual object area73517
Ref: 8373517
Ref: manual object bounds73597
Ref: 8473597
Ref: manual object length73730
Ref: 8573730
Ref: manual object minimum_clearance73814
Ref: 8673814
Ref: manual object geom_type74394
Ref: 8774394
Ref: manual object distance74573
Ref: 8874573
Ref: manual object hausdorff_distance74767
Ref: 8974767
Ref: manual object representative_point75319
Ref: 8a75319
Ref: General Attributes and Methods-Footnote-175815
Node: Points75986
Ref: manual id876106
Ref: 8b76106
Ref: manual points76106
Ref: 8c76106
Ref: manual Point76137
Ref: 8d76137
Node: LineStrings77074
Ref: manual id977175
Ref: 8e77175
Ref: manual linestrings77175
Ref: 8f77175
Ref: manual LineString77216
Ref: 9077216
Node: LinearRings79079
Ref: manual id1079182
Ref: 9179182
Ref: manual linearrings79182
Ref: 9279182
Ref: manual LinearRing79223
Ref: 9379223
Node: Polygons81006
Ref: manual id1181109
Ref: 9481109
Ref: manual polygons81109
Ref: 9581109
Ref: manual Polygon81144
Ref: 9681144
Ref: manual shapely geometry box83299
Ref: 9783299
Ref: manual shapely geometry polygon orient83956
Ref: 9883956
Node: Collections84365
Ref: manual collections84478
Ref: 9984478
Ref: manual id1284478
Ref: 9a84478
Ref: Collections-Footnote-186475
Node: Collections of Points86539
Ref: manual collections-of-points86664
Ref: 9b86664
Ref: manual multipoints86664
Ref: 9c86664
Ref: manual MultiPoint86725
Ref: 9d86725
Node: Collections of Lines87902
Ref: manual collections-of-lines88039
Ref: 9e88039
Ref: manual multilinestrings88039
Ref: 9f88039
Ref: manual MultiLineString88098
Ref: a088098
Node: Collections of Polygons89796
Ref: manual collections-of-polygons89926
Ref: a189926
Ref: manual multipolygons89926
Ref: a289926
Ref: manual MultiPolygon89991
Ref: a389991
Node: Empty features90925
Ref: manual empties91055
Ref: a491055
Ref: manual empty-features91055
Ref: a591055
Node: Coordinate sequences91779
Ref: manual coordinate-sequences91912
Ref: a691912
Node: Linear Referencing Methods93233
Ref: manual linear-referencing-methods93343
Ref: a793343
Ref: manual object interpolate93772
Ref: a893772
Ref: manual object project94390
Ref: a994390
Node: Predicates and Relationships96076
Ref: manual predicates96224
Ref: aa96224
Ref: manual predicates-and-relationships96224
Ref: ab96224
Ref: Predicates and Relationships-Footnote-196643
Node: Unary Predicates96814
Ref: manual id1496922
Ref: ac96922
Ref: manual unary-predicates96922
Ref: ad96922
Ref: manual object has_z97086
Ref: ae97086
Ref: manual object is_ccw97342
Ref: af97342
Ref: manual object is_empty97877
Ref: b097877
Ref: manual object is_ring98498
Ref: b198498
Ref: manual object is_simple98922
Ref: b298922
Ref: manual object is_valid99272
Ref: b399272
Ref: Unary Predicates-Footnote-1100946
Node: Binary Predicates101117
Ref: manual binary-predicates101254
Ref: b4101254
Ref: manual id16101254
Ref: b5101254
Ref: manual object __eq__101615
Ref: b6101615
Ref: manual object equals101787
Ref: b7101787
Ref: manual object almost_equals102476
Ref: b8102476
Ref: manual object contains102675
Ref: b9102675
Ref: manual object crosses103728
Ref: bb103728
Ref: manual object disjoint104189
Ref: bc104189
Ref: manual object intersects104497
Ref: bd104497
Ref: manual object overlaps104766
Ref: be104766
Ref: manual object touches105044
Ref: bf105044
Ref: manual object within105502
Ref: ba105502
Ref: Binary Predicates-Footnote-1107395
Node: DE-9IM Relationships107447
Ref: manual de-9im-relationships107559
Ref: c0107559
Ref: manual object relate107769
Ref: c1107769
Ref: manual object relate_pattern108703
Ref: c2108703
Ref: DE-9IM Relationships-Footnote-1109925
Ref: DE-9IM Relationships-Footnote-2110155
Node: Spatial Analysis Methods110385
Ref: manual analysis-methods110538
Ref: c3110538
Ref: manual spatial-analysis-methods110538
Ref: c4110538
Node: Set-theoretic Methods110775
Ref: manual id19110887
Ref: c5110887
Ref: manual set-theoretic-methods110887
Ref: c6110887
Ref: manual object boundary111429
Ref: c7111429
Ref: manual object centroid112432
Ref: c8112432
Ref: manual object difference112849
Ref: c9112849
Ref: manual object intersection113713
Ref: cb113713
Ref: manual object symmetric_difference114085
Ref: cc114085
Ref: manual object union114483
Ref: cd114483
Node: Constructive Methods116359
Ref: manual constructive-methods116471
Ref: cf116471
Ref: manual object buffer116641
Ref: ca116641
Ref: manual shapely geometry CAP_STYLE117306
Ref: d0117306
Ref: manual shapely geometry JOIN_STYLE117603
Ref: d1117603
Ref: manual object convex_hull119791
Ref: d2119791
Ref: manual object envelope120488
Ref: d3120488
Ref: manual object minimum_rotated_rectangle120863
Ref: d4120863
Ref: manual object parallel_offset121554
Ref: d5121554
Ref: manual object simplify123550
Ref: d6123550
Ref: Constructive Methods-Footnote-1124639
Node: Affine Transformations124933
Ref: manual affine-transformations125079
Ref: d7125079
Ref: manual shapely affinity affine_transform125606
Ref: d8125606
Ref: manual shapely affinity rotate126984
Ref: d9126984
Ref: manual shapely affinity scale128381
Ref: da128381
Ref: manual shapely affinity skew129947
Ref: db129947
Ref: manual shapely affinity translate131017
Ref: dc131017
Node: Other Transformations131403
Ref: manual other-transformations131541
Ref: dd131541
Ref: manual shapely ops transform131690
Ref: de131690
Node: Other Operations133942
Ref: manual other-operations134075
Ref: df134075
Node: Merging Linear Features134368
Ref: manual merging-linear-features134470
Ref: e0134470
Ref: manual shapely ops polygonize134673
Ref: e1134673
Ref: manual shapely ops polygonize_full135360
Ref: e2135360
Ref: manual shapely ops linemerge136778
Ref: e3136778
Node: Efficient Unions137430
Ref: manual efficient-unions137563
Ref: e4137563
Ref: manual shapely ops unary_union137734
Ref: ce137734
Ref: manual shapely ops cascaded_union138737
Ref: e5138737
Node: Delaunay triangulation139030
Ref: manual delaunay-triangulation139155
Ref: e6139155
Ref: manual shapely ops triangulate139343
Ref: e7139343
Node: Voronoi Diagram140470
Ref: manual voronoi-diagram140593
Ref: e8140593
Ref: manual shapely ops voronoi_diagram140794
Ref: e9140794
Node: Nearest points142580
Ref: manual nearest-points142689
Ref: ea142689
Ref: manual shapely ops nearest_points142854
Ref: eb142854
Node: Snapping143445
Ref: manual snapping143551
Ref: ec143551
Ref: manual shapely ops snap143735
Ref: ed143735
Node: Shared paths144385
Ref: manual shared-paths144486
Ref: ee144486
Ref: manual shapely ops shared_paths144644
Ref: ef144644
Node: Splitting145494
Ref: manual splitting145596
Ref: f0145596
Ref: manual shapely ops split145726
Ref: f1145726
Node: Substring146957
Ref: manual substring147075
Ref: f2147075
Ref: manual shapely ops substring147247
Ref: f3147247
Node: Prepared Geometry Operations148938
Ref: manual prepared-geometry-operations149058
Ref: f4149058
Ref: manual prepared prep149237
Ref: f5149237
Node: Diagnostics150059
Ref: manual diagnostics150179
Ref: f6150179
Ref: manual validation make_valid150705
Ref: f7150705
Node: Polylabel152315
Ref: manual polylabel152398
Ref: f8152398
Ref: manual shapely ops polylabel152437
Ref: f9152437
Ref: Polylabel-Footnote-1153123
Node: STR-packed R-tree153167
Ref: manual str-packed-r-tree153293
Ref: fa153293
Ref: manual strtree STRtree153694
Ref: fb153694
Ref: manual strtree STRtree strtree query153928
Ref: fc153928
Ref: manual strtree STRtree strtree nearest155493
Ref: fd155493
Node: Interoperation155757
Ref: manual interoperation155878
Ref: fe155878
Node: Well-Known Formats156075
Ref: manual well-known-formats156177
Ref: ff156177
Ref: manual shapely wkb dumps157313
Ref: 100157313
Ref: manual shapely wkb loads157399
Ref: 101157399
Ref: manual shapely wkt dumps157982
Ref: 102157982
Ref: manual shapely wkt loads158192
Ref: 103158192
Ref: Well-Known Formats-Footnote-1158586
Node: Numpy and Python Arrays158757
Ref: manual numpy-and-python-arrays158888
Ref: 104158888
Node: Python Geo Interface160851
Ref: manual python-geo-interface160955
Ref: 106160955
Ref: manual shapely geometry asShape161227
Ref: 105161227
Ref: manual shapely geometry shape161379
Ref: 107161379
Ref: manual shapely geometry mapping162208
Ref: 108162208
Ref: Python Geo Interface-Footnote-1162696
Node: Performance162736
Ref: manual performance162850
Ref: 109162850
Ref: Performance-Footnote-1163966
Node: Conclusion164003
Ref: manual conclusion164113
Ref: 10a164113
Node: References164353
Ref: manual references164443
Ref: 10b164443
Node: Indices and tables164480
Ref: index id29164584
Ref: 10c164584
Ref: index indices-and-tables164584
Ref: 10d164584
Node: Index164655

End Tag Table


Local Variables:
coding: utf-8
End:
