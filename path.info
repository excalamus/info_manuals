This is path.info, produced by makeinfo version 6.5 from path.texi.

     path 0.0.0, Sep 01, 2021

     Jason Orendorff

     Copyright © Jason Orendorff

INFO-DIR-SECTION Miscellaneous
START-INFO-DIR-ENTRY
* path: (path.info). One line description of project
END-INFO-DIR-ENTRY


   Generated by Sphinx 2.4.4.


File: path.info,  Node: Top,  Next: API,  Up: (dir)

path
****

     path 0.0.0, Sep 01, 2021

     Jason Orendorff

     Copyright © Jason Orendorff

* Menu:

* API::
* History::
* Indices and tables::
* Python Module Index::
* Index::


File: path.info,  Node: API,  Next: History,  Prev: Top,  Up: Top

1 API
*****

     Important: The documented methods’ signatures are not always
     correct.  See *note path.Path: 5.

Path Pie

Implements ‘path.Path’ - An object representing a path to a file or
directory.

Example:

     from path import Path
     d = Path('/home/guido/bin')

     # Globbing
     for f in d.files('*.py'):
         f.chmod(0o755)

     # Changing the working directory:
     with Path("somewhere"):
         # cwd in now `somewhere`
         ...

     # Concatenate paths with /
     foo_txt = Path("bar") / "foo.txt"

 -- Class: path.Path (other='')

     Represents a filesystem path.

     For documentation on individual methods, consult their counterparts
     in os.path(1).

     Some methods are additionally included from shutil(2).  The
     functions are linked directly into the class namespace such that
     they will be bound to the Path instance.  For example,
     ‘Path(src).copy(target)’ is equivalent to ‘shutil.copy(src,
     target)’.  Therefore, when referencing the docs for these methods,
     assume ‘src’ references ‘self’, the Path instance.

      -- Method: abspath ()

          See also
          ........

          os.path.abspath()(3)

      -- Method: access (*args, **kwargs)

          Return does the real user have access to this path.

               >>> Path('.').access(os.F_OK)
               True

          See also
          ........

          os.access()(4)

      -- Method: property atime

          Last access time of the file.

               >>> Path('.').atime > 0
               True

          See also
          ........

          *note getatime(): 9, os.path.getatime()(5)

      -- Method: basename ()

          See also
          ........

          *note name: b, os.path.basename()(6)

      -- Method: bytes ()

          Open this file, read all bytes, return them as a string.

      -- Method: cd ()

          See also
          ........

          os.chdir()(7)

      -- Method: chdir ()

          See also
          ........

          os.chdir()(8)

      -- Method: chmod (mode)

          Set the mode.  May be the new mode (os.chmod behavior) or a
          symbolic mode(9).

          See also
          ........

          os.chmod()(10)

      -- Method: chown (uid=-1, gid=-1)

          Change the owner and group by names or numbers.

          See also
          ........

          os.chown()(11)

      -- Method: chroot ()

          See also
          ........

          os.chroot()(12)

      -- Method: chunks (size, *args, **kwargs)

          Returns a generator yielding chunks of the file, so it can

               be read piece by piece with a simple for loop.

          Any argument you pass after ‘size’ will be passed to *note
          open(): 13.


          Example:
               >>> hash = hashlib.md5()
               >>> for chunk in Path("CHANGES.rst").chunks(8192, mode='rb'):
               ...     hash.update(chunk)

          This will read the file by chunks of 8192 bytes.

      -- Method: copy (dst, *, follow_symlinks=True)

          Copy data and mode bits (“cp src dst”).  Return the file’s
          destination.

          The destination may be a directory.

          If follow_symlinks is false, symlinks won’t be followed.  This
          resembles GNU’s “cp -P src dst”.

          If source and destination are the same file, a SameFileError
          will be raised.

      -- Method: copy2 (dst, *, follow_symlinks=True)

          Copy data and metadata.  Return the file’s destination.

          Metadata is copied with copystat().  Please see the copystat
          function for more information.

          The destination may be a directory.

          If follow_symlinks is false, symlinks won’t be followed.  This
          resembles GNU’s “cp -P src dst”.

      -- Method: copyfile (dst, *, follow_symlinks=True)

          Copy data from src to dst.

          If follow_symlinks is not set and src is a symbolic link, a
          new symlink will be created instead of copying the file it
          points to.

      -- Method: copymode (dst, *, follow_symlinks=True)

          Copy mode bits from src to dst.

          If follow_symlinks is not set, symlinks aren’t followed if and
          only if both ‘src’ and ‘dst’ are symlinks.  If ‘lchmod’ isn’t
          available (e.g.  Linux) this method does nothing.

      -- Method: copystat (dst, *, follow_symlinks=True)

          Copy file metadata

          Copy the permission bits, last access time, last modification
          time, and flags from ‘src’ to ‘dst’.  On Linux, copystat()
          also copies the “extended attributes” where possible.  The
          file contents, owner, and group are unaffected.  ‘src’ and
          ‘dst’ are path names given as strings.

          If the optional flag ‘follow_symlinks’ is not set, symlinks
          aren’t followed if and only if both ‘src’ and ‘dst’ are
          symlinks.

      -- Method: copytree (dst, symlinks=False, ignore=None,
               copy_function=<function copy2>,
               ignore_dangling_symlinks=False)

          Recursively copy a directory tree.

          The destination directory must not already exist.  If
          exception(s) occur, an Error is raised with a list of reasons.

          If the optional symlinks flag is true, symbolic links in the
          source tree result in symbolic links in the destination tree;
          if it is false, the contents of the files pointed to by
          symbolic links are copied.  If the file pointed by the symlink
          doesn’t exist, an exception will be added in the list of
          errors raised in an Error exception at the end of the copy
          process.

          You can set the optional ignore_dangling_symlinks flag to true
          if you want to silence this exception.  Notice that this has
          no effect on platforms that don’t support os.symlink.

          The optional ignore argument is a callable.  If given, it is
          called with the ‘src’ parameter, which is the directory being
          visited by copytree(), and ‘names’ which is the list of ‘src’
          contents, as returned by os.listdir():

               callable(src, names) -> ignored_names

          Since copytree() is called recursively, the callable will be
          called once for each directory that is copied.  It returns a
          list of names relative to the ‘src’ directory that should not
          be copied.

          The optional copy_function argument is a callable that will be
          used to copy each file.  It will be called with the source
          path and the destination path as arguments.  By default,
          copy2() is used, but any function that supports the same
          signature (like copy()) can be used.

      -- Method: property ctime

          Creation time of the file.

          See also
          ........

          *note getctime(): 1b, os.path.getctime()(13)

      -- Method: dirname ()

          See also
          ........

          *note parent: 1d, os.path.dirname()(14)

      -- Method: dirs (*args, **kwargs)

          List of this directory’s subdirectories.

          The elements of the list are Path objects.  This does not walk
          recursively into subdirectories (but see *note walkdirs():
          1f.).

          Accepts parameters to *note listdir(): 20.

      -- Method: property drive

          The drive specifier, for example ‘'C:'’.

          This is always empty on systems that don’t use drive
          specifiers.

      -- Method: exists ()

          See also
          ........

          os.path.exists()(15)

      -- Method: expand ()

          Clean up a filename by calling *note expandvars(): 24, *note
          expanduser(): 25, and *note normpath(): 26. on it.

          This is commonly everything needed to clean up a filename read
          from a configuration file, for example.

      -- Method: expanduser ()

          See also
          ........

          os.path.expanduser()(16)

      -- Method: expandvars ()

          See also
          ........

          os.path.expandvars()(17)

      -- Method: property ext

          The file extension, for example ‘'.py'’.

      -- Method: files (*args, **kwargs)

          List of the files in self.

          The elements of the list are Path objects.  This does not walk
          into subdirectories (see *note walkfiles(): 29.).

          Accepts parameters to *note listdir(): 20.

      -- Method: fnmatch (pattern, normcase=None)

          Return ‘True’ if ‘self.name’ matches the given ‘pattern’.

          ‘pattern’ - A filename pattern with wildcards,

               for example ‘'*.py'’.  If the pattern contains a
               ‘normcase’ attribute, it is applied to the name and path
               prior to comparison.

          ‘normcase’ - (optional) A function used to normalize the pattern and

               filename before matching.  Defaults to normcase from
               ‘self.module’, os.path.normcase()(18).

          See also
          ........

          fnmatch.fnmatch()(19)

      -- Method: get_owner ()

          Return the name of the owner of this file or directory.
          Follow symbolic links.

          See also
          ........

          *note owner: 2c.

      -- Method: getatime ()

          See also
          ........

          *note atime: 8, os.path.getatime()(20)

      -- Method: getctime ()

          See also
          ........

          *note ctime: 1a, os.path.getctime()(21)

      -- Method: classmethod getcwd ()

          Return the current working directory as a path object.

          See also
          ........

          os.getcwd()(22)

      -- Method: getmtime ()

          See also
          ........

          *note mtime: 2f, os.path.getmtime()(23)

      -- Method: getsize ()

          See also
          ........

          *note size: 31, os.path.getsize()(24)

      -- Method: glob (pattern)

          Return a list of Path objects that match the pattern.

          ‘pattern’ - a path relative to this directory, with wildcards.

          For example, ‘Path('/users').glob('*/bin/*')’ returns a list
          of all the files users have in their ‘bin’ directories.

          See also
          ........

          glob.glob()(25)

               Note: Glob is `not' recursive, even when using ‘**’.  To
               do recursive globbing see *note walk(): 33, *note
               walkdirs(): 1f. or *note walkfiles(): 29.

      -- Method: iglob (pattern)

          Return an iterator of Path objects that match the pattern.

          ‘pattern’ - a path relative to this directory, with wildcards.

          For example, ‘Path('/users').iglob('*/bin/*')’ returns an
          iterator of all the files users have in their ‘bin’
          directories.

          See also
          ........

          glob.iglob()(26)

               Note: Glob is `not' recursive, even when using ‘**’.  To
               do recursive globbing see *note walk(): 33, *note
               walkdirs(): 1f. or *note walkfiles(): 29.

      -- Method: in_place (mode='r', buffering=-1, encoding=None,
               errors=None, newline=None, backup_extension=None)

          A context in which a file may be re-written in-place with new
          content.

          Yields a tuple of ‘(`readable', `writable')’ file objects,
          where ‘writable’ replaces ‘readable’.

          If an exception occurs, the old file is restored, removing the
          written data.

          Mode `must not' use ‘'w'’, ‘'a'’, or ‘'+'’; only
          read-only-modes are allowed.  A ValueError(27) is raised on
          invalid modes.

          For example, to add line numbers to a file:

               p = Path(filename)
               assert p.isfile()
               with p.in_place() as (reader, writer):
                   for number, line in enumerate(reader, 1):
                       writer.write('{0:3}: '.format(number)))
                       writer.write(line)

          Thereafter, the file at ‘filename’ will have line numbers in
          it.

      -- Method: isabs ()

               >>> Path('.').isabs()
               False

          See also
          ........

          os.path.isabs()(28)

      -- Method: isdir ()

          See also
          ........

          os.path.isdir()(29)

      -- Method: isfile ()

          See also
          ........

          os.path.isfile()(30)

      -- Method: islink ()

          See also
          ........

          os.path.islink()(31)

      -- Method: ismount ()

               >>> Path('.').ismount()
               False

          See also
          ........

          os.path.ismount()(32)

      -- Attribute: joinpath = functools.partial(<function
               Path.joinpath>, <class 'path.Path'>)

      -- Method: lines (encoding=None, errors=None, retain=True)

          Open this file, read all lines, return them in a list.

          Optional arguments:

               ‘encoding’ - The Unicode encoding (or character set) of

                    the file.  The default is ‘None’, meaning use
                    ‘locale.getpreferredencoding()’.

               ‘errors’ - How to handle Unicode errors; see

                    open(33) for the options.  Default is ‘None’ meaning
                    “strict”.

               ‘retain’ - If ‘True’ (default), retain newline characters,

                    but translate all newline characters to ‘\n’.  If
                    ‘False’, newline characters are omitted.

          See also
          ........

          *note text(): 3d.

      -- Method: link (newpath)

          Create a hard link at ‘newpath’, pointing to this file.

          See also
          ........

          os.link()(34)

      -- Method: listdir (match=None)

          List of items in this directory.

          Use *note files(): 28. or *note dirs(): 1e. instead if you
          want a listing of just files or just subdirectories.

          The elements of the list are Path objects.

          With the optional ‘match’ argument, a callable, only return
          items whose names match the given pattern.

          See also
          ........

          *note files(): 28, *note dirs(): 1e.

      -- Method: lstat ()

          Like *note stat(): 40, but do not follow symbolic links.

               >>> Path('.').lstat() == Path('.').stat()
               True

          See also
          ........

          *note stat(): 40, os.lstat()(35)

      -- Method: makedirs (mode=511)

          See also
          ........

          os.makedirs()(36)

      -- Method: makedirs_p (mode=511)

          Like *note makedirs(): 41, but does not raise an exception if
          the directory already exists.

      -- Method: merge_tree (dst, symlinks=False, *,
               copy_function=<function copy2>, ignore=<function
               Path.<lambda>>)

          Copy entire contents of self to dst, overwriting existing
          contents in dst with those in self.

          Pass ‘symlinks=True’ to copy symbolic links as links.

          Accepts a ‘copy_function’, similar to copytree.

          To avoid overwriting newer files, supply a copy function
          wrapped in ‘only_newer’.  For example:

               src.merge_tree(dst, copy_function=only_newer(shutil.copy2))

      -- Method: mkdir (mode=511)

          See also
          ........

          os.mkdir()(37)

      -- Method: mkdir_p (mode=511)

          Like *note mkdir(): 44, but does not raise an exception if the
          directory already exists.

      -- Attribute: module = <module 'posixpath' from
               '/usr/lib/python3.7/posixpath.py'>

          The path module to use for path operations.

          See also
          ........

          os.path(38)

      -- Method: move (dst, copy_function=<function copy2>)

          Recursively move a file or directory to another location.
          This is similar to the Unix “mv” command.  Return the file or
          directory’s destination.

          If the destination is a directory or a symlink to a directory,
          the source is moved inside the directory.  The destination
          path must not already exist.

          If the destination already exists but is not a directory, it
          may be overwritten depending on os.rename() semantics.

          If the destination is on our current filesystem, then rename()
          is used.  Otherwise, src is copied to the destination and then
          removed.  Symlinks are recreated under the new name if
          os.rename() fails because of cross filesystem renames.

          The optional ‘copy_function’ argument is a callable that will
          be used to copy the source or it will be delegated to
          ‘copytree’.  By default, copy2() is used, but any function
          that supports the same signature (like copy()) can be used.

          A lot more could be done here… A look at a mv.c shows a lot of
          the issues this implementation glosses over.

      -- Method: property mtime

          Last modified time of the file.

          See also
          ........

          *note getmtime(): 2e, os.path.getmtime()(39)

      -- Method: property name

          The name of this file or directory without the full path.

          For example, ‘Path('/usr/local/lib/libpython.so').name ==
          'libpython.so'’

          See also
          ........

          *note basename(): a, os.path.basename()(40)

      -- Method: normcase ()

          See also
          ........

          os.path.normcase()(41)

      -- Method: normpath ()

          See also
          ........

          os.path.normpath()(42)

      -- Method: open (*args, **kwargs)

          Open this file and return a corresponding file object.

          Keyword arguments work as in io.open()(43).  If the file
          cannot be opened, an OSError(44) is raised.

      -- Method: property owner

          Name of the owner of this file or directory.

          See also
          ........

          *note get_owner(): 2b.

      -- Method: property parent

          This path’s parent directory, as a new Path object.

          For example, ‘Path('/usr/local/lib/libpython.so').parent ==
          Path('/usr/local/lib')’

          See also
          ........

          *note dirname(): 1c, os.path.dirname()(45)

      -- Method: parts ()

               >>> Path('/foo/bar/baz').parts()
               (Path('/'), 'foo', 'bar', 'baz')

      -- Method: pathconf (name)

          See also
          ........

          os.pathconf()(46)

      -- Method: read_bytes ()

          Return the contents of this file as bytes.

      -- Method: read_hash (hash_name)

          Calculate given hash for this file.

          List of supported hashes can be obtained from hashlib(47)
          package.  This reads the entire file.

          See also
          ........

          hashlib.hash.digest()(48)

      -- Method: read_hexhash (hash_name)

          Calculate given hash for this file, returning hexdigest.

          List of supported hashes can be obtained from hashlib(49)
          package.  This reads the entire file.

          See also
          ........

          hashlib.hash.hexdigest()(50)

      -- Method: read_md5 ()

          Calculate the md5 hash for this file.

          This reads through the entire file.

          See also
          ........

          *note read_hash(): 4c.

      -- Method: read_text (encoding=None, errors=None)

          Open this file, read it in, return the content as a string.

          Optional parameters are passed to *note open(): 13.

          See also
          ........

          *note lines(): 3c.

      -- Method: readlink ()

          Return the path to which this symbolic link points.

          The result may be an absolute or a relative path.

          See also
          ........

          *note readlinkabs(): 51, os.readlink()(51)

      -- Method: readlinkabs ()

          Return the path to which this symbolic link points.

          The result is always an absolute path.

          See also
          ........

          *note readlink(): 50, os.readlink()(52)

      -- Method: realpath ()

          See also
          ........

          os.path.realpath()(53)

      -- Method: relpath (start='.')

          Return this path as a relative path, based from ‘start’, which
          defaults to the current working directory.

      -- Method: relpathto (dest)

          Return a relative path from ‘self’ to ‘dest’.

          If there is no relative path from ‘self’ to ‘dest’, for
          example if they reside on different drives in Windows, then
          this returns ‘dest.abspath()’.

      -- Method: remove ()

          See also
          ........

          os.remove()(54)

      -- Method: remove_p ()

          Like *note remove(): 55, but does not raise an exception if
          the file does not exist.

      -- Method: removedirs ()

          See also
          ........

          os.removedirs()(55)

      -- Method: removedirs_p ()

          Like *note removedirs(): 57, but does not raise an exception
          if the directory is not empty or does not exist.

      -- Method: rename (new)

          See also
          ........

          os.rename()(56)

      -- Method: renames (new)

          See also
          ........

          os.renames()(57)

      -- Method: rmdir ()

          See also
          ........

          os.rmdir()(58)

      -- Method: rmdir_p ()

          Like *note rmdir(): 5b, but does not raise an exception if the
          directory is not empty or does not exist.

      -- Method: rmtree (ignore_errors=False, onerror=None)

          Recursively delete a directory tree.

          If ignore_errors is set, errors are ignored; otherwise, if
          onerror is set, it is called to handle the error with
          arguments (func, path, exc_info) where func is platform and
          implementation dependent; path is the argument to that
          function that caused it to fail; and exc_info is a tuple
          returned by sys.exc_info().  If ignore_errors is false and
          onerror is None, an exception is raised.

      -- Method: rmtree_p ()

          Like *note rmtree(): 5d, but does not raise an exception if
          the directory does not exist.

      -- Method: samefile (other)

          See also
          ........

          os.path.samefile()(59)

      -- Method: property size

          Size of the file, in bytes.

          See also
          ........

          *note getsize(): 30, os.path.getsize()(60)

      -- Attribute: special = functools.partial(<class
               'path.SpecialResolver'>, <class 'path.Path'>)

      -- Method: splitall ()

          Return a list of the path components in this path.

          The first item in the list will be a Path.  Its value will be
          either os.curdir(61), os.pardir(62), empty, or the root
          directory of this path (for example, ‘'/'’ or ‘'C:\\'’).  The
          other items in the list will be strings.

          ‘Path.joinpath(*result)’ will yield the original path.

               >>> Path('/foo/bar/baz').splitall()
               [Path('/'), 'foo', 'bar', 'baz']

      -- Method: splitdrive ()

          Return two-tuple of ‘.drive’ and rest without drive.

          Split the drive specifier from this path.  If there is no
          drive specifier, ‘`p.drive'’ is empty, so the return value is
          simply ‘(Path(''), p)’.  This is always the case on Unix.

          See also
          ........

          os.path.splitdrive()(63)

      -- Method: splitext ()

          Return two-tuple of ‘.stripext()’ and ‘.ext’.

          Split the filename extension from this path and return the two
          parts.  Either part may be empty.

          The extension is everything from ‘'.'’ to the end of the last
          path segment.  This has the property that if ‘(a, b) ==
          p.splitext()’, then ‘a + b == p’.

          See also
          ........

          os.path.splitext()(64)

      -- Method: splitpath ()

          Return two-tuple of ‘.parent’, ‘.name’.

          See also
          ........

          *note parent: 1d, *note name: b, os.path.split()(65)

      -- Method: stat ()

          Perform a ‘stat()’ system call on this path.

               >>> Path('.').stat()
               os.stat_result(...)

          See also
          ........

          *note lstat(): 3f, os.stat()(66)

      -- Method: statvfs ()

          Perform a ‘statvfs()’ system call on this path.

          See also
          ........

          os.statvfs()(67)

      -- Method: property stem

          The same as *note name(): b, but with one file extension
          stripped off.

               >>> Path('/home/guido/python.tar.gz').stem
               'python.tar'

      -- Method: stripext ()

          Remove one file extension from the path.

          For example, ‘Path('/home/guido/python.tar.gz').stripext()’
          returns ‘Path('/home/guido/python.tar')’.

      -- Method: symlink (newlink=None)

          Create a symbolic link at ‘newlink’, pointing here.

          If newlink is not supplied, the symbolic link will assume the
          name self.basename(), creating the link in the cwd.

          See also
          ........

          os.symlink()(68)

      -- Method: text (encoding=None, errors='strict')

          Legacy function to read text.

          Converts all newline sequences to ‘\n’.

      -- Method: touch ()

          Set the access/modified times of this file to the current
          time.  Create the file if it does not exist.

      -- Method: unlink ()

          See also
          ........

          os.remove()(69)

      -- Method: unlink_p ()

          Like *note remove(): 55, but does not raise an exception if
          the file does not exist.

      -- Method: classmethod using_module (module)

      -- Method: utime (*args, **kwargs)

          Set the access and modified times of this file.

          See also
          ........

          os.utime()(70)

      -- Method: walk (match=None, errors='strict')

          Iterator over files and subdirs, recursively.

          The iterator yields Path objects naming each child item of
          this directory and its descendants.  This requires that
          ‘D.isdir()’.

          This performs a depth-first traversal of the directory tree.
          Each directory is returned just before all its children.

          The ‘errors=’ keyword argument controls behavior when an error
          occurs.  The default is ‘'strict'’, which causes an exception.
          Other allowed values are ‘'warn'’ (which reports the error via
          warnings.warn()(71)), and ‘'ignore'’.  ‘errors’ may also be an
          arbitrary callable taking a msg parameter.

      -- Method: walkdirs (*args, **kwargs)

          Iterator over subdirs, recursively.

      -- Method: walkfiles (*args, **kwargs)

          Iterator over files, recursively.

      -- Method: with_suffix (suffix)

          Return a new path with the file suffix changed (or added, if
          none)

               >>> Path('/home/guido/python.tar.gz').with_suffix(".foo")
               Path('/home/guido/python.tar.foo')

               >>> Path('python').with_suffix('.zip')
               Path('python.zip')

               >>> Path('filename.ext').with_suffix('zip')
               Traceback (most recent call last):
               ...
               ValueError: Invalid suffix 'zip'

      -- Method: write_bytes (bytes, append=False)

          Open this file and write the given bytes to it.

          Default behavior is to overwrite any existing file.  Call
          ‘p.write_bytes(bytes, append=True)’ to append instead.

      -- Method: write_lines (lines, encoding=None, errors='strict',
               linesep='\n', append=False)

          Write the given lines of text to this file.

          By default this overwrites any existing file at this path.

          This puts a platform-specific newline sequence on every line.
          See ‘linesep’ below.

               ‘lines’ - A list of strings.

               ‘encoding’ - A Unicode encoding to use. This applies only if

                    ‘lines’ contains any Unicode strings.

               ‘errors’ - How to handle errors in Unicode encoding. This

                    also applies only to Unicode strings.

               linesep - The desired line-ending. This line-ending is

                    applied to every line.  If a line already has any
                    standard line ending (‘'\r'’, ‘'\n'’, ‘'\r\n'’,
                    ‘u'\x85'’, ‘u'\r\x85'’, ‘u'\u2028'’), that will be
                    stripped off and this will be used instead.  The
                    default is os.linesep, which is platform-dependent
                    (‘'\r\n'’ on Windows, ‘'\n'’ on Unix, etc.).
                    Specify ‘None’ to write the lines as-is, like
                    ‘.writelines’ on a file object.

          Use the keyword argument ‘append=True’ to append lines to the
          file.  The default is to overwrite the file.

               Warning: When you use this with Unicode data, if the
               encoding of the existing data in the file is different
               from the encoding you specify with the ‘encoding=’
               parameter, the result is mixed-encoding data, which can
               really confuse someone trying to read the file later.

      -- Method: write_text (text, encoding=None, errors='strict',
               linesep='\n', append=False)

          Write the given text to this file.

          The default behavior is to overwrite any existing file; to
          append instead, use the ‘append=True’ keyword argument.

          There are two differences between *note write_text(): 71. and
          *note write_bytes(): 6f.: newline handling and Unicode
          handling.  See below.

          Parameters:

               ‘text’ - str/bytes - The text to be written.

               ‘encoding’ - str - The text encoding used.

               ‘errors’ - str - How to handle Unicode encoding errors.

                    Default is ‘'strict'’.  See ‘help(unicode.encode)’
                    for the options.  Ignored if ‘text’ isn’t a Unicode
                    string.

               ‘linesep’ - keyword argument - str/unicode - The sequence of

                    characters to be used to mark end-of-line.  The
                    default is os.linesep(72).  Specify ‘None’ to use
                    newlines unmodified.

               ‘append’ - keyword argument - bool - Specifies what to do if

                    the file already exists (‘True’: append to the end
                    of it; ‘False’: overwrite it).  The default is
                    ‘False’.

          — Newline handling.

          ‘write_text()’ converts all standard end-of-line sequences
          (‘'\n'’, ‘'\r'’, and ‘'\r\n'’) to your platform’s default
          end-of-line sequence (see os.linesep(73); on Windows, for
          example, the end-of-line marker is ‘'\r\n'’).

          To override the platform’s default, pass the ‘linesep=’
          keyword argument.  To preserve the newlines as-is, pass
          ‘linesep=None’.

          This handling applies to Unicode text and bytes, except with
          Unicode, additional non-ASCII newlines are recognized: ‘\x85’,
          ‘\r\x85’, and ‘\u2028’.

          — Unicode

          If ‘text’ isn’t Unicode, then apart from newline handling, the
          bytes are written verbatim to the file.  The ‘encoding’ and
          ‘errors’ arguments are not used and must be omitted.

          If ‘text’ is Unicode, it is first converted to *note bytes():
          c. using the specified ‘encoding’ (or the default encoding if
          ‘encoding’ isn’t specified).  The ‘errors’ argument applies
          only to this conversion.

 -- Class: path.TempDir (*args, **kwargs)

     A temporary directory via tempfile.mkdtemp()(74), and constructed
     with the same parameters that you can use as a context manager.

     For example:

          >>> with TempDir() as d:
          ...     d.isdir() and isinstance(d, Path)
          True

     The directory is deleted automatically.

          >>> d.isdir()
          False

     See also
     ........

     tempfile.mkdtemp()(75)

   ---------- Footnotes ----------

   (1) https://docs.python.org/3/library/os.path.html#module-os.path

   (2) https://docs.python.org/3/library/shutil.html#module-shutil

   (3) https://docs.python.org/3/library/os.path.html#os.path.abspath

   (4) https://docs.python.org/3/library/os.html#os.access

   (5) https://docs.python.org/3/library/os.path.html#os.path.getatime

   (6) https://docs.python.org/3/library/os.path.html#os.path.basename

   (7) https://docs.python.org/3/library/os.html#os.chdir

   (8) https://docs.python.org/3/library/os.html#os.chdir

   (9) http://en.wikipedia.org/wiki/Chmod#Symbolic_modes

   (10) https://docs.python.org/3/library/os.html#os.chmod

   (11) https://docs.python.org/3/library/os.html#os.chown

   (12) https://docs.python.org/3/library/os.html#os.chroot

   (13) https://docs.python.org/3/library/os.path.html#os.path.getctime

   (14) https://docs.python.org/3/library/os.path.html#os.path.dirname

   (15) https://docs.python.org/3/library/os.path.html#os.path.exists

   (16) 
https://docs.python.org/3/library/os.path.html#os.path.expanduser

   (17) 
https://docs.python.org/3/library/os.path.html#os.path.expandvars

   (18) https://docs.python.org/3/library/os.path.html#os.path.normcase

   (19) https://docs.python.org/3/library/fnmatch.html#fnmatch.fnmatch

   (20) https://docs.python.org/3/library/os.path.html#os.path.getatime

   (21) https://docs.python.org/3/library/os.path.html#os.path.getctime

   (22) https://docs.python.org/3/library/os.html#os.getcwd

   (23) https://docs.python.org/3/library/os.path.html#os.path.getmtime

   (24) https://docs.python.org/3/library/os.path.html#os.path.getsize

   (25) https://docs.python.org/3/library/glob.html#glob.glob

   (26) https://docs.python.org/3/library/glob.html#glob.iglob

   (27) https://docs.python.org/3/library/exceptions.html#ValueError

   (28) https://docs.python.org/3/library/os.path.html#os.path.isabs

   (29) https://docs.python.org/3/library/os.path.html#os.path.isdir

   (30) https://docs.python.org/3/library/os.path.html#os.path.isfile

   (31) https://docs.python.org/3/library/os.path.html#os.path.islink

   (32) https://docs.python.org/3/library/os.path.html#os.path.ismount

   (33) https://docs.python.org/3/library/functions.html#open

   (34) https://docs.python.org/3/library/os.html#os.link

   (35) https://docs.python.org/3/library/os.html#os.lstat

   (36) https://docs.python.org/3/library/os.html#os.makedirs

   (37) https://docs.python.org/3/library/os.html#os.mkdir

   (38) https://docs.python.org/3/library/os.path.html#module-os.path

   (39) https://docs.python.org/3/library/os.path.html#os.path.getmtime

   (40) https://docs.python.org/3/library/os.path.html#os.path.basename

   (41) https://docs.python.org/3/library/os.path.html#os.path.normcase

   (42) https://docs.python.org/3/library/os.path.html#os.path.normpath

   (43) https://docs.python.org/3/library/io.html#io.open

   (44) https://docs.python.org/3/library/exceptions.html#OSError

   (45) https://docs.python.org/3/library/os.path.html#os.path.dirname

   (46) https://docs.python.org/3/library/os.html#os.pathconf

   (47) https://docs.python.org/3/library/hashlib.html#module-hashlib

   (48) 
https://docs.python.org/3/library/hashlib.html#hashlib.hash.digest

   (49) https://docs.python.org/3/library/hashlib.html#module-hashlib

   (50) 
https://docs.python.org/3/library/hashlib.html#hashlib.hash.hexdigest

   (51) https://docs.python.org/3/library/os.html#os.readlink

   (52) https://docs.python.org/3/library/os.html#os.readlink

   (53) https://docs.python.org/3/library/os.path.html#os.path.realpath

   (54) https://docs.python.org/3/library/os.html#os.remove

   (55) https://docs.python.org/3/library/os.html#os.removedirs

   (56) https://docs.python.org/3/library/os.html#os.rename

   (57) https://docs.python.org/3/library/os.html#os.renames

   (58) https://docs.python.org/3/library/os.html#os.rmdir

   (59) https://docs.python.org/3/library/os.path.html#os.path.samefile

   (60) https://docs.python.org/3/library/os.path.html#os.path.getsize

   (61) https://docs.python.org/3/library/os.html#os.curdir

   (62) https://docs.python.org/3/library/os.html#os.pardir

   (63) 
https://docs.python.org/3/library/os.path.html#os.path.splitdrive

   (64) https://docs.python.org/3/library/os.path.html#os.path.splitext

   (65) https://docs.python.org/3/library/os.path.html#os.path.split

   (66) https://docs.python.org/3/library/os.html#os.stat

   (67) https://docs.python.org/3/library/os.html#os.statvfs

   (68) https://docs.python.org/3/library/os.html#os.symlink

   (69) https://docs.python.org/3/library/os.html#os.remove

   (70) https://docs.python.org/3/library/os.html#os.utime

   (71) https://docs.python.org/3/library/warnings.html#warnings.warn

   (72) https://docs.python.org/3/library/os.html#os.linesep

   (73) https://docs.python.org/3/library/os.html#os.linesep

   (74) https://docs.python.org/3/library/tempfile.html#tempfile.mkdtemp

   (75) https://docs.python.org/3/library/tempfile.html#tempfile.mkdtemp


File: path.info,  Node: History,  Next: Indices and tables,  Prev: API,  Up: Top

2 History
*********

* Menu:

* v16.2.0: v16 2 0.
* v16.1.0: v16 1 0.
* v16.0.0: v16 0 0.
* v15.1.2: v15 1 2.
* v15.1.1: v15 1 1.
* v15.1.0: v15 1 0.
* v15.0.1: v15 0 1.
* v15.0.0: v15 0 0.
* v14.0.1: v14 0 1.
* v14.0.0: v14 0 0.
* v13.3.0: v13 3 0.
* v13.2.0: v13 2 0.
* v13.1.0: v13 1 0.
* v13.0.0: v13 0 0.
* v12.5.0: v12 5 0.
* v12.4.0: v12 4 0.
* v12.3.0: v12 3 0.
* v12.2.0: v12 2 0.
* v12.1.0: v12 1 0.
* v12.0.2: v12 0 2.
* 12.0.1: 12 0 1.
* 11.5.2: 11 5 2.
* 11.5.1: 11 5 1.
* 11.5.0: 11 5 0.
* 11.4.1: 11 4 1.
* 11.4.0: 11 4 0.
* 11.3.0: 11 3 0.
* 11.2.0: 11 2 0.
* 11.1.0: 11 1 0.
* 11.0.1: 11 0 1.
* 11.0: 11 0.
* 10.6: 10 6.
* 10.5: 10 5.
* 10.4: 10 4.
* 10.3.1: 10 3 1.
* 10.3: 10 3.
* 10.2: 10 2.
* 10.1: 10 1.
* 10.0: 10 0.
* 9.1: 9 1.
* 9.0: 9 0.
* 8.3: 8 3.
* 8.2.1: 8 2 1.
* 8.2: 8 2.
* 8.1.2: 8 1 2.
* 8.1.1: 8 1 1.
* 8.1: 8 1.
* 8.0: 8 0.
* 7.7: 7 7.
* 7.6.2: 7 6 2.
* 7.6.1: 7 6 1.
* 7.6: 7 6.
* 7.5: 7 5.
* 7.4: 7 4.
* 7.3: 7 3.
* 7.2: 7 2.
* 7.1: 7 1.
* 7.0: 7 0.
* 6.2: 6 2.
* 6.1: 6 1.
* 6.0: 6 0.
* 5.3: 5 3.
* 5.2: 5 2.
* 5.1: 5 1.
* 5.0: 5 0.
* 4.4: 4 4.
* 4.3: 4 3.
* 4.2: 4 2.
* 4.1: 4 1.
* 4.0: 4 0.
* 3.2: 3 2.
* 3.1: 3 1.
* 3.0: 3 0.
* 2.6: 2 6.
* 2.5: 2 5.


File: path.info,  Node: v16 2 0,  Next: v16 1 0,  Up: History

2.1 v16.2.0
===========

25 Jul 2021

   - Deprecated passing bytes to ‘write_text’.  Instead, users should
     call ‘write_bytes’.


File: path.info,  Node: v16 1 0,  Next: v16 0 0,  Prev: v16 2 0,  Up: History

2.2 v16.1.0
===========

25 Jul 2021

   - #204(1): Improved test coverage across the package to 99%, fixing
     bugs in uncovered code along the way.

   ---------- Footnotes ----------

   (1) https://github.com/jaraco/path/issues/204


File: path.info,  Node: v16 0 0,  Next: v15 1 2,  Prev: v16 1 0,  Up: History

2.3 v16.0.0
===========

12 Jun 2021

   - #200(1): ‘TempDir’ context now cleans up unconditionally, even if
     an exception occurs.

   ---------- Footnotes ----------

   (1) https://github.com/jaraco/path/issues/200


File: path.info,  Node: v15 1 2,  Next: v15 1 1,  Prev: v16 0 0,  Up: History

2.4 v15.1.2
===========

21 Feb 2021

   - #199(1): Fixed broken link in README.

   ---------- Footnotes ----------

   (1) https://github.com/jaraco/path/issues/199


File: path.info,  Node: v15 1 1,  Next: v15 1 0,  Prev: v15 1 2,  Up: History

2.5 v15.1.1
===========

21 Feb 2021

   - Refreshed package metadata.


File: path.info,  Node: v15 1 0,  Next: v15 0 1,  Prev: v15 1 1,  Up: History

2.6 v15.1.0
===========

28 Jan 2021

   - Added ‘ExtantPath’ and ‘ExtantFile’ objects that raise errors when
     they reference a non-existent path or file.


File: path.info,  Node: v15 0 1,  Next: v15 0 0,  Prev: v15 1 0,  Up: History

2.7 v15.0.1
===========

08 Dec 2020

   - Refreshed package metadata.


File: path.info,  Node: v15 0 0,  Next: v14 0 1,  Prev: v15 0 1,  Up: History

2.8 v15.0.0
===========

27 Jul 2020

   - Removed ‘__version__’ property.  To determine the version, use
     ‘importlib.metadata.version('path')’.


File: path.info,  Node: v14 0 1,  Next: v14 0 0,  Prev: v15 0 0,  Up: History

2.9 v14.0.1
===========

24 May 2020

   - Fixed regression on Python 3.7 and earlier where ‘lru_cache’ did
     not support a user function.


File: path.info,  Node: v14 0 0,  Next: v13 3 0,  Prev: v14 0 1,  Up: History

2.10 v14.0.0
============

24 May 2020

   - Removed ‘namebase’ property.  Use ‘stem’ instead.

   - Removed ‘update’ parameter on method to ‘Path.merge_tree’.
     Instead, to only copy newer files, provide a wrapped ‘copy’
     function, as described in the doc string.

   - Removed ‘FastPath’.  Just use ‘Path’.

   - Removed ‘path.CaseInsensitivePattern’.  Instead use
     ‘path.matchers.CaseInsensitive’.

   - Removed ‘path.tempdir’.  Use ‘path.TempDir’.

   - #154(1): Added ‘Traversal’ class and support for customizing the
     behavior of a ‘Path.walk’.

   ---------- Footnotes ----------

   (1) https://github.com/jaraco/path/issues/154


File: path.info,  Node: v13 3 0,  Next: v13 2 0,  Prev: v14 0 0,  Up: History

2.11 v13.3.0
============

22 May 2020

   - #186(1): Fix test failures on Python 3.8 on Windows by relying on
     ‘realpath()’ instead of ‘readlink()’.

   - #189(2): ‘realpath()’ now honors symlinks on Python 3.7 and
     earlier, approximating the behavior found on Python 3.8.

   - #187(3): ‘lines()’ no longer relies on the deprecated ‘.text()’.

   ---------- Footnotes ----------

   (1) https://github.com/jaraco/path/issues/186

   (2) https://github.com/jaraco/path/issues/189

   (3) https://github.com/jaraco/path/issues/187


File: path.info,  Node: v13 2 0,  Next: v13 1 0,  Prev: v13 3 0,  Up: History

2.12 v13.2.0
============

22 Feb 2020

   - Require Python 3.6 or later.


File: path.info,  Node: v13 1 0,  Next: v13 0 0,  Prev: v13 2 0,  Up: History

2.13 v13.1.0
============

01 Dec 2019

   - #170(1): Added ‘read_text’ and ‘read_bytes’ methods to align with
     ‘pathlib’ behavior.  Deprecated ‘text’ method.  If you require
     newline normalization of ‘text’, use
     ‘jaraco.text.normalize_newlines(Path.read_text())’.

   ---------- Footnotes ----------

   (1) https://github.com/jaraco/path/issues/170


File: path.info,  Node: v13 0 0,  Next: v12 5 0,  Prev: v13 1 0,  Up: History

2.14 v13.0.0
============

29 Nov 2019

   - #169(1): Renamed package from ‘path.py’ to ‘path’.  The docs make
     reference to a pet name “path pie” for easier discovery.

   ---------- Footnotes ----------

   (1) https://github.com/jaraco/path/issues/169


File: path.info,  Node: v12 5 0,  Next: v12 4 0,  Prev: v13 0 0,  Up: History

2.15 v12.5.0
============

27 Jul 2020

   - #195(1): Project now depends on ‘path’.

   ---------- Footnotes ----------

   (1) https://github.com/jaraco/path/issues/195


File: path.info,  Node: v12 4 0,  Next: v12 3 0,  Prev: v12 5 0,  Up: History

2.16 v12.4.0
============

01 Dec 2019

   - #169(1): Project now depends on ‘path < 13.2’.

   - Fixed typo in README.

   ---------- Footnotes ----------

   (1) https://github.com/jaraco/path/issues/169


File: path.info,  Node: v12 3 0,  Next: v12 2 0,  Prev: v12 4 0,  Up: History

2.17 v12.3.0
============

29 Nov 2019

   - #169(1): Project is renamed to simply ‘path’.  This release of
     ‘path.py’ simply depends on ‘path < 13.1’.

   ---------- Footnotes ----------

   (1) https://github.com/jaraco/path/issues/169


File: path.info,  Node: v12 2 0,  Next: v12 1 0,  Prev: v12 3 0,  Up: History

2.18 v12.2.0
============

29 Nov 2019

   - #169(1): Moved project at GitHub from ‘jaraco/path.py’ to
     ‘jaraco/path’.

   ---------- Footnotes ----------

   (1) https://github.com/jaraco/path/issues/169


File: path.info,  Node: v12 1 0,  Next: v12 0 2,  Prev: v12 2 0,  Up: History

2.19 v12.1.0
============

29 Nov 2019

   - #171(1): Fixed exception in ‘rmdir_p’ when target is not empty.

   - #174(2): Rely on ‘importlib.metadata’ on Python 3.8.

   ---------- Footnotes ----------

   (1) https://github.com/jaraco/path/issues/171

   (2) https://github.com/jaraco/path/issues/174


File: path.info,  Node: v12 0 2,  Next: 12 0 1,  Prev: v12 1 0,  Up: History

2.20 v12.0.2
============

02 Nov 2019

   - Refreshed package metadata.


File: path.info,  Node: 12 0 1,  Next: 11 5 2,  Prev: v12 0 2,  Up: History

2.21 12.0.1
===========

13 Apr 2019

   - #166(1): Removed ‘universal’ wheel support.

12.0 —

12 Apr 2019

   - #148(2): Dropped support for Python 2.7 and 3.4.

   - Moved ‘path’ into a package.

   ---------- Footnotes ----------

   (1) https://github.com/jaraco/path/issues/166

   (2) https://github.com/jaraco/path/issues/148


File: path.info,  Node: 11 5 2,  Next: 11 5 1,  Prev: 12 0 1,  Up: History

2.22 11.5.2
===========

09 Apr 2019

   - #163(1): Corrected ‘pymodules’ typo in package declaration.

   ---------- Footnotes ----------

   (1) https://github.com/jaraco/path/issues/163


File: path.info,  Node: 11 5 1,  Next: 11 5 0,  Prev: 11 5 2,  Up: History

2.23 11.5.1
===========

08 Apr 2019

   - Minor packaging refresh.


File: path.info,  Node: 11 5 0,  Next: 11 4 1,  Prev: 11 5 1,  Up: History

2.24 11.5.0
===========

02 Oct 2018

   - #156(1): Re-wrote the handling of pattern matches for ‘listdir’,
     ‘walk’, and related methods, allowing the pattern to be a more
     complex object.  This approach drastically simplifies the code and
     obviates the ‘CaseInsensitivePattern’ and ‘FastPath’ classes.  Now
     the main ‘Path’ class should be as performant as ‘FastPath’ and
     case-insensitive matches can be readily constructed using the new
     ‘path.matchers.CaseInsensitive’ class.

   ---------- Footnotes ----------

   (1) https://github.com/jaraco/path/issues/156


File: path.info,  Node: 11 4 1,  Next: 11 4 0,  Prev: 11 5 0,  Up: History

2.25 11.4.1
===========

29 Sep 2018

   - #153(1): Skip intermittently failing performance test on Python 2.

   ---------- Footnotes ----------

   (1) https://github.com/jaraco/path/issues/153


File: path.info,  Node: 11 4 0,  Next: 11 3 0,  Prev: 11 4 1,  Up: History

2.26 11.4.0
===========

28 Sep 2018

   - #130(1): Path.py now supports non-decodable filenames on Linux and
     Python 2, leveraging the backports.os(2) package (as an optional
     dependency).  Currently, only ‘listdir’ is patched, but other ‘os’
     primitives may be patched similarly in the
     ‘patch_for_linux_python2’ function.

   - #141(3): For merge_tree, instead of relying on the deprecated
     distutils module, implement merge_tree explicitly.  The ‘update’
     parameter is deprecated, instead superseded by a ‘copy_function’
     parameter and an ‘only_newer’ wrapper for any copy function.

   ---------- Footnotes ----------

   (1) https://github.com/jaraco/path/issues/130

   (2) https://pypi.org/project/backports.os

   (3) https://github.com/jaraco/path/issues/141


File: path.info,  Node: 11 3 0,  Next: 11 2 0,  Prev: 11 4 0,  Up: History

2.27 11.3.0
===========

18 Sep 2018

   - #151(1): No longer use two techniques for splitting lines.
     Instead, unconditionally rely on io.open for universal newlines
     support and always use splitlines.

   ---------- Footnotes ----------

   (1) https://github.com/jaraco/path/issues/151


File: path.info,  Node: 11 2 0,  Next: 11 1 0,  Prev: 11 3 0,  Up: History

2.28 11.2.0
===========

15 Sep 2018

   - #146(1): Rely on importlib_metadata(2) instead of
     setuptools/pkg_resources to load the version of the module.  Added
     tests ensuring a <100ms import time for the ‘path’ module.  This
     change adds an explicit dependency on the importlib_metadata
     package, but the project still supports copying of the ‘path.py’
     module without any dependencies.

   ---------- Footnotes ----------

   (1) https://github.com/jaraco/path/issues/146

   (2) https://pypi.org/project/importlib_metadata


File: path.info,  Node: 11 1 0,  Next: 11 0 1,  Prev: 11 2 0,  Up: History

2.29 11.1.0
===========

04 Sep 2018

   - #143(1), #144(2): Add iglob method.

   - #142(3), #145(4): Rename ‘tempdir’ to ‘TempDir’ and declare it as
     part of ‘__all__’.  Retain ‘tempdir’ for compatibility for now.

   - #145(5): ‘TempDir.__enter__’ no longer returns the ‘TempDir’
     instance, but instead returns a ‘Path’ instance, suitable for
     entering to change the current working directory.

   ---------- Footnotes ----------

   (1) https://github.com/jaraco/path/issues/143

   (2) https://github.com/jaraco/path/issues/144

   (3) https://github.com/jaraco/path/issues/142

   (4) https://github.com/jaraco/path/issues/145

   (5) https://github.com/jaraco/path/issues/145


File: path.info,  Node: 11 0 1,  Next: 11 0,  Prev: 11 1 0,  Up: History

2.30 11.0.1
===========

26 Mar 2018

   - #136(1): Fixed test failures on BSD.

   - Refreshed package metadata.

   ---------- Footnotes ----------

   (1) https://github.com/jaraco/path/issues/136


File: path.info,  Node: 11 0,  Next: 10 6,  Prev: 11 0 1,  Up: History

2.31 11.0
=========

11 Feb 2018

   - Drop support for Python 3.3.


File: path.info,  Node: 10 6,  Next: 10 5,  Prev: 11 0,  Up: History

2.32 10.6
=========

11 Feb 2018

   - Renamed ‘namebase’ to ‘stem’ to match API of pathlib.  Kept
     ‘namebase’ as a deprecated alias for compatibility.

   - Added new ‘with_suffix’ method, useful for renaming the extension
     on a Path:

          orig = Path('mydir/mypath.bat')
          renamed = orig.rename(orig.with_suffix('.cmd'))


File: path.info,  Node: 10 5,  Next: 10 4,  Prev: 10 6,  Up: History

2.33 10.5
=========

29 Oct 2017

   - Packaging refresh and readme updates.


File: path.info,  Node: 10 4,  Next: 10 3 1,  Prev: 10 5,  Up: History

2.34 10.4
=========

27 Aug 2017

   - #130(1): Removed surrogate_escape handler as it’s no longer used.

   ---------- Footnotes ----------

   (1) https://github.com/jaraco/path/issues/130


File: path.info,  Node: 10 3 1,  Next: 10 3,  Prev: 10 4,  Up: History

2.35 10.3.1
===========

17 Apr 2017

   - #124(1): Fixed ‘rmdir_p’ raising ‘FileNotFoundError’ when directory
     does not exist on Windows.

   ---------- Footnotes ----------

   (1) https://github.com/jaraco/path/issues/124


File: path.info,  Node: 10 3,  Next: 10 2,  Prev: 10 3 1,  Up: History

2.36 10.3
=========

16 Apr 2017

   - #115(1): Added a new performance-optimized implementation for
     listdir operations, optimizing ‘listdir’, ‘walk’, ‘walkfiles’,
     ‘walkdirs’, and ‘fnmatch’, presented as the ‘FastPath’ class.

     Please direct feedback on this implementation to the ticket,
     especially if the performance benefits justify it replacing the
     default ‘Path’ class.

   ---------- Footnotes ----------

   (1) https://github.com/jaraco/path/issues/115


File: path.info,  Node: 10 2,  Next: 10 1,  Prev: 10 3,  Up: History

2.37 10.2
=========

16 Apr 2017

   - Symlink no longer requires the ‘newlink’ parameter and will default
     to the basename of the target in the current working directory.


File: path.info,  Node: 10 1,  Next: 10 0,  Prev: 10 2,  Up: History

2.38 10.1
=========

23 Jan 2017

   - #123(1): Implement ‘Path.__fspath__’ per PEP 519(2).

   ---------- Footnotes ----------

   (1) https://github.com/jaraco/path/issues/123

   (2) https://www.python.org/dev/peps/pep-0519/


File: path.info,  Node: 10 0,  Next: 9 1,  Prev: 10 1,  Up: History

2.39 10.0
=========

02 Jan 2017

   - Once again as in 8.0 remove deprecated ‘path.path’.


File: path.info,  Node: 9 1,  Next: 9 0,  Prev: 10 0,  Up: History

2.40 9.1
========

02 Jan 2017

   - #121(1): Removed workaround for #61(2) added in 5.2.  ‘path.py’ now
     only supports file system paths that can be effectively decoded to
     text.  It is the responsibility of the system implementer to ensure
     that filenames on the system are decodeable by
     ‘sys.getfilesystemencoding()’.

   ---------- Footnotes ----------

   (1) https://github.com/jaraco/path/issues/121

   (2) https://github.com/jaraco/path/issues/61


File: path.info,  Node: 9 0,  Next: 8 3,  Prev: 9 1,  Up: History

2.41 9.0
========

19 Nov 2016

   - Drop support for Python 2.6 and 3.2 as integration dependencies
     (pip) no longer support these versions.


File: path.info,  Node: 8 3,  Next: 8 2 1,  Prev: 9 0,  Up: History

2.42 8.3
========

19 Nov 2016

   - Merge with latest skeleton, adding badges and test runs by default
     under tox instead of pytest-runner.

   - Documentation is no longer hosted with PyPI.


File: path.info,  Node: 8 2 1,  Next: 8 2,  Prev: 8 3,  Up: History

2.43 8.2.1
==========

16 Apr 2016

   - #112(1): Update Travis CI usage to only deploy on Python 3.5.

   ---------- Footnotes ----------

   (1) https://github.com/jaraco/path/issues/112


File: path.info,  Node: 8 2,  Next: 8 1 2,  Prev: 8 2 1,  Up: History

2.44 8.2
========

08 Apr 2016

   - Refreshed project metadata based on jaraco’s project skeleton(1).

   - Releases are now automatically published via Travis-CI.

   - #111(2): More aggressively trap errors when importing
     ‘pkg_resources’.

   ---------- Footnotes ----------

   (1) https://github.com/jaraco/skeleton/tree/spaces

   (2) https://github.com/jaraco/path/issues/111


File: path.info,  Node: 8 1 2,  Next: 8 1 1,  Prev: 8 2,  Up: History

2.45 8.1.2
==========

04 Oct 2015

   - #105(1): By using unicode literals, avoid errors rendering the
     backslash in __get_owner_windows.

   ---------- Footnotes ----------

   (1) https://github.com/jaraco/path/issues/105


File: path.info,  Node: 8 1 1,  Next: 8 1,  Prev: 8 1 2,  Up: History

2.46 8.1.1
==========

10 Sep 2015

   - #102(1): Reluctantly restored reference to path.path in ‘__all__’.

   ---------- Footnotes ----------

   (1) https://github.com/jaraco/path/issues/102


File: path.info,  Node: 8 1,  Next: 8 0,  Prev: 8 1 1,  Up: History

2.47 8.1
========

27 Aug 2015

   - #102(1): Restored ‘path.path’ with a DeprecationWarning.

   ---------- Footnotes ----------

   (1) https://github.com/jaraco/path/issues/102


File: path.info,  Node: 8 0,  Next: 7 7,  Prev: 8 1,  Up: History

2.48 8.0
========

27 Aug 2015

Removed ‘path.path’.  Clients must now refer to the canonical name,
‘path.Path’ as introduced in 6.2.


File: path.info,  Node: 7 7,  Next: 7 6 2,  Prev: 8 0,  Up: History

2.49 7.7
========

23 Aug 2015

   - #88(1): Added support for resolving certain directories on a system
     to platform-friendly locations using the appdirs(2) library.  The
     ‘Path.special’ method returns an ‘SpecialResolver’ instance that
     will resolve a path in a scope (i.e.  ‘site’ or ‘user’) and class
     (i.e.  ‘config’, ‘cache’, ‘data’).  For example, to create a config
     directory for “My App”:

          config_dir = Path.special("My App").user.config.makedirs_p()

     ‘config_dir’ will exist in a user context and will be in a suitable
     platform-friendly location.

     As ‘path.py’ does not currently have any dependencies, and to
     retain that expectation for a compatible upgrade path, ‘appdirs’
     must be installed to avoid an ImportError when invoking ‘special’.

   - #88(3): In order to support “multipath” results, where multiple
     paths are returned in a single, ‘os.pathsep’-separated string, a
     new class MultiPath now represents those special results.  This
     functionality is experimental and may change.  Feedback is invited.

   ---------- Footnotes ----------

   (1) https://github.com/jaraco/path/issues/88

   (2) https://pypi.python.org/pypi/appdirs/1.4.0

   (3) https://github.com/jaraco/path/issues/88


File: path.info,  Node: 7 6 2,  Next: 7 6 1,  Prev: 7 7,  Up: History

2.50 7.6.2
==========

23 Aug 2015

   - Re-release of 7.6.1 without unintended feature.


File: path.info,  Node: 7 6 1,  Next: 7 6,  Prev: 7 6 2,  Up: History

2.51 7.6.1
==========

19 Aug 2015

   - #101(1): Supress error when ‘path.py’ is not present as a
     distribution.

   ---------- Footnotes ----------

   (1) https://github.com/jaraco/path/issues/101


File: path.info,  Node: 7 6,  Next: 7 5,  Prev: 7 6 1,  Up: History

2.52 7.6
========

09 Aug 2015

   - #100(1): Add ‘merge_tree’ method for merging two existing directory
     trees.

   - Uses setuptools_scm(2) for version management.

   ---------- Footnotes ----------

   (1) https://github.com/jaraco/path/issues/100

   (2) https://github.org/pypa/setuptools_scm


File: path.info,  Node: 7 5,  Next: 7 4,  Prev: 7 6,  Up: History

2.53 7.5
========

02 Aug 2015

   - #97(1): ‘__rdiv__’ and ‘__rtruediv__’ are now defined.

   ---------- Footnotes ----------

   (1) https://github.com/jaraco/path/issues/97


File: path.info,  Node: 7 4,  Next: 7 3,  Prev: 7 5,  Up: History

2.54 7.4
========

12 Jul 2015

   - #93(1): chown now appears in docs and raises NotImplementedError if
     ‘os.chown’ isn’t present.

   - #92(2): Added compatibility support for ‘.samefile’ on platforms
     without ‘os.samefile’.

   ---------- Footnotes ----------

   (1) https://github.com/jaraco/path/issues/93

   (2) https://github.com/jaraco/path/issues/92


File: path.info,  Node: 7 3,  Next: 7 2,  Prev: 7 4,  Up: History

2.55 7.3
========

14 Apr 2015

        - #91(1): Releases now include a universal wheel.

   ---------- Footnotes ----------

   (1) https://github.com/jaraco/path/issues/91


File: path.info,  Node: 7 2,  Next: 7 1,  Prev: 7 3,  Up: History

2.56 7.2
========

29 Jan 2015

        - In chmod, added support for multiple symbolic masks (separated
          by commas).

        - In chmod, fixed issue in setting of symbolic mask with ‘=’
          where unreferenced permissions were cleared.


File: path.info,  Node: 7 1,  Next: 7 0,  Prev: 7 2,  Up: History

2.57 7.1
========

22 Jan 2015

        - #23(1): Added support for symbolic masks to ‘.chmod’.

   ---------- Footnotes ----------

   (1) https://github.com/jaraco/path/issues/23


File: path.info,  Node: 7 0,  Next: 6 2,  Prev: 7 1,  Up: History

2.58 7.0
========

05 Oct 2014

        - The ‘open’ method now uses ‘io.open’ and supports all of the
          parameters to that function.  ‘open’ will always raise an
          ‘OSError’ on failure, even on Python 2.

        - Updated ‘write_text’ to support additional newline patterns.

        - The ‘text’ method now always returns text (never bytes), and
          thus requires an encoding parameter be supplied if the default
          encoding is not sufficient to decode the content of the file.


File: path.info,  Node: 6 2,  Next: 6 1,  Prev: 7 0,  Up: History

2.59 6.2
========

27 Sep 2014

        - ‘path’ class renamed to ‘Path’.  The ‘path’ name remains as an
          alias for compatibility.


File: path.info,  Node: 6 1,  Next: 6 0,  Prev: 6 2,  Up: History

2.60 6.1
========

27 Sep 2014

        - ‘chown’ now accepts names in addition to numeric IDs.


File: path.info,  Node: 6 0,  Next: 5 3,  Prev: 6 1,  Up: History

2.61 6.0
========

22 Sep 2014

        - Drop support for Python 2.5.  Python 2.6 or later required.

        - Installation now requires setuptools.


File: path.info,  Node: 5 3,  Next: 5 2,  Prev: 6 0,  Up: History

2.62 5.3
========

17 Sep 2014

        - Allow arbitrary callables to be passed to path.walk ‘errors’
          parameter.  Enables workaround for issues such as #73(1) and
          #56(2).

   ---------- Footnotes ----------

   (1) https://github.com/jaraco/path/issues/73

   (2) https://github.com/jaraco/path/issues/56


File: path.info,  Node: 5 2,  Next: 5 1,  Prev: 5 3,  Up: History

2.63 5.2
========

12 Jun 2014

        - #61(1): path.listdir now decodes filenames from os.listdir
          when loading characters from a file.  On Python 3, the
          behavior is unchanged.  On Python 2, the behavior will now
          mimick that of Python 3, attempting to decode all filenames
          and paths using the encoding indicated by
          ‘sys.getfilesystemencoding()’, and escaping any undecodable
          characters using the ‘surrogateescape’ handler.

   ---------- Footnotes ----------

   (1) https://github.com/jaraco/path/issues/61


File: path.info,  Node: 5 1,  Next: 5 0,  Prev: 5 2,  Up: History

2.64 5.1
========

30 Jan 2014

        - #53(1): Added ‘path.in_place’ for editing files in place.

   ---------- Footnotes ----------

   (1) https://github.com/jaraco/path/issues/53


File: path.info,  Node: 5 0,  Next: 4 4,  Prev: 5 1,  Up: History

2.65 5.0
========

08 Nov 2013

        - ‘path.fnmatch’ now takes an optional parameter ‘normcase’ and
          this parameter defaults to self.module.normcase (using case
          normalization most pertinent to the path object itself).  Note
          that this change means that any paths using a custom ntpath
          module on non-Windows systems will have different fnmatch
          behavior.  Before:

               # on Unix
               >>> p = path('Foo')
               >>> p.module = ntpath
               >>> p.fnmatch('foo')
               False

          After:

               # on any OS
               >>> p = path('Foo')
               >>> p.module = ntpath
               >>> p.fnmatch('foo')
               True

          To maintain the original behavior, either don’t define the
          ‘module’ for the path or supply explicit normcase function:

               >>> p.fnmatch('foo', normcase=os.path.normcase)
               # result always varies based on OS, same as fnmatch.fnmatch

          For most use-cases, the default behavior should remain the
          same.

        - Issue #50(1): Methods that accept patterns (‘listdir’,
          ‘files’, ‘dirs’, ‘walk’, ‘walkdirs’, ‘walkfiles’, and
          ‘fnmatch’) will now use a ‘normcase’ attribute if it is
          present on the ‘pattern’ parameter.  The path module now
          provides a ‘CaseInsensitivePattern’ wrapper for strings
          suitable for creating case-insensitive patterns for those
          methods.

   ---------- Footnotes ----------

   (1) https://github.com/jaraco/path/issues/50


File: path.info,  Node: 4 4,  Next: 4 3,  Prev: 5 0,  Up: History

2.66 4.4
========

27 Oct 2013

        - Issue #44(1): _hash method would open files in text mode,
          producing invalid results on Windows.  Now files are opened in
          binary mode, producing consistent results.

        - Issue #47(2): Documentation is dramatically improved with
          Intersphinx links to the Python os.path functions and
          documentation for all methods and properties.

   ---------- Footnotes ----------

   (1) https://github.com/jaraco/path/issues/44

   (2) https://github.com/jaraco/path/issues/47


File: path.info,  Node: 4 3,  Next: 4 2,  Prev: 4 4,  Up: History

2.67 4.3
========

02 Jul 2013

        - Issue #32(1): Add ‘chdir’ and ‘cd’ methods.

   ---------- Footnotes ----------

   (1) https://github.com/jaraco/path/issues/32


File: path.info,  Node: 4 2,  Next: 4 1,  Prev: 4 3,  Up: History

2.68 4.2
========

02 Jul 2013

        - ‘open()’ now passes all positional and keyword arguments
          through to the underlying ‘builtins.open’ call.


File: path.info,  Node: 4 1,  Next: 4 0,  Prev: 4 2,  Up: History

2.69 4.1
========

28 May 2013

        - Native Python 2 and Python 3 support without using 2to3 during
          the build process.


File: path.info,  Node: 4 0,  Next: 3 2,  Prev: 4 1,  Up: History

2.70 4.0
========

26 May 2013

        - Added a ‘chunks()’ method to a allow quick iteration over
          pieces of a file at a given path.

        - Issue #28(1): Fix missing argument to ‘samefile’.

        - Initializer no longer enforces ‘isinstance basestring’ for the
          source object.  Now any object that supplies ‘__unicode__’ can
          be used by a ‘path’ (except None).  Clients that depend on a
          ValueError being raised for ‘int’ and other non-string objects
          should trap these types internally.

        - Issue #30(2): ‘chown’ no longer requires both uid and gid to
          be provided and will not mutate the ownership if nothing is
          provided.

   ---------- Footnotes ----------

   (1) https://github.com/jaraco/path/issues/28

   (2) https://github.com/jaraco/path/issues/30


File: path.info,  Node: 3 2,  Next: 3 1,  Prev: 4 0,  Up: History

2.71 3.2
========

07 May 2013

        - Issue #22(1): ‘__enter__’ now returns self.

   ---------- Footnotes ----------

   (1) https://github.com/jaraco/path/issues/22


File: path.info,  Node: 3 1,  Next: 3 0,  Prev: 3 2,  Up: History

2.72 3.1
========

15 Apr 2013

        - Issue #20(1): ‘relpath’ now supports a “start” parameter to
          match the signature of ‘os.path.relpath’.

   ---------- Footnotes ----------

   (1) https://github.com/jaraco/path/issues/20


File: path.info,  Node: 3 0,  Next: 2 6,  Prev: 3 1,  Up: History

2.73 3.0
========

15 Jan 2013

        - Minimum Python version is now 2.5.


File: path.info,  Node: 2 6,  Next: 2 5,  Prev: 3 0,  Up: History

2.74 2.6
========

15 Jan 2013

        - Issue #5(1): Implemented ‘path.tempdir’, which returns a path
          object which is a temporary directory and context manager for
          cleaning up the directory.

        - Issue #12(2): One can now construct path objects from a list
          of strings by simply using path.joinpath.  For example:

               path.joinpath('a', 'b', 'c') # or
               path.joinpath(*path_elements)

   ---------- Footnotes ----------

   (1) https://github.com/jaraco/path/issues/5

   (2) https://github.com/jaraco/path/issues/12


File: path.info,  Node: 2 5,  Prev: 2 6,  Up: History

2.75 2.5
========

14 Jan 2013

        - Issue #7(1): Add the ability to do chaining of operations that
          formerly only returned None.

        - Issue #4(2): Raise a TypeError when constructed from None.

Thanks to Mahan Marwat for transferring the ‘path’ name on Read The Docs
from path(3) to this project.

   ---------- Footnotes ----------

   (1) https://github.com/jaraco/path/issues/7

   (2) https://github.com/jaraco/path/issues/4

   (3) https://github.com/mahanmarwat/path


File: path.info,  Node: Indices and tables,  Next: Python Module Index,  Prev: History,  Up: Top

Indices and tables
******************

   * genindex

   * modindex

   * search


File: path.info,  Node: Python Module Index,  Next: Index,  Prev: Indices and tables,  Up: Top

Python Module Index
*******************

* Menu:

* path: 0.


File: path.info,  Node: Index,  Prev: Python Module Index,  Up: Top

Index
*****

 [index ]
* Menu:

* abspath() (path.Path method):          API.                (line   45)
* access() (path.Path method):           API.                (line   52)
* atime() (path.Path property):          API.                (line   64)
* basename() (path.Path method):         API.                (line   76)
* bytes() (path.Path method):            API.                (line   83)
* cd() (path.Path method):               API.                (line   87)
* chdir() (path.Path method):            API.                (line   94)
* chmod() (path.Path method):            API.                (line  101)
* chown() (path.Path method):            API.                (line  111)
* chroot() (path.Path method):           API.                (line  120)
* chunks() (path.Path method):           API.                (line  127)
* copy() (path.Path method):             API.                (line  144)
* copy2() (path.Path method):            API.                (line  157)
* copyfile() (path.Path method):         API.                (line  169)
* copymode() (path.Path method):         API.                (line  177)
* copystat() (path.Path method):         API.                (line  185)
* copytree() (path.Path method):         API.                (line  199)
* ctime() (path.Path property):          API.                (line  238)
* dirname() (path.Path method):          API.                (line  247)
* dirs() (path.Path method):             API.                (line  254)
* drive() (path.Path property):          API.                (line  264)
* exists() (path.Path method):           API.                (line  271)
* expand() (path.Path method):           API.                (line  278)
* expanduser() (path.Path method):       API.                (line  286)
* expandvars() (path.Path method):       API.                (line  293)
* ext() (path.Path property):            API.                (line  300)
* files() (path.Path method):            API.                (line  304)
* fnmatch() (path.Path method):          API.                (line  313)
* getatime() (path.Path method):         API.                (line  343)
* getctime() (path.Path method):         API.                (line  350)
* getcwd() (path.Path class method):     API.                (line  357)
* getmtime() (path.Path method):         API.                (line  366)
* getsize() (path.Path method):          API.                (line  373)
* get_owner() (path.Path method):        API.                (line  333)
* glob() (path.Path method):             API.                (line  380)
* iglob() (path.Path method):            API.                (line  398)
* in_place() (path.Path method):         API.                (line  417)
* isabs() (path.Path method):            API.                (line  445)
* isdir() (path.Path method):            API.                (line  455)
* isfile() (path.Path method):           API.                (line  462)
* islink() (path.Path method):           API.                (line  469)
* ismount() (path.Path method):          API.                (line  476)
* joinpath (path.Path attribute):        API.                (line  486)
* lines() (path.Path method):            API.                (line  489)
* link() (path.Path method):             API.                (line  515)
* listdir() (path.Path method):          API.                (line  524)
* lstat() (path.Path method):            API.                (line  541)
* makedirs() (path.Path method):         API.                (line  553)
* makedirs_p() (path.Path method):       API.                (line  560)
* merge_tree() (path.Path method):       API.                (line  565)
* mkdir() (path.Path method):            API.                (line  581)
* mkdir_p() (path.Path method):          API.                (line  588)
* module (path.Path attribute):          API.                (line  593)
* move() (path.Path method):             API.                (line  603)
* mtime() (path.Path property):          API.                (line  629)
* name() (path.Path property):           API.                (line  638)
* normcase() (path.Path method):         API.                (line  650)
* normpath() (path.Path method):         API.                (line  657)
* open() (path.Path method):             API.                (line  664)
* owner() (path.Path property):          API.                (line  671)
* parent() (path.Path property):         API.                (line  680)
* parts() (path.Path method):            API.                (line  692)
* Path (class in path):                  API.                (line   31)
* path (module):                         API.                (line    8)
* pathconf() (path.Path method):         API.                (line  697)
* readlink() (path.Path method):         API.                (line  754)
* readlinkabs() (path.Path method):      API.                (line  765)
* read_bytes() (path.Path method):       API.                (line  704)
* read_hash() (path.Path method):        API.                (line  708)
* read_hexhash() (path.Path method):     API.                (line  720)
* read_md5() (path.Path method):         API.                (line  732)
* read_text() (path.Path method):        API.                (line  743)
* realpath() (path.Path method):         API.                (line  776)
* relpath() (path.Path method):          API.                (line  783)
* relpathto() (path.Path method):        API.                (line  788)
* remove() (path.Path method):           API.                (line  796)
* removedirs() (path.Path method):       API.                (line  808)
* removedirs_p() (path.Path method):     API.                (line  815)
* remove_p() (path.Path method):         API.                (line  803)
* rename() (path.Path method):           API.                (line  820)
* renames() (path.Path method):          API.                (line  827)
* rmdir() (path.Path method):            API.                (line  834)
* rmdir_p() (path.Path method):          API.                (line  841)
* rmtree() (path.Path method):           API.                (line  846)
* rmtree_p() (path.Path method):         API.                (line  858)
* samefile() (path.Path method):         API.                (line  863)
* size() (path.Path property):           API.                (line  870)
* special (path.Path attribute):         API.                (line  879)
* splitall() (path.Path method):         API.                (line  882)
* splitdrive() (path.Path method):       API.                (line  896)
* splitext() (path.Path method):         API.                (line  909)
* splitpath() (path.Path method):        API.                (line  925)
* stat() (path.Path method):             API.                (line  934)
* statvfs() (path.Path method):          API.                (line  946)
* stem() (path.Path property):           API.                (line  955)
* stripext() (path.Path method):         API.                (line  963)
* symlink() (path.Path method):          API.                (line  970)
* TempDir (class in path):               API.                (line 1166)
* text() (path.Path method):             API.                (line  982)
* touch() (path.Path method):            API.                (line  988)
* unlink() (path.Path method):           API.                (line  993)
* unlink_p() (path.Path method):         API.                (line 1000)
* using_module() (path.Path class method): API.              (line 1005)
* utime() (path.Path method):            API.                (line 1007)
* walk() (path.Path method):             API.                (line 1016)
* walkdirs() (path.Path method):         API.                (line 1033)
* walkfiles() (path.Path method):        API.                (line 1037)
* with_suffix() (path.Path method):      API.                (line 1041)
* write_bytes() (path.Path method):      API.                (line 1057)
* write_lines() (path.Path method):      API.                (line 1064)
* write_text() (path.Path method):       API.                (line 1104)



Tag Table:
Node: Top314
Ref: index doc468
Ref: 1468
Node: API555
Ref: api doc624
Ref: 2624
Ref: api api624
Ref: 3624
Ref: api welcome-to-project-documentation624
Ref: 4624
Ref: api module-path744
Ref: 0744
Ref: api path Path1170
Ref: 51170
Ref: api path Path abspath1738
Ref: 61738
Ref: api path Path access1838
Ref: 71838
Ref: api path Path atime2075
Ref: 82075
Ref: api path Path basename2302
Ref: a2302
Ref: api path Path bytes2419
Ref: c2419
Ref: api path Path cd2514
Ref: d2514
Ref: api path Path chdir2602
Ref: e2602
Ref: api path Path chmod2693
Ref: f2693
Ref: api path Path chown2888
Ref: 102888
Ref: api path Path chroot3053
Ref: 113053
Ref: api path Path chunks3147
Ref: 123147
Ref: api path Path copy3665
Ref: 143665
Ref: api path Path copy24088
Ref: 154088
Ref: api path Path copyfile4497
Ref: 164497
Ref: api path Path copymode4754
Ref: 174754
Ref: api path Path copystat5077
Ref: 185077
Ref: api path Path copytree5685
Ref: 195685
Ref: api path Path ctime7571
Ref: 1a7571
Ref: api path Path dirname7737
Ref: 1c7737
Ref: api path Path dirs7856
Ref: 1e7856
Ref: api path Path drive8164
Ref: 218164
Ref: api path Path exists8341
Ref: 228341
Ref: api path Path expand8440
Ref: 238440
Ref: api path Path expanduser8725
Ref: 258725
Ref: api path Path expandvars8832
Ref: 248832
Ref: api path Path ext8939
Ref: 278939
Ref: api path Path files9026
Ref: 289026
Ref: api path Path fnmatch9294
Ref: 2a9294
Ref: api path Path get_owner9952
Ref: 2b9952
Ref: api path Path getatime10150
Ref: 910150
Ref: api path Path getctime10269
Ref: 1b10269
Ref: api path Path getcwd10389
Ref: 2d10389
Ref: api path Path getmtime10561
Ref: 2e10561
Ref: api path Path getsize10681
Ref: 3010681
Ref: api path Path glob10798
Ref: 3210798
Ref: api path Path iglob11385
Ref: 3411385
Ref: api path Path in_place11995
Ref: 3511995
Ref: api path Path isabs13047
Ref: 3613047
Ref: api path Path isdir13203
Ref: 3713203
Ref: api path Path isfile13300
Ref: 3813300
Ref: api path Path islink13399
Ref: 3913399
Ref: api path Path ismount13498
Ref: 3a13498
Ref: api path Path joinpath13660
Ref: 3b13660
Ref: api path Path lines13772
Ref: 3c13772
Ref: api path Path link14607
Ref: 3e14607
Ref: api path Path listdir14775
Ref: 2014775
Ref: api path Path lstat15260
Ref: 3f15260
Ref: api path Path makedirs15516
Ref: 4115516
Ref: api path Path makedirs_p15622
Ref: 4215622
Ref: api path Path merge_tree15775
Ref: 4315775
Ref: api path Path mkdir16368
Ref: 4416368
Ref: api path Path mkdir_p16468
Ref: 4516468
Ref: api path Path module16615
Ref: 4616615
Ref: api path Path move16837
Ref: 4716837
Ref: api path Path mtime18091
Ref: 2f18091
Ref: api path Path name18262
Ref: b18262
Ref: api path Path normcase18556
Ref: 4818556
Ref: api path Path normpath18659
Ref: 2618659
Ref: api path Path open18762
Ref: 1318762
Ref: api path Path owner18991
Ref: 2c18991
Ref: api path Path parent19153
Ref: 1d19153
Ref: api path Path parts19454
Ref: 4919454
Ref: api path Path pathconf19578
Ref: 4a19578
Ref: api path Path read_bytes19680
Ref: 4b19680
Ref: api path Path read_hash19766
Ref: 4c19766
Ref: api path Path read_hexhash20046
Ref: 4d20046
Ref: api path Path read_md520353
Ref: 4e20353
Ref: api path Path read_text20552
Ref: 4f20552
Ref: api path Path readlink20812
Ref: 5020812
Ref: api path Path readlinkabs21059
Ref: 5121059
Ref: api path Path realpath21295
Ref: 5221295
Ref: api path Path relpath21398
Ref: 5321398
Ref: api path Path relpathto21567
Ref: 5421567
Ref: api path Path remove21857
Ref: 5521857
Ref: api path Path remove_p21951
Ref: 5621951
Ref: api path Path removedirs22087
Ref: 5722087
Ref: api path Path removedirs_p22189
Ref: 5822189
Ref: api path Path rename22354
Ref: 5922354
Ref: api path Path renames22451
Ref: 5a22451
Ref: api path Path rmdir22550
Ref: 5b22550
Ref: api path Path rmdir_p22642
Ref: 5c22642
Ref: api path Path rmtree22797
Ref: 5d22797
Ref: api path Path rmtree_p23362
Ref: 5e23362
Ref: api path Path samefile23503
Ref: 5f23503
Ref: api path Path size23611
Ref: 3123611
Ref: api path Path special23775
Ref: 6023775
Ref: api path Path splitall23892
Ref: 6123892
Ref: api path Path splitdrive24424
Ref: 6224424
Ref: api path Path splitext24816
Ref: 6324816
Ref: api path Path splitpath25297
Ref: 6425297
Ref: api path Path stat25490
Ref: 4025490
Ref: api path Path statvfs25731
Ref: 6525731
Ref: api path Path stem25890
Ref: 6625890
Ref: api path Path stripext26101
Ref: 6726101
Ref: api path Path symlink26314
Ref: 6826314
Ref: api path Path text26624
Ref: 3d26624
Ref: api path Path touch26776
Ref: 6926776
Ref: api path Path unlink26927
Ref: 6a26927
Ref: api path Path unlink_p27021
Ref: 6b27021
Ref: api path Path using_module27157
Ref: 6c27157
Ref: api path Path utime27209
Ref: 6d27209
Ref: api path Path walk27375
Ref: 3327375
Ref: api path Path walkdirs28153
Ref: 1f28153
Ref: api path Path walkfiles28245
Ref: 2928245
Ref: api path Path with_suffix28336
Ref: 6e28336
Ref: api path Path write_bytes28853
Ref: 6f28853
Ref: api path Path write_lines29102
Ref: 7029102
Ref: api path Path write_text30903
Ref: 7130903
Ref: api path TempDir33498
Ref: 7233498
Ref: API-Footnote-133985
Ref: API-Footnote-234055
Ref: API-Footnote-334123
Ref: API-Footnote-434194
Ref: API-Footnote-534254
Ref: API-Footnote-634326
Ref: API-Footnote-734398
Ref: API-Footnote-834457
Ref: API-Footnote-934516
Ref: API-Footnote-1034574
Ref: API-Footnote-1134634
Ref: API-Footnote-1234694
Ref: API-Footnote-1334755
Ref: API-Footnote-1434828
Ref: API-Footnote-1534900
Ref: API-Footnote-1634971
Ref: API-Footnote-1735047
Ref: API-Footnote-1835123
Ref: API-Footnote-1935196
Ref: API-Footnote-2035268
Ref: API-Footnote-2135341
Ref: API-Footnote-2235414
Ref: API-Footnote-2335475
Ref: API-Footnote-2435548
Ref: API-Footnote-2535620
Ref: API-Footnote-2635683
Ref: API-Footnote-2735747
Ref: API-Footnote-2835817
Ref: API-Footnote-2935887
Ref: API-Footnote-3035957
Ref: API-Footnote-3136028
Ref: API-Footnote-3236099
Ref: API-Footnote-3336171
Ref: API-Footnote-3436234
Ref: API-Footnote-3536293
Ref: API-Footnote-3636353
Ref: API-Footnote-3736416
Ref: API-Footnote-3836476
Ref: API-Footnote-3936547
Ref: API-Footnote-4036620
Ref: API-Footnote-4136693
Ref: API-Footnote-4236766
Ref: API-Footnote-4336839
Ref: API-Footnote-4436898
Ref: API-Footnote-4536965
Ref: API-Footnote-4637037
Ref: API-Footnote-4737100
Ref: API-Footnote-4837171
Ref: API-Footnote-4937248
Ref: API-Footnote-5037319
Ref: API-Footnote-5137399
Ref: API-Footnote-5237462
Ref: API-Footnote-5337525
Ref: API-Footnote-5437598
Ref: API-Footnote-5537659
Ref: API-Footnote-5637724
Ref: API-Footnote-5737785
Ref: API-Footnote-5837847
Ref: API-Footnote-5937907
Ref: API-Footnote-6037980
Ref: API-Footnote-6138052
Ref: API-Footnote-6238113
Ref: API-Footnote-6338174
Ref: API-Footnote-6438250
Ref: API-Footnote-6538323
Ref: API-Footnote-6638393
Ref: API-Footnote-6738452
Ref: API-Footnote-6838514
Ref: API-Footnote-6938576
Ref: API-Footnote-7038637
Ref: API-Footnote-7138697
Ref: API-Footnote-7238768
Ref: API-Footnote-7338830
Ref: API-Footnote-7438892
Ref: API-Footnote-7538966
Node: History39040
Ref: history doc39124
Ref: 7339124
Ref: history changes39124
Ref: 7439124
Ref: history history39124
Ref: 7539124
Node: v16 2 040317
Ref: history v16-2-040382
Ref: 7640382
Node: v16 1 040524
Ref: history v16-1-040605
Ref: 7740605
Ref: v16 1 0-Footnote-140794
Node: v16 0 040844
Ref: history v16-0-040925
Ref: 7840925
Ref: v16 0 0-Footnote-141101
Node: v15 1 241151
Ref: history v15-1-241232
Ref: 7941232
Ref: v15 1 2-Footnote-141350
Node: v15 1 141400
Ref: history v15-1-141481
Ref: 7a41481
Node: v15 1 041553
Ref: history v15-1-041634
Ref: 7b41634
Node: v15 0 141802
Ref: history v15-0-141883
Ref: 7c41883
Node: v15 0 041955
Ref: history v15-0-042036
Ref: 7d42036
Node: v14 0 142194
Ref: history v14-0-142275
Ref: 7e42275
Node: v14 0 042422
Ref: history v14-0-042503
Ref: 7f42503
Ref: v14 0 0-Footnote-143158
Node: v13 3 043208
Ref: history v13-3-043289
Ref: 8043289
Ref: v13 3 0-Footnote-143699
Ref: v13 3 0-Footnote-243749
Ref: v13 3 0-Footnote-343799
Node: v13 2 043849
Ref: history v13-2-043930
Ref: 8143930
Node: v13 1 044005
Ref: history v13-1-044086
Ref: 8244086
Ref: v13 1 0-Footnote-144425
Node: v13 0 044475
Ref: history v13-0-044556
Ref: 8344556
Ref: v13 0 0-Footnote-144778
Node: v12 5 044828
Ref: history v12-5-044909
Ref: 8444909
Ref: v12 5 0-Footnote-145035
Node: v12 4 045085
Ref: history v12-4-045166
Ref: 8545166
Ref: v12 4 0-Footnote-145327
Node: v12 3 045377
Ref: history v12-3-045458
Ref: 8645458
Ref: v12 3 0-Footnote-145663
Node: v12 2 045713
Ref: history v12-2-045794
Ref: 8745794
Ref: v12 2 0-Footnote-145962
Node: v12 1 046012
Ref: history v12-1-046093
Ref: 8846093
Ref: v12 1 0-Footnote-146306
Ref: v12 1 0-Footnote-246356
Node: v12 0 246406
Ref: history v12-0-246486
Ref: 8946486
Node: 12 0 146560
Ref: history id1646639
Ref: 8a46639
Ref: 12 0 1-Footnote-146884
Ref: 12 0 1-Footnote-246934
Node: 11 5 246984
Ref: history id1947062
Ref: 8b47062
Ref: 11 5 2-Footnote-147206
Node: 11 5 147256
Ref: history id2147334
Ref: 8c47334
Node: 11 5 047403
Ref: history id2247481
Ref: 8d47481
Ref: 11 5 0-Footnote-148050
Node: 11 4 148100
Ref: history id2448178
Ref: 8e48178
Ref: 11 4 1-Footnote-148325
Node: 11 4 048375
Ref: history id2648453
Ref: 8f48453
Ref: 11 4 0-Footnote-149129
Ref: 11 4 0-Footnote-249179
Ref: 11 4 0-Footnote-349225
Node: 11 3 049275
Ref: history id2949353
Ref: 9049353
Ref: 11 3 0-Footnote-149601
Node: 11 2 049651
Ref: history id3149729
Ref: 9149729
Ref: 11 2 0-Footnote-150183
Ref: 11 2 0-Footnote-250233
Node: 11 1 050285
Ref: history id3350363
Ref: 9250363
Ref: 11 1 0-Footnote-150837
Ref: 11 1 0-Footnote-250887
Ref: 11 1 0-Footnote-350937
Ref: 11 1 0-Footnote-450987
Ref: 11 1 0-Footnote-551037
Node: 11 0 151087
Ref: history id3951163
Ref: 9351163
Ref: 11 0 1-Footnote-151314
Node: 11 051364
Ref: history id4151438
Ref: 9451438
Node: 10 651507
Ref: history id4251579
Ref: 9551579
Node: 10 551941
Ref: history id4352013
Ref: 9652013
Node: 10 452091
Ref: history id4452165
Ref: 9752165
Ref: 10 4-Footnote-152309
Node: 10 3 152359
Ref: history id4652433
Ref: 9852433
Ref: 10 3 1-Footnote-152621
Node: 10 352671
Ref: history id4852745
Ref: 9952745
Ref: 10 3-Footnote-153209
Node: 10 253259
Ref: history id5053331
Ref: 9a53331
Node: 10 153512
Ref: history id5153584
Ref: 9b53584
Ref: 10 1-Footnote-153717
Ref: 10 1-Footnote-253767
Node: 10 053817
Ref: history id5353888
Ref: 9c53888
Node: 9 153984
Ref: history id5454054
Ref: 9d54054
Ref: 9 1-Footnote-154437
Ref: 9 1-Footnote-254487
Node: 9 054536
Ref: history id5754605
Ref: 9e54605
Node: 8 354752
Ref: history id5854823
Ref: 9f54823
Node: 8 2 155020
Ref: history id5955091
Ref: a055091
Ref: 8 2 1-Footnote-155231
Node: 8 255281
Ref: history id6155354
Ref: a155354
Ref: 8 2-Footnote-155644
Ref: 8 2-Footnote-255699
Node: 8 1 255749
Ref: history id6355822
Ref: a255822
Ref: 8 1 2-Footnote-156002
Node: 8 1 156052
Ref: history id6556125
Ref: a356125
Ref: 8 1 1-Footnote-156274
Node: 8 156324
Ref: history id6756395
Ref: a456395
Ref: 8 1-Footnote-156530
Node: 8 056580
Ref: history id6956649
Ref: a556649
Node: 7 756792
Ref: history id7056863
Ref: a656863
Ref: 7 7-Footnote-158046
Ref: 7 7-Footnote-258095
Ref: 7 7-Footnote-358146
Node: 7 6 258195
Ref: history id7358268
Ref: a758268
Node: 7 6 158358
Ref: history id7458431
Ref: a858431
Ref: 7 6 1-Footnote-158590
Node: 7 658640
Ref: history id7658711
Ref: a958711
Ref: 7 6-Footnote-158922
Ref: 7 6-Footnote-258972
Node: 7 559019
Ref: history id7859088
Ref: aa59088
Ref: 7 5-Footnote-159225
Node: 7 459274
Ref: history id8059343
Ref: ab59343
Ref: 7 4-Footnote-159629
Ref: 7 4-Footnote-259678
Node: 7 359727
Ref: history id8359796
Ref: ac59796
Ref: 7 3-Footnote-159923
Node: 7 259972
Ref: history id8560041
Ref: ad60041
Node: 7 160298
Ref: history id8660367
Ref: ae60367
Ref: 7 1-Footnote-160504
Node: 7 060553
Ref: history id8860622
Ref: af60622
Node: 6 261157
Ref: history id8961226
Ref: b061226
Node: 6 161379
Ref: history id9061448
Ref: b161448
Node: 6 061549
Ref: history id9161618
Ref: b261618
Node: 5 361770
Ref: history id9261839
Ref: b361839
Ref: 5 3-Footnote-162072
Ref: 5 3-Footnote-262121
Node: 5 262170
Ref: history id9562239
Ref: b462239
Ref: 5 2-Footnote-162769
Node: 5 162818
Ref: history id9762887
Ref: b562887
Ref: 5 1-Footnote-163028
Node: 5 063077
Ref: history id9963146
Ref: b663146
Ref: 5 0-Footnote-164761
Node: 4 464810
Ref: history id10064879
Ref: b764879
Ref: 4 4-Footnote-165331
Ref: 4 4-Footnote-265380
Node: 4 365429
Ref: history id10165498
Ref: b865498
Ref: 4 3-Footnote-165629
Node: 4 265678
Ref: history id10265747
Ref: b965747
Node: 4 165913
Ref: history id10365982
Ref: ba65982
Node: 4 066117
Ref: history id10466186
Ref: bb66186
Ref: 4 0-Footnote-166955
Ref: 4 0-Footnote-267004
Node: 3 267053
Ref: history id10567122
Ref: bc67122
Ref: 3 2-Footnote-167249
Node: 3 167298
Ref: history id10667367
Ref: bd67367
Ref: 3 1-Footnote-167570
Node: 3 067619
Ref: history id10767688
Ref: be67688
Node: 2 667766
Ref: history id10867835
Ref: bf67835
Ref: 2 6-Footnote-168322
Ref: 2 6-Footnote-268370
Node: 2 568419
Ref: history id10968476
Ref: c068476
Ref: 2 5-Footnote-168835
Ref: 2 5-Footnote-268883
Ref: 2 5-Footnote-368931
Node: Indices and tables68975
Ref: index indices-and-tables69075
Ref: c169075
Node: Python Module Index69157
Node: Index69317

End Tag Table


Local Variables:
coding: utf-8
End:
