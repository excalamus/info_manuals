This is Low-levelAPIforh5py.info, produced by makeinfo version 6.5 from
Low-levelAPIforh5py.texi.

     Low-level API for h5py 3.1.0, Dec 04, 2020

     Andrew Collette and contributors

     Copyright © 2014, Andrew Collette and contributors

INFO-DIR-SECTION Miscellaneous
START-INFO-DIR-ENTRY
* Low-levelAPIforh5py: (Low-levelAPIforh5py.info). One line description of project.
END-INFO-DIR-ENTRY


   Generated by Sphinx 2.3.1.


File: Low-levelAPIforh5py.info,  Node: Top,  Next: Contents,  Up: (dir)

Low-level API for h5py Documentation
************************************

     Low-level API for h5py 3.1.0, Dec 04, 2020

     Andrew Collette and contributors

     Copyright © 2014, Andrew Collette and contributors

This documentation contains the auto-generated API information for the
h5py 3.1.0 “low-level” interface, a collection of Cython modules which
form the interface to the HDF5 C library.  It’s hosted separately from
our main documentation as it requires autodoc.

     Note: The main docs for h5py are at ‘https://docs.h5py.org’.  The
     docs here are specifically for the h5py low-level interface.

* Menu:

* Contents::
* Python Module Index::
* Index::

 — The Detailed Node Listing —

Contents

* Base object classes::
* Module H5::
* Module H5A::
* Module H5AC::
* Module H5D::
* Module H5DS::
* Module H5F::
* Module H5FD::
* Module H5G::
* Module H5I::
* Module H5L::
* Module H5O::
* Module H5P::
* Module H5PL::
* Module H5R::
* Module H5S::
* Module H5T::
* Module H5Z::

Module H5

* Library API::
* Configuration class::
* Module constants::

Module H5A

* Functional API::
* Info objects::
* Attribute objects::

Module H5D

* Functional API: Functional API<2>.
* Dataset Objects::
* Module constants: Module constants<2>.

Module constants

* Storage strategies::
* Allocation times::
* Allocation status::
* Fill time::
* Fill values::

Module H5F

* Functional API: Functional API<3>.
* File objects::
* Module constants: Module constants<3>.

Module constants

* File access flags::
* File close strength::
* File scope::
* Object types::
* Library version bounding::

Module H5FD

* Module constants: Module constants<4>.

Module constants

* Memory usage types for MULTI file driver::
* Data transfer modes for MPIO driver::
* File drivers types::
* Logging driver settings::

Module H5G

* Functional API: Functional API<4>.
* Info objects: Info objects<2>.
* Group objects::
* Module constants: Module constants<5>.

Module constants

* Object type codes::
* Link type codes::

Module H5I

* Functional API: Functional API<5>.
* Module constants: Module constants<6>.

Module constants

* Identifier classes::

Module H5L

* Linkproxy objects::
* Module constants: Module constants<7>.

Module constants

* Link types::

Module H5O

* Functional API: Functional API<6>.
* Info classes::
* Module constants: Module constants<8>.

Module constants

* Object types: Object types<2>.
* Copy flags::

Module H5P

* Functional API: Functional API<7>.
* Base classes::
* File creation::
* File access::
* Dataset creation::
* Dataset access::
* Dataset transfer::
* Link creation::
* Link access::
* Group creation::
* Datatype creation::
* Module constants: Module constants<9>.

Module constants

* Predefined classes::
* Order tracking flags::

Module H5R

* Functional API: Functional API<8>.
* Reference classes::
* API constants::

Module H5S

* Functional API: Functional API<9>.
* Dataspace objects::
* Module constants: Module constants<10>.

Module constants

* Dataspace class codes::
* Selection codes::
* Existing selection type::

Module H5T

* Functions specific to h5py::
* Functional API: Functional API<10>.
* Type classes::
* Predefined Datatypes::
* Module constants: Module constants<11>.

Type classes

* Atomic classes::
* Strings::
* Compound Types::
* Other types::

Predefined Datatypes

* Floating-point::
* Integer types::
* Reference types::
* String types::
* Python object type::

Module constants

* Datatype class codes::
* API Constants::

Module H5Z

* Module constants: Module constants<12>.

Module constants

* Predefined filters::
* Filter flags::
* SZIP-specific options::
* Scale/offset-specific options::
* Other flags::



File: Low-levelAPIforh5py.info,  Node: Contents,  Next: Python Module Index,  Prev: Top,  Up: Top

1 Contents
**********

* Menu:

* Base object classes::
* Module H5::
* Module H5A::
* Module H5AC::
* Module H5D::
* Module H5DS::
* Module H5F::
* Module H5FD::
* Module H5G::
* Module H5I::
* Module H5L::
* Module H5O::
* Module H5P::
* Module H5PL::
* Module H5R::
* Module H5S::
* Module H5T::
* Module H5Z::


File: Low-levelAPIforh5py.info,  Node: Base object classes,  Next: Module H5,  Up: Contents

1.1 Base object classes
=======================

Implements ‘ObjectID’ base class.

 -- Class: h5py._objects.ObjectID

          Represents an HDF5 identifier.

     attributes: cdef object __weakref__ cdef readonly hid_t id cdef
     public int locked # Cannot be closed, explicitly or auto cdef
     object _hash cdef size_t _pyid


File: Low-levelAPIforh5py.info,  Node: Module H5,  Next: Module H5A,  Prev: Base object classes,  Up: Contents

1.2 Module H5
=============

* Menu:

* Library API::
* Configuration class::
* Module constants::


File: Low-levelAPIforh5py.info,  Node: Library API,  Next: Configuration class,  Up: Module H5

1.2.1 Library API
-----------------

 -- Function: h5py.h5.get_config () -> H5PYConfig

     Get a reference to the global library configuration object.

 -- Function: h5py.h5.get_libversion () -> TUPLE (major, minor, release)

     Retrieve the HDF5 library version as a 3-tuple.


File: Low-levelAPIforh5py.info,  Node: Configuration class,  Next: Module constants,  Prev: Library API,  Up: Module H5

1.2.2 Configuration class
-------------------------

 -- Class: h5py.h5.H5PYConfig

     Provides runtime access to global library settings.  You retrieve
     the master copy of this object by calling h5py.get_config().

     complex_names (tuple, r/w)

          Settable 2-tuple controlling how complex numbers are saved.
          Defaults to (‘r’,’i’).

     bool_names (tuple, r/w)

          Settable 2-tuple controlling the HDF5 enum names used for
          boolean values.  Defaults to (‘FALSE’, ‘TRUE’) for values 0
          and 1.


File: Low-levelAPIforh5py.info,  Node: Module constants,  Prev: Configuration class,  Up: Module H5

1.2.3 Module constants
----------------------

 -- Data: h5py.h5.INDEX_NAME

     Resolve indices in alphanumeric order

 -- Data: h5py.h5.INDEX_CRT_ORDER

     Resolve indices in order of object creation.  Not always available.

 -- Data: h5py.h5.ITER_NATIVE

     Traverse index in the fastest possible order.  No particular
     pattern is guaranteed.

 -- Data: h5py.h5.ITER_INC

     Traverse index in increasing order

 -- Data: h5py.h5.ITER_DEC

     Traverse index in decreasing order


File: Low-levelAPIforh5py.info,  Node: Module H5A,  Next: Module H5AC,  Prev: Module H5,  Up: Contents

1.3 Module H5A
==============

Provides access to the low-level HDF5 “H5A” attribute interface.

* Menu:

* Functional API::
* Info objects::
* Attribute objects::


File: Low-levelAPIforh5py.info,  Node: Functional API,  Next: Info objects,  Up: Module H5A

1.3.1 Functional API
--------------------

 -- Function: h5py.h5a.create (ObjectID loc, STRING name, TypeID tid,
          SpaceID space, **kwds) -> AttrID

     Create a new attribute, attached to an existing object.

     STRING obj_name (“.”)

          Attach attribute to this group member instead

     PropID lapl

          *note Link access property list: 29. for obj_name

 -- Function: h5py.h5a.open (ObjectID loc, STRING name=, INT index=,
          **kwds) -> AttrID

     Open an attribute attached to an existing object.  You must specify
     exactly one of either name or idx.  Keywords are:

     STRING obj_name (“.”)

          Attribute is attached to this group member

     PropID lapl (None)

          *note Link access property list: 29. for obj_name

     INT index_type (*note h5.INDEX_NAME: 20.)

     INT order (*note h5.ITER_INC: 23.)

 -- Function: h5py.h5a.exists (ObjectID loc, STRING name, **kwds) ->
          BOOL

     Determine if an attribute is attached to this object.  Keywords:

     STRING obj_name (“.”)

          Look for attributes attached to this group member

     PropID lapl (None):

          *note Link access property list: 29. for obj_name

 -- Function: h5py.h5a.rename (ObjectID loc, STRING name, STRING
          new_name, **kwds)

     Rename an attribute.  Keywords:

     STRING obj_name (“.”)

          Attribute is attached to this group member

     PropID lapl (None)

          *note Link access property list: 29. for obj_name

 -- Function: h5py.h5a.delete (ObjectID loc, STRING name=, INT index=,
          **kwds)

     Remove an attribute from an object.  Specify exactly one of “name”
     or “index”.  Keyword-only arguments:

     STRING obj_name (“.”)

          Attribute is attached to this group member

     PropID lapl (None)

          *note Link access property list: 29. for obj_name

     INT index_type (*note h5.INDEX_NAME: 20.)

     INT order (*note h5.ITER_INC: 23.)

 -- Function: h5py.h5a.get_num_attrs (ObjectID loc) -> INT

     Determine the number of attributes attached to an HDF5 object.

 -- Function: h5py.h5a.get_info (ObjectID loc, STRING name=, INT index=,
          **kwds) -> AttrInfo

     Get information about an attribute, in one of two ways:

       1. If you have the attribute identifier, just pass it in

       2. If you have the parent object, supply it and exactly one of
          either name or index.

     STRING obj_name (“.”)

          Use this group member instead

     PropID lapl (None)

          *note Link access property list: 29. for obj_name

     INT index_type (*note h5.INDEX_NAME: 20.)

          Which index to use

     INT order (*note h5.ITER_INC: 23.)

          What order the index is in

 -- Function: h5py.h5a.iterate (ObjectID loc, CALLABLE func, INT
          index=0, **kwds) -> <Return value from func>

     Iterate a callable (function, method or callable object) over the
     attributes attached to this object.  You callable should have the
     signature:

          func(STRING name) => Result

     or if the keyword argument “info” is True:

          func(STRING name, AttrInfo info) => Result

     Returning None continues iteration; returning anything else aborts
     iteration and returns that value.  Keywords:

     BOOL info (False)

          Callback is func(STRING name, AttrInfo info), not func(STRING
          name)

     INT index_type (*note h5.INDEX_NAME: 20.)

          Which index to use

     INT order (*note h5.ITER_INC: 23.)

          Index order to use


File: Low-levelAPIforh5py.info,  Node: Info objects,  Next: Attribute objects,  Prev: Functional API,  Up: Module H5A

1.3.2 Info objects
------------------

 -- Class: h5py.h5a.AttrInfo

      -- Attribute: corder

          Creation order

      -- Attribute: corder_valid

          Indicates if the creation order is valid

      -- Attribute: cset

          Character set of attribute name (integer typecode from *note
          h5t: 10.)

      -- Attribute: data_size

          Size of raw data


File: Low-levelAPIforh5py.info,  Node: Attribute objects,  Prev: Info objects,  Up: Module H5A

1.3.3 Attribute objects
-----------------------

 -- Class: h5py.h5a.AttrID

     Logical representation of an HDF5 attribute identifier.

     Objects of this class can be used in any HDF5 function call which
     expects an attribute identifier.  Additionally, all ‘H5A*’
     functions which always take an attribute instance as the first
     argument are presented as methods of this class.

        * Hashable: No

        * Equality: Identifier comparison

      -- Attribute: dtype

          A Numpy-stype dtype object representing the attribute’s
          datatype

      -- Attribute: get_name -> STRING name

          Determine the name of this attribute.

      -- Attribute: get_space -> SpaceID

          Create and return a copy of the attribute’s dataspace.

      -- Attribute: get_storage_size -> INT

          Get the amount of storage required for this attribute.

      -- Attribute: get_type -> TypeID

          Create and return a copy of the attribute’s datatype.

      -- Attribute: name

          The attribute’s name

      -- Attribute: read (NDARRAY arr, TypeID mtype=None)

          Read the attribute data into the given Numpy array.  Note that
          the Numpy array must have the same shape as the HDF5
          attribute, and a conversion-compatible datatype.

          The Numpy array must be writable and C-contiguous.  If this is
          not the case, the read will fail with an exception.

          If provided, the HDF5 *note TypeID: 40. mtype will override
          the array’s dtype.

      -- Attribute: shape

          A Numpy-style shape tuple representing the attribute’s
          dataspace

      -- Attribute: write (NDARRAY arr)

          Write the contents of a Numpy array to the attribute.  Note
          that the Numpy array must have the same shape as the HDF5
          attribute, and a conversion-compatible datatype.

          The Numpy array must be C-contiguous.  If this is not the
          case, the write will fail with an exception.


File: Low-levelAPIforh5py.info,  Node: Module H5AC,  Next: Module H5D,  Prev: Module H5A,  Up: Contents

1.4 Module H5AC
===============

Low-level HDF5 “‘H5AC’” cache configuration interface.

 -- Class: h5py.h5ac.CacheConfig

     Represents H5AC_cache_config_t objects

      -- Attribute: apply_empty_reserve

      -- Attribute: apply_max_decrement

      -- Attribute: apply_max_increment

      -- Attribute: decr_mode

      -- Attribute: decrement

      -- Attribute: dirty_bytes_threshold

      -- Attribute: empty_reserve

      -- Attribute: epoch_length

      -- Attribute: epochs_before_eviction

      -- Attribute: evictions_enabled

      -- Attribute: flash_incr_mode

      -- Attribute: flash_multiple

      -- Attribute: flash_threshold

      -- Attribute: incr_mode

      -- Attribute: increment

      -- Attribute: initial_size

      -- Attribute: lower_hr_threshold

      -- Attribute: max_decrement

      -- Attribute: max_increment

      -- Attribute: max_size

      -- Attribute: min_clean_fraction

      -- Attribute: min_size

      -- Attribute: rpt_fcn_enabled

      -- Attribute: set_initial_size

      -- Attribute: upper_hr_threshold

      -- Attribute: version


File: Low-levelAPIforh5py.info,  Node: Module H5D,  Next: Module H5DS,  Prev: Module H5AC,  Up: Contents

1.5 Module H5D
==============

Provides access to the low-level HDF5 “H5D” dataset interface.

* Menu:

* Functional API: Functional API<2>.
* Dataset Objects::
* Module constants: Module constants<2>.


File: Low-levelAPIforh5py.info,  Node: Functional API<2>,  Next: Dataset Objects,  Up: Module H5D

1.5.1 Functional API
--------------------

 -- Function: h5py.h5d.open (ObjectID loc, STRING name, PropID
          dapl=None) -> DatasetID

     Open an existing dataset attached to a group or file object, by
     name.

     If specified, dapl may be a dataset access property list.

 -- Function: h5py.h5d.create (objectID loc, STRING name or None, TypeID
          tid, SpaceID space, PropDCID dcpl=None, PropID lcpl=None) ->
          DatasetID

     Create a new dataset.  If “name” is None, the dataset will be
     anonymous.


File: Low-levelAPIforh5py.info,  Node: Dataset Objects,  Next: Module constants<2>,  Prev: Functional API<2>,  Up: Module H5D

1.5.2 Dataset Objects
---------------------

 -- Class: h5py.h5d.DatasetID

     Represents an HDF5 dataset identifier.

     Objects of this class may be used in any HDF5 function which
     expects a dataset identifier.  Also, all H5D* functions which take
     a dataset instance as their first argument are presented as methods
     of this class.

     Properties: dtype: Numpy dtype representing the dataset type shape:
     Numpy-style shape tuple representing the dataspace rank: Integer
     giving dataset rank

        * Hashable: Yes, unless anonymous

        * Equality: True HDF5 identity if unless anonymous

      -- Attribute: dtype

          Numpy dtype object representing the dataset type

      -- Attribute: extend (TUPLE shape)

          Extend the given dataset so it’s at least as big as “shape”.
          Note that a dataset may only be extended up to the maximum
          dimensions of its dataspace, which are fixed when the dataset
          is created.

      -- Attribute: flush

          no return

          Flushes all buffers associated with a dataset to disk.

          This function causes all buffers associated with a dataset to
          be immediately flushed to disk without removing the data from
          the cache.

          Use this in ‘SWMR’ write mode to allow readers to be updated
          with the dataset changes.

          Feature requires: 1.9.178 HDF5

      -- Attribute: get_access_plist -> PropDAID

          Create an return a new copy of the dataset access property
          list.

      -- Attribute: get_chunk_info (hsize_t index, SpaceID space=None)
               -> StoreInfo

          Retrieve storage information about a chunk specified by its
          index.

          Feature requires: HDF5 1.10.5

          New in version 3.0.

      -- Attribute: get_chunk_info_by_coord (TUPLE chunk_offset) ->
               StoreInfo

          Retrieve information about a chunk specified by the array
          address of the chunk’s first element in each dimension.

          Feature requires: HDF5 1.10.5

          New in version 3.0.

      -- Attribute: get_create_plist -> PropDCID

          Create an return a new copy of the dataset creation property
          list used when this dataset was created.

      -- Attribute: get_num_chunks (SpaceID space=None) -> INT
               num_chunks

          Retrieve the number of chunks that have nonempty intersection
          with a specified dataspace.  Currently, this function only
          gets the number of all written chunks, regardless of the
          dataspace.

          Feature requires: HDF5 1.10.5

          New in version 3.0.

      -- Attribute: get_offset -> LONG offset or None

          Get the offset of this dataset in the file, in bytes, or None
          if it doesn’t have one.  This is always the case for datasets
          which use chunked storage, compact datasets, and datasets for
          which space has not yet been allocated in the file.

      -- Attribute: get_space -> SpaceID

          Create and return a new copy of the dataspace for this
          dataset.

      -- Attribute: get_space_status -> INT space_status_code

          Determine if space has been allocated for a dataset.  Return
          value is one of:

             * ‘SPACE_STATUS_NOT_ALLOCATED’

             * ‘SPACE_STATUS_PART_ALLOCATED’

             * ‘SPACE_STATUS_ALLOCATED’

      -- Attribute: get_storage_size -> LONG storage_size

          Report the size of storage, in bytes, that is allocated in the
          file for the dataset’s raw data.  The reported amount is the
          storage allocated in the written file, which will typically
          differ from the space required to hold a dataset in working
          memory (any associated HDF5 metadata is excluded).

          For contiguous datasets, the returned size equals the current
          allocated size of the raw data.  For unfiltered chunked
          datasets, the returned size is the number of allocated chunks
          times the chunk size.  For filtered chunked datasets, the
          returned size is the space required to store the filtered
          data.

      -- Attribute: get_type -> TypeID

          Create and return a new copy of the datatype for this dataset.

      -- Attribute: rank

          Integer giving the dataset rank (0 = scalar)

      -- Attribute: read (SpaceID mspace, SpaceID fspace, NDARRAY
               arr_obj, TypeID mtype=None, PropDXID dxpl=None)

          Read data from an HDF5 dataset into a Numpy array.

          It is your responsibility to ensure that the memory dataspace
          provided is compatible with the shape of the Numpy array.
          Since a wide variety of dataspace configurations are possible,
          this is not checked.  You can easily crash Python by reading
          in data from too large a dataspace.

          If a memory datatype is not specified, one will be
          auto-created based on the array’s dtype.

          The provided Numpy array must be writable and C-contiguous.
          If this is not the case, ValueError will be raised and the
          read will fail.  Keyword dxpl may be a *note dataset transfer
          property list: 76.

      -- Method: read_direct_chunk (offsets, PropID dxpl=None)

          Reads data to a bytes array directly from a chunk at position
          specified by the ‘offsets’ argument and bypasses any filters
          HDF5 would normally apply to the written data.  However, the
          written data may be compressed or not.

          Returns a tuple containing the ‘filter_mask’ and the bytes
          data which are the raw data storing this chuck.

          ‘filter_mask’ is a bit field of up to 32 values.  It records
          which filters have been applied to this chunk, of the filter
          pipeline defined for that dataset.  Each bit set to ‘1’ means
          that the filter in the corresponding position in the pipeline
          was not applied to compute the raw data.  So the default value
          of ‘0’ means that all defined filters have been applied to the
          raw data.

          Feature requires: 1.10.2 HDF5

      -- Attribute: refresh

          no return

          Refreshes all buffers associated with a dataset.

          This function causes all buffers associated with a dataset to
          be cleared and immediately re-loaded with updated contents
          from disk.

          This function essentially closes the dataset, evicts all
          metadata associated with it from the cache, and then re-opens
          the dataset.  The reopened dataset is automatically
          re-registered with the same ‘ID’.

          Use this in ‘SWMR’ read mode to poll for dataset changes.

          Feature requires: 1.9.178 HDF5

      -- Attribute: set_extent (TUPLE shape)

          Set the size of the dataspace to match the given shape.  If
          the new size is larger in any dimension, it must be compatible
          with the maximum dataspace size.

      -- Attribute: shape

          Numpy-style shape tuple representing the dataspace

      -- Attribute: write (SpaceID mspace, SpaceID fspace, NDARRAY
               arr_obj, TypeID mtype=None, PropDXID dxpl=None)

          Write data from a Numpy array to an HDF5 dataset.  Keyword
          dxpl may be a *note dataset transfer property list: 76.

          It is your responsibility to ensure that the memory dataspace
          provided is compatible with the shape of the Numpy array.
          Since a wide variety of dataspace configurations are possible,
          this is not checked.  You can easily crash Python by writing
          data from too large a dataspace.

          If a memory datatype is not specified, one will be
          auto-created based on the array’s dtype.

          The provided Numpy array must be C-contiguous.  If this is not
          the case, ValueError will be raised and the read will fail.

      -- Method: write_direct_chunk (offsets, data, uint32_t
               filter_mask=0x00000000, PropID dxpl=None)

          This function bypasses any filters HDF5 would normally apply
          to written data.  However, calling code may apply filters
          (e.g.  gzip compression) itself before writing the data.

          ‘data’ is a Python object that implements the Py_buffer
          interface.  In case of a ndarray the shape and dtype are
          ignored.  It’s the user’s responsibility to make sure they are
          compatible with the dataset.

          ‘filter_mask’ is a bit field of up to 32 values.  It records
          which filters have been applied to this chunk, of the filter
          pipeline defined for that dataset.  Each bit set to ‘1’ means
          that the filter in the corresponding position in the pipeline
          was not applied.  So the default value of ‘0’ means that all
          defined filters have been applied to the data before calling
          this function.

          Feature requires: 1.8.11 HDF5


File: Low-levelAPIforh5py.info,  Node: Module constants<2>,  Prev: Dataset Objects,  Up: Module H5D

1.5.3 Module constants
----------------------

* Menu:

* Storage strategies::
* Allocation times::
* Allocation status::
* Fill time::
* Fill values::


File: Low-levelAPIforh5py.info,  Node: Storage strategies,  Next: Allocation times,  Up: Module constants<2>

1.5.3.1 Storage strategies
..........................

 -- Data: h5py.h5d.COMPACT

 -- Data: h5py.h5d.CONTIGUOUS

 -- Data: h5py.h5d.CHUNKED


File: Low-levelAPIforh5py.info,  Node: Allocation times,  Next: Allocation status,  Prev: Storage strategies,  Up: Module constants<2>

1.5.3.2 Allocation times
........................

 -- Data: h5py.h5d.ALLOC_TIME_DEFAULT

 -- Data: h5py.h5d.ALLOC_TIME_LATE

 -- Data: h5py.h5d.ALLOC_TIME_EARLY

 -- Data: h5py.h5d.ALLOC_TIME_INCR


File: Low-levelAPIforh5py.info,  Node: Allocation status,  Next: Fill time,  Prev: Allocation times,  Up: Module constants<2>

1.5.3.3 Allocation status
.........................

 -- Data: h5py.h5d.SPACE_STATUS_NOT_ALLOCATED

 -- Data: h5py.h5d.SPACE_STATUS_PART_ALLOCATED

 -- Data: h5py.h5d.SPACE_STATUS_ALLOCATED


File: Low-levelAPIforh5py.info,  Node: Fill time,  Next: Fill values,  Prev: Allocation status,  Up: Module constants<2>

1.5.3.4 Fill time
.................

 -- Data: h5py.h5d.FILL_TIME_ALLOC

 -- Data: h5py.h5d.FILL_TIME_NEVER

 -- Data: h5py.h5d.FILL_TIME_IFSET


File: Low-levelAPIforh5py.info,  Node: Fill values,  Prev: Fill time,  Up: Module constants<2>

1.5.3.5 Fill values
...................

 -- Data: h5py.h5d.FILL_VALUE_UNDEFINED

 -- Data: h5py.h5d.FILL_VALUE_DEFAULT

 -- Data: h5py.h5d.FILL_VALUE_USER_DEFINED


File: Low-levelAPIforh5py.info,  Node: Module H5DS,  Next: Module H5F,  Prev: Module H5D,  Up: Contents

1.6 Module H5DS
===============

Low-level HDF5 “‘H5DS’” Dimension Scale interface.

 -- Attribute: h5py.h5ds.attach_scale (DatasetID dset, DatasetID dscale,
          UINT idx)

     Attach Dimension Scale dscale to Dimension idx of Dataset dset.

 -- Attribute: h5py.h5ds.detach_scale (DatasetID dset, DatasetID dscale,
          UINT idx)

     Detach Dimension Scale dscale from the Dimension idx of Dataset
     dset.

 -- Attribute: h5py.h5ds.get_label (DatasetID dset, UINT idx) -> STRING
          name_of_label

     Read the label for Dimension idx of Dataset dset into buffer label.

 -- Attribute: h5py.h5ds.get_num_scales (DatasetID dset, UINT dim) ->
          INT number_of_scales

     Determines how many Dimension Scales are attached to Dimension dim
     of Dataset dset.

 -- Attribute: h5py.h5ds.get_scale_name (DatasetID dscale) -> STRING
          name_of_scale

     Retrieves name of Dimension Scale dscale.

 -- Attribute: h5py.h5ds.is_attached (DatasetID dset, DatasetID dscale,
          UINT idx) -> BOOL

     Report if Dimension Scale dscale is currently attached to Dimension
     idx of Dataset dset.

 -- Attribute: h5py.h5ds.is_scale (DatasetID dset) -> BOOL

     Determines whether dset is a dimension scale.

 -- Attribute: h5py.h5ds.iterate (DatasetID loc, UINT dim, CALLABLE
          func, UINT startidx=0) -> Return value from func

     Iterate a callable (function, method or callable object) over the
     members of a group.  Your callable should have the signature:

          func(STRING name) => Result

     Returning None continues iteration; returning anything else aborts
     iteration and returns that value.  Keywords:

 -- Attribute: h5py.h5ds.set_label (DatasetID dset, UINT idx, STRING
          label)

     Set label for the Dimension idx of Dataset dset to the value label.

 -- Attribute: h5py.h5ds.set_scale (DatasetID dset, STRING dimname)

     Convert dataset dset to a dimension scale, with optional name
     dimname.


File: Low-levelAPIforh5py.info,  Node: Module H5F,  Next: Module H5FD,  Prev: Module H5DS,  Up: Contents

1.7 Module H5F
==============

Low-level operations on HDF5 file objects.

* Menu:

* Functional API: Functional API<3>.
* File objects::
* Module constants: Module constants<3>.


File: Low-levelAPIforh5py.info,  Node: Functional API<3>,  Next: File objects,  Up: Module H5F

1.7.1 Functional API
--------------------

 -- Function: h5py.h5f.open (STRING name, UINT flags=ACC_RDWR, PropFAID
          fapl=None) -> FileID

     Open an existing HDF5 file.  Keyword “flags” may be:

     *note ACC_RDWR: a4.

          Open in read-write mode

     *note ACC_RDONLY: a5.

          Open in readonly mode

     Keyword fapl may be a *note file access property list: a6.

 -- Function: h5py.h5f.create (STRING name, INT flags=ACC_TRUNC,
          PropFCID fcpl=None, PropFAID fapl=None) -> FileID

     Create a new HDF5 file.  Keyword “flags” may be:

     *note ACC_TRUNC: a8.

          Truncate an existing file, discarding its data

     *note ACC_EXCL: a9.

          Fail if a conflicting file exists

     To keep the behavior in line with that of Python’s built-in
     functions, the default is *note ACC_TRUNC: a8.  Be careful!

 -- Function: h5py.h5f.flush (ObjectID obj, INT scope=SCOPE_LOCAL)

     Tell the HDF5 library to flush file buffers to disk.  “obj” may be
     the file identifier, or the identifier of any object residing in
     the file.  Keyword “scope” may be:

     *note SCOPE_LOCAL: ab.

          Flush only the given file

     *note SCOPE_GLOBAL: ac.

          Flush the entire virtual file

 -- Function: h5py.h5f.is_hdf5 (STRING name) -> BOOL

     Determine if a given file is an HDF5 file.  Note this raises an
     exception if the file doesn’t exist.

 -- Function: h5py.h5f.mount (ObjectID loc, STRING name, FileID fid)

     Mount an open file on the group “name” under group loc_id.  Note
     that “name” must already exist.

 -- Function: h5py.h5f.unmount (ObjectID loc, STRING name)

     Unmount a file, mounted at “name” under group loc_id.

 -- Function: h5py.h5f.open_file_image (STRING image, INT flags=0) ->
          FileID

     Load a new HDF5 file into memory.  Keyword “flags” may be:

     ‘FILE_IMAGE_OPEN_RW’

          Specifies opening the file image in read/write mode.

 -- Function: h5py.h5f.get_name (ObjectID obj) -> STRING

     Determine the name of the file in which the specified object
     resides.

 -- Function: h5py.h5f.get_obj_count (OBJECT where=OBJ_ALL,
          types=OBJ_ALL) -> INT

     Get the number of open objects.

     where

          Either a *note FileID: b3. instance representing an HDF5 file,
          or the special constant *note OBJ_ALL: b4, to count objects in
          all files.

     type

          Specify what kinds of object to include.  May be one of *note
          OBJ*: b5, or any bitwise combination (e.g.  ‘OBJ_FILE |
          OBJ_ATTR’).

          The special value *note OBJ_ALL: b4. matches all object types,
          and *note OBJ_LOCAL: b6. will only match objects opened
          through a specific identifier.

 -- Function: h5py.h5f.get_obj_ids (OBJECT where=OBJ_ALL, types=OBJ_ALL)
          -> LIST

     Get a list of identifier instances for open objects.

     where

          Either a *note FileID: b3. instance representing an HDF5 file,
          or the special constant *note OBJ_ALL: b4, to list objects in
          all files.

     type

          Specify what kinds of object to include.  May be one of *note
          OBJ*: b5, or any bitwise combination (e.g.  ‘OBJ_FILE |
          OBJ_ATTR’).

          The special value *note OBJ_ALL: b4. matches all object types,
          and *note OBJ_LOCAL: b6. will only match objects opened
          through a specific identifier.


File: Low-levelAPIforh5py.info,  Node: File objects,  Next: Module constants<3>,  Prev: Functional API<3>,  Up: Module H5F

1.7.2 File objects
------------------

 -- Class: h5py.h5f.FileID

     Represents an HDF5 file identifier.

     These objects wrap a small portion of the H5F interface; all the
     H5F functions which can take arbitrary objects in addition to file
     identifiers are provided as functions in the *note h5f: 6. module.

     Properties:

        * name: File name on disk

     Behavior:

        * Hashable: Yes, unique to the file (but not the access mode)

        * Equality: Hash comparison

      -- Attribute: close

          Terminate access through this identifier.  Note that depending
          on what property list settings were used to open the file, the
          physical file might not be closed until all remaining open
          identifiers are freed.

      -- Attribute: get_access_plist -> PropFAID

          Retrieve a copy of the *note file access property list: a6.
          which manages access to this file.

      -- Attribute: get_create_plist -> PropFCID

          Retrieve a copy of the *note file creation property list: bc.
          used to create this file.

      -- Attribute: get_file_image -> BYTES

          Retrieves a copy of the image of an existing, open file.

          Feature requires: 1.8.9

      -- Attribute: get_filesize -> LONG size

          Determine the total size (in bytes) of the HDF5 file,
          including any user block.

      -- Attribute: get_freespace -> LONG freespace

          Determine the amount of free space in this file.  Note that
          this only tracks free space until the file is closed.

      -- Attribute: get_intent -> INT

          Determine the file’s write intent, either of: -
          ‘H5F_ACC_RDONLY’ - ‘H5F_ACC_RDWR’

      -- Attribute: get_mdc_config -> CacheConfig Returns an object that
               stores all the information about the meta-data cache
               configuration. This config is created for every file
               in-memory with the default cache config values, it is not
               saved to the hdf5 file.

      -- Attribute: get_mdc_hit_rate -> DOUBLE

          Retrieve the cache hit rate

      -- Attribute: get_mdc_size -> (max_size, min_clean_size, cur_size,
               cur_num_entries) [SIZE_T, SIZE_T, SIZE_T, INT]

          Obtain current metadata cache size data for specified file.

      -- Attribute: get_vfd_handle (PropFAID) -> INT

          Retrieve the file handle used by the virtual file driver.

          This may not be supported for all file drivers, and the
          meaning of the return value may depend on the file driver.

          The ‘family’ and ‘multi’ drivers access multiple files, and a
          file access property list (fapl) can be used to indicate which
          to access, with H5Pset_family_offset or H5Pset_multi_type.

      -- Attribute: name

          File name on disk (according to h5f.get_name())

      -- Attribute: reopen -> FileID

          Retrieve another identifier for a file (which must still be
          open).  The new identifier is guaranteed to neither be mounted
          nor contain a mounted file.

      -- Attribute: reset_mdc_hit_rate_stats

          no return

          rests the hit-rate statistics

      -- Attribute: set_mdc_config (CacheConfig) -> None Sets the
               meta-data cache configuration for a file. This config is
               created for every file in-memory with the default config
               values, it is not saved to the hdf5 file. Any change to
               the configuration lives until the hdf5 file is closed.

      -- Attribute: start_swmr_write

          no return

          Enables ‘SWMR’ writing mode for a file.

          This function will activate ‘SWMR’ writing mode for a file
          associated with file_id.  This routine will prepare and ensure
          the file is safe for ‘SWMR’ writing as follows:

                  * Check that the file is opened with write access
                    (H5F_ACC_RDWR).

                  * Check that the file is opened with the latest
                    library format to ensure data structures with
                    check-summed metadata are used.

                  * Check that the file is not already marked in ‘SWMR’
                    writing mode.

                  * Enable reading retries for check-summed metadata to
                    remedy possible checksum failures from reading
                    inconsistent metadata on a system that is not
                    atomic.

                  * Turn off usage of the library’s accumulator to avoid
                    possible ordering problem on a system that is not
                    atomic.

                  * Perform a flush of the file’s data buffers and
                    metadata to set a consistent state for starting
                    ‘SWMR’ write operations.

          Library objects are groups, datasets, and committed datatypes.
          For the current implementation, groups and datasets can remain
          open when activating ‘SWMR’ writing mode, but not committed
          datatypes.  Attributes attached to objects cannot remain open.

          Feature requires: 1.9.178 HDF5


File: Low-levelAPIforh5py.info,  Node: Module constants<3>,  Prev: File objects,  Up: Module H5F

1.7.3 Module constants
----------------------

* Menu:

* File access flags::
* File close strength::
* File scope::
* Object types::
* Library version bounding::


File: Low-levelAPIforh5py.info,  Node: File access flags,  Next: File close strength,  Up: Module constants<3>

1.7.3.1 File access flags
.........................

 -- Data: h5py.h5f.ACC_TRUNC

     Create/truncate file

 -- Data: h5py.h5f.ACC_EXCL

     Create file if it doesn’t exist; fail otherwise

 -- Data: h5py.h5f.ACC_RDWR

     Open in read/write mode

 -- Data: h5py.h5f.ACC_RDONLY

     Open in read-only mode


File: Low-levelAPIforh5py.info,  Node: File close strength,  Next: File scope,  Prev: File access flags,  Up: Module constants<3>

1.7.3.2 File close strength
...........................

 -- Data: h5py.h5f.CLOSE_WEAK

 -- Data: h5py.h5f.CLOSE_SEMI

 -- Data: h5py.h5f.CLOSE_STRONG

 -- Data: h5py.h5f.CLOSE_DEFAULT


File: Low-levelAPIforh5py.info,  Node: File scope,  Next: Object types,  Prev: File close strength,  Up: Module constants<3>

1.7.3.3 File scope
..................

 -- Data: h5py.h5f.SCOPE_LOCAL

 -- Data: h5py.h5f.SCOPE_GLOBAL


File: Low-levelAPIforh5py.info,  Node: Object types,  Next: Library version bounding,  Prev: File scope,  Up: Module constants<3>

1.7.3.4 Object types
....................

 -- Data: h5py.h5f.OBJ_FILE

 -- Data: h5py.h5f.OBJ_DATASET

 -- Data: h5py.h5f.OBJ_GROUP

 -- Data: h5py.h5f.OBJ_DATATYPE

 -- Data: h5py.h5f.OBJ_ATTR

 -- Data: h5py.h5f.OBJ_ALL

 -- Data: h5py.h5f.OBJ_LOCAL


File: Low-levelAPIforh5py.info,  Node: Library version bounding,  Prev: Object types,  Up: Module constants<3>

1.7.3.5 Library version bounding
................................

 -- Data: h5py.h5f.LIBVER_EARLIEST

 -- Data: h5py.h5f.LIBVER_V18

 -- Data: h5py.h5f.LIBVER_V110

 -- Data: h5py.h5f.LIBVER_LATEST


File: Low-levelAPIforh5py.info,  Node: Module H5FD,  Next: Module H5G,  Prev: Module H5F,  Up: Contents

1.8 Module H5FD
===============

File driver constants (H5FD*).

* Menu:

* Module constants: Module constants<4>.


File: Low-levelAPIforh5py.info,  Node: Module constants<4>,  Up: Module H5FD

1.8.1 Module constants
----------------------

* Menu:

* Memory usage types for MULTI file driver::
* Data transfer modes for MPIO driver::
* File drivers types::
* Logging driver settings::


File: Low-levelAPIforh5py.info,  Node: Memory usage types for MULTI file driver,  Next: Data transfer modes for MPIO driver,  Up: Module constants<4>

1.8.1.1 Memory usage types for MULTI file driver
................................................

 -- Data: h5py.h5fd.MEM_DEFAULT

 -- Data: h5py.h5fd.MEM_SUPER

 -- Data: h5py.h5fd.MEM_BTREE

 -- Data: h5py.h5fd.MEM_DRAW

 -- Data: h5py.h5fd.MEM_GHEAP

 -- Data: h5py.h5fd.MEM_LHEAP

 -- Data: h5py.h5fd.MEM_OHDR

 -- Data: h5py.h5fd.MEM_NTYPES


File: Low-levelAPIforh5py.info,  Node: Data transfer modes for MPIO driver,  Next: File drivers types,  Prev: Memory usage types for MULTI file driver,  Up: Module constants<4>

1.8.1.2 Data transfer modes for MPIO driver
...........................................

 -- Data: h5py.h5fd.MPIO_INDEPENDENT

 -- Data: h5py.h5fd.MPIO_COLLECTIVE


File: Low-levelAPIforh5py.info,  Node: File drivers types,  Next: Logging driver settings,  Prev: Data transfer modes for MPIO driver,  Up: Module constants<4>

1.8.1.3 File drivers types
..........................

 -- Data: h5py.h5fd.CORE

 -- Data: h5py.h5fd.FAMILY

 -- Data: h5py.h5fd.LOG

 -- Data: h5py.h5fd.MPIO

 -- Data: h5py.h5fd.MULTI

 -- Data: h5py.h5fd.SEC2

 -- Data: h5py.h5fd.STDIO

 -- Data: h5py.h5fd.WINDOWS


File: Low-levelAPIforh5py.info,  Node: Logging driver settings,  Prev: File drivers types,  Up: Module constants<4>

1.8.1.4 Logging driver settings
...............................

     Note: Not all logging flags are currently implemented by HDF5.

 -- Data: h5py.h5fd.LOG_LOC_READ

 -- Data: h5py.h5fd.LOG_LOC_WRITE

 -- Data: h5py.h5fd.LOG_LOC_SEEK

 -- Data: h5py.h5fd.LOG_LOC_IO

 -- Data: h5py.h5fd.LOG_FILE_READ

 -- Data: h5py.h5fd.LOG_FILE_WRITE

 -- Data: h5py.h5fd.LOG_FILE_IO

 -- Data: h5py.h5fd.LOG_FLAVOR

 -- Data: h5py.h5fd.LOG_NUM_READ

 -- Data: h5py.h5fd.LOG_NUM_WRITE

 -- Data: h5py.h5fd.LOG_NUM_SEEK

 -- Data: h5py.h5fd.LOG_NUM_IO

 -- Data: h5py.h5fd.LOG_TIME_OPEN

 -- Data: h5py.h5fd.LOG_TIME_READ

 -- Data: h5py.h5fd.LOG_TIME_WRITE

 -- Data: h5py.h5fd.LOG_TIME_SEEK

 -- Data: h5py.h5fd.LOG_TIME_CLOSE

 -- Data: h5py.h5fd.LOG_TIME_IO

 -- Data: h5py.h5fd.LOG_ALLOC

 -- Data: h5py.h5fd.LOG_ALL


File: Low-levelAPIforh5py.info,  Node: Module H5G,  Next: Module H5I,  Prev: Module H5FD,  Up: Contents

1.9 Module H5G
==============

Low-level HDF5 “‘H5G’” group interface.

* Menu:

* Functional API: Functional API<4>.
* Info objects: Info objects<2>.
* Group objects::
* Module constants: Module constants<5>.


File: Low-levelAPIforh5py.info,  Node: Functional API<4>,  Next: Info objects<2>,  Up: Module H5G

1.9.1 Functional API
--------------------

 -- Function: h5py.h5g.open (ObjectID loc, STRING name) -> GroupID

     Open an existing HDF5 group, attached to some other group.

 -- Function: h5py.h5g.create (ObjectID loc, STRING name or None,
          PropLCID lcpl=None, PropGCID gcpl=None) -> GroupID

     Create a new group, under a given parent group.  If name is None,
     an anonymous group will be created in the file.

 -- Function: h5py.h5g.iterate (GroupID loc, CALLABLE func, UINT
          startidx=0, **kwds) -> Return value from func

     Iterate a callable (function, method or callable object) over the
     members of a group.  Your callable should have the signature:

          func(STRING name) => Result

     Returning None continues iteration; returning anything else aborts
     iteration and returns that value.  Keywords:

     STRING obj_name (“.”)

          Iterate over this subgroup instead

 -- Function: h5py.h5g.get_objinfo (ObjectID obj, STRING name='.', BOOL
          follow_link=True) -> GroupStat object

     Obtain information about a named object.  If “name” is provided,
     “obj” is taken to be a *note GroupID: 114. object containing the
     target.  The return value is a GroupStat object; see that class’s
     docstring for a description of its attributes.

     If follow_link is True (default) and the object is a symbolic link,
     the information returned describes its target.  Otherwise the
     information describes the link itself.


File: Low-levelAPIforh5py.info,  Node: Info objects<2>,  Next: Group objects,  Prev: Functional API<4>,  Up: Module H5G

1.9.2 Info objects
------------------

 -- Class: h5py.h5g.GroupStat

     Represents the H5G_stat_t structure containing group member info.

     Fields (read-only):

        * fileno: 2-tuple uniquely identifying the current file

        * objno: 2-tuple uniquely identifying this object

        * nlink: Number of hard links to this object

        * mtime: Modification time of this object

        * linklen: Length of the symbolic link name, or 0 if not a link.

     “Uniquely identifying” means unique among currently open files, not
     universally unique.

        * Hashable: Yes

        * Equality: Yes


File: Low-levelAPIforh5py.info,  Node: Group objects,  Next: Module constants<5>,  Prev: Info objects<2>,  Up: Module H5G

1.9.3 Group objects
-------------------

 -- Class: h5py.h5g.GroupID

     Represents an HDF5 group identifier

     Python extensions:

     __contains__

          Test for group member (“if name in grpid”)

     __iter__

          Get an iterator over member names

     __len__

          Number of members in this group; len(grpid) = N

     If HDF5 1.8.X is used, the attribute “links” contains a proxy
     object providing access to the ‘H5L’ family of routines.  See the
     docs for h5py.h5l.LinkProxy for more information.

        * Hashable: Yes, unless anonymous

        * Equality: True HDF5 identity unless anonymous

      -- Attribute: get_comment (STRING name) -> STRING comment

          Retrieve the comment for a group member.

      -- Attribute: get_create_plist -> PropGCID

          Retrieve a copy of the *note group creation property list:
          11a. used to create this group.

      -- Attribute: get_linkval (STRING name) -> STRING link_value

          Retrieve the value (target name) of a symbolic link.  Limited
          to 2048 characters on Windows.

      -- Attribute: get_num_objs -> INT number_of_objects

          Get the number of objects directly attached to a given group.

      -- Attribute: get_objname_by_idx (INT idx) -> STRING

          Get the name of a group member given its zero-based index.

      -- Attribute: get_objtype_by_idx (INT idx) -> INT object_type_code

          Get the type of an object attached to a group, given its
          zero-based index.  Possible return values are:

             - ‘LINK’

             - ‘GROUP’

             - ‘DATASET’

             - ‘TYPE’

      -- Attribute: link (STRING current_name, STRING new_name, INT
               link_type=LINK_HARD, GroupID remote=None)

          Create a new hard or soft link.  current_name identifies the
          link target (object the link will point to).  The new link is
          identified by new_name and (optionally) another group
          “remote”.

          Link types are:

          ‘LINK_HARD’

               Hard link to existing object (default)

          ‘LINK_SOFT’

               Symbolic link; link target need not exist.

      -- Attribute: move (STRING current_name, STRING new_name, GroupID
               remote=None)

          Relink an object.  current_name identifies the object.
          new_name and (optionally) another group “remote” determine
          where it should be moved.

      -- Attribute: set_comment (STRING name, STRING comment)

          Set the comment on a group member.

      -- Attribute: unlink (STRING name)

          Remove a link to an object from this group.


File: Low-levelAPIforh5py.info,  Node: Module constants<5>,  Prev: Group objects,  Up: Module H5G

1.9.4 Module constants
----------------------

* Menu:

* Object type codes::
* Link type codes::


File: Low-levelAPIforh5py.info,  Node: Object type codes,  Next: Link type codes,  Up: Module constants<5>

1.9.4.1 Object type codes
.........................

 -- Data: h5py.h5g.LINK

     Symbolic link

 -- Data: h5py.h5g.GROUP

     HDF5 group

 -- Data: h5py.h5g.DATASET

     HDF5 dataset

 -- Data: h5py.h5g.TYPE

     Named (file-resident) datatype


File: Low-levelAPIforh5py.info,  Node: Link type codes,  Prev: Object type codes,  Up: Module constants<5>

1.9.4.2 Link type codes
.......................

 -- Data: h5py.h5g.LINK_HARD

 -- Data: h5py.h5g.LINK_SOFT


File: Low-levelAPIforh5py.info,  Node: Module H5I,  Next: Module H5L,  Prev: Module H5G,  Up: Contents

1.10 Module H5I
===============

* Menu:

* Functional API: Functional API<5>.
* Module constants: Module constants<6>.


File: Low-levelAPIforh5py.info,  Node: Functional API<5>,  Next: Module constants<6>,  Up: Module H5I

1.10.1 Functional API
---------------------

 -- Attribute: h5py.h5i.dec_ref (ObjectID obj)

     Decrement the reference count for the given object.

     This function is provided for debugging only.  Reference counting
     is automatically synchronized with Python, and you can easily break
     ObjectID instances by abusing this function.

 -- Attribute: h5py.h5i.get_file_id (ObjectID obj) -> FileID

     Obtain an identifier for the file in which this object resides.

 -- Attribute: h5py.h5i.get_name (ObjectID obj) -> STRING name, or None

     Determine (a) name of an HDF5 object.  Because an object has as
     many names as there are hard links to it, this may not be unique.

     If the identifier is invalid or is not associated with a name (in
     the case of transient datatypes, dataspaces, etc), returns None.

     For some reason, this does not work on dereferenced objects.

 -- Attribute: h5py.h5i.get_ref (ObjectID obj) -> INT

     Retrieve the reference count for the given object.

 -- Attribute: h5py.h5i.get_type (ObjectID obj) -> INT type_code

     Determine the HDF5 typecode of an arbitrary HDF5 object.  The
     return value is always one of the type constants defined in this
     module; if the ‘ID’ is invalid, *note BADID: 134. is returned.

 -- Attribute: h5py.h5i.inc_ref (ObjectID obj)

     Increment the reference count for the given object.

     This function is provided for debugging only.  Reference counting
     is automatically synchronized with Python, and you can easily break
     ObjectID instances by abusing this function.


File: Low-levelAPIforh5py.info,  Node: Module constants<6>,  Prev: Functional API<5>,  Up: Module H5I

1.10.2 Module constants
-----------------------

* Menu:

* Identifier classes::


File: Low-levelAPIforh5py.info,  Node: Identifier classes,  Up: Module constants<6>

1.10.2.1 Identifier classes
...........................

 -- Data: h5py.h5i.BADID

 -- Data: h5py.h5i.FILE

 -- Data: h5py.h5i.GROUP

 -- Data: h5py.h5i.DATASPACE

 -- Data: h5py.h5i.DATASET

 -- Data: h5py.h5i.ATTR

 -- Data: h5py.h5i.REFERENCE

 -- Data: h5py.h5i.GENPROP_CLS

 -- Data: h5py.h5i.GENPROP_LST

 -- Data: h5py.h5i.DATATYPE


File: Low-levelAPIforh5py.info,  Node: Module H5L,  Next: Module H5O,  Prev: Module H5I,  Up: Contents

1.11 Module H5L
===============

* Menu:

* Linkproxy objects::
* Module constants: Module constants<7>.


File: Low-levelAPIforh5py.info,  Node: Linkproxy objects,  Next: Module constants<7>,  Up: Module H5L

1.11.1 Linkproxy objects
------------------------

API for the “‘H5L’” family of link-related operations.  Defines the
class LinkProxy, which comes attached to *note GroupID: 114. objects as
<obj>.links.

 -- Class: h5py.h5l.LinkProxy

     Proxy class which provides access to the HDF5 “‘H5L’” API.

     These come attached to *note GroupID: 114. objects as “obj.links”.
     Since every ‘H5L’ function operates on at least one group, the
     methods provided operate on their parent group identifier.  For
     example:

          >>> g = h5g.open(fid, '/')
          >>> g.links.exists("MyGroup")
          True
          >>> g.links.exists("FooBar")
          False

        * Hashable: No

        * Equality: Undefined

     You will note that this class does `not' inherit from ‘ObjectID’.

      -- Attribute: create_external (STRING link_name, STRING file_name,
               STRING obj_name, PropLCID lcpl=None, PropLAID lapl=None)

          Create a new external link, pointing to an object in another
          file.

      -- Attribute: create_hard (STRING new_name, GroupID cur_loc,
               STRING cur_name, PropID lcpl=None, PropID lapl=None)

          Create a new hard link in this group pointing to an existing
          link in another group.

      -- Attribute: create_soft (STRING new_name, STRING target, PropID
               lcpl=None, PropID lapl=None)

          Create a new soft link in this group, with the given string
          value.  The link target does not need to exist.

      -- Attribute: exists (STRING name, PropID lapl=None) -> BOOL

          Check if a link of the specified name exists in this group.

      -- Attribute: get_info (STRING name=, INT index=, **kwds) ->
               LinkInfo instance

          Get information about a link, either by name or its index.

          Keywords:

      -- Attribute: get_val (STRING name, PropLAID lapl=None) -> STRING
               or TUPLE(file, obj)

          Get the string value of a soft link, or a 2-tuple representing
          the contents of an external link.

      -- Attribute: iterate (CALLABLE func, **kwds) -> <Return value
               from func>, <index to restart at>

          Iterate a function or callable object over all groups in this
          one.  Your callable should conform to the signature:

               func(STRING name) => Result

          or if the keyword argument “info” is True:

               func(STRING name, LinkInfo info) => Result

          Returning None or a logical False continues iteration;
          returning anything else aborts iteration and returns that
          value.

          BOOL info (False)

               Provide a LinkInfo instance to callback

          STRING obj_name (“.”)

               Visit this subgroup instead

          PropLAID lapl (None)

               *note Link access property list: 29. for “obj_name”

          INT idx_type (*note h5.INDEX_NAME: 20.)

          INT order (*note h5.ITER_INC: 23.)

          hsize_t idx (0)

               The index to start iterating at

      -- Attribute: move (STRING src_name, GroupID dst_loc, STRING
               dst_name)

          Move a link to a new location in the file.

      -- Attribute: visit (CALLABLE func, **kwds) -> <Return value from
               func>

          Iterate a function or callable object over all groups below
          this one.  Your callable should conform to the signature:

               func(STRING name) => Result

          or if the keyword argument “info” is True:

               func(STRING name, LinkInfo info) => Result

          Returning None or a logical False continues iteration;
          returning anything else aborts iteration and returns that
          value.

          BOOL info (False)

               Provide a LinkInfo instance to callback

          STRING obj_name (“.”)

               Visit this subgroup instead

          PropLAID lapl (None)

               *note Link access property list: 29. for “obj_name”

          INT idx_type (*note h5.INDEX_NAME: 20.)

          INT order (*note h5.ITER_INC: 23.)


File: Low-levelAPIforh5py.info,  Node: Module constants<7>,  Prev: Linkproxy objects,  Up: Module H5L

1.11.2 Module constants
-----------------------

* Menu:

* Link types::


File: Low-levelAPIforh5py.info,  Node: Link types,  Up: Module constants<7>

1.11.2.1 Link types
...................

 -- Data: h5py.h5l.TYPE_HARD

 -- Data: h5py.h5l.TYPE_SOFT

 -- Data: h5py.h5l.TYPE_EXTERNAL


File: Low-levelAPIforh5py.info,  Node: Module H5O,  Next: Module H5P,  Prev: Module H5L,  Up: Contents

1.12 Module H5O
===============

Module for HDF5 “‘H5O’” functions.

* Menu:

* Functional API: Functional API<6>.
* Info classes::
* Module constants: Module constants<8>.


File: Low-levelAPIforh5py.info,  Node: Functional API<6>,  Next: Info classes,  Up: Module H5O

1.12.1 Functional API
---------------------

 -- Function: h5py.h5o.open (ObjectID loc, STRING name, PropID
          lapl=None) -> ObjectID

     Open a group, dataset, or named datatype attached to an existing
     group.

 -- Function: h5py.h5o.link (ObjectID obj, GroupID loc, STRING name,
          PropID lcpl=None, PropID lapl=None)

     Create a new hard link to an object.  Useful for objects created
     with h5g.create_anon() or h5d.create_anon().

 -- Function: h5py.h5o.copy (ObjectID src_loc, STRING src_name, GroupID
          dst_loc, STRING dst_name, PropID copypl=None, PropID
          lcpl=None)

     Copy a group, dataset or named datatype from one location to
     another.  The source and destination need not be in the same file.

     The default behavior is a recursive copy of the object and all
     objects below it.  This behavior is modified via the “copypl”
     property list.

 -- Function: h5py.h5o.set_comment (ObjectID loc, STRING comment,
          **kwds)

     Set the comment for any-file resident object.  Keywords:

     STRING obj_name (“.”)

          Set comment on this group member instead

     PropID lapl (None)

          Link access property list

 -- Function: h5py.h5o.get_comment (ObjectID loc, STRING comment,
          **kwds)

     Get the comment for any-file resident object.  Keywords:

     STRING obj_name (“.”)

          Set comment on this group member instead

     PropID lapl (None)

          Link access property list

 -- Function: h5py.h5o.visit (ObjectID loc, CALLABLE func, **kwds) ->
          <Return value from func>

     Iterate a function or callable object over all objects below the
     specified one.  Your callable should conform to the signature:

          func(STRING name) => Result

     or if the keyword argument “info” is True:

          func(STRING name, ObjInfo info) => Result

     Returning None continues iteration; returning anything else aborts
     iteration and returns that value.  Keywords:

     BOOL info (False)

          Callback is func(STRING, Objinfo)

     STRING obj_name (“.”)

          Visit a subgroup of “loc” instead

     PropLAID lapl (None)

          Control how “obj_name” is interpreted

     INT idx_type (*note h5.INDEX_NAME: 20.)

          What indexing strategy to use

     INT order (*note h5.ITER_INC: 23.)

          Order in which iteration occurs

     Compatibility note: No callback is executed for the starting path
     (“.”), as some versions of HDF5 don’t correctly handle a return
     value for this case.  This differs from the behavior of the native
     H5Ovisit, which provides a literal “.” as the first value.

 -- Function: h5py.h5o.get_info (ObjectID loc, STRING name=, INT index=,
          **kwds) -> ObjInfo

     Get information describing an object in an HDF5 file.  Provide the
     object itself, or the containing group and exactly one of “name” or
     “index”.

     STRING obj_name (“.”)

          When “index” is specified, look in this subgroup instead.
          Otherwise ignored.

     PropID lapl (None)

          Link access property list

     INT index_type (*note h5.INDEX_NAME: 20.)

     INT order (*note h5.ITER_INC: 23.)


File: Low-levelAPIforh5py.info,  Node: Info classes,  Next: Module constants<8>,  Prev: Functional API<6>,  Up: Module H5O

1.12.2 Info classes
-------------------

 -- Class: h5py.h5o.ObjInfo

     Represents the H5O_info_t structure


File: Low-levelAPIforh5py.info,  Node: Module constants<8>,  Prev: Info classes,  Up: Module H5O

1.12.3 Module constants
-----------------------

* Menu:

* Object types: Object types<2>.
* Copy flags::


File: Low-levelAPIforh5py.info,  Node: Object types<2>,  Next: Copy flags,  Up: Module constants<8>

1.12.3.1 Object types
.....................

 -- Data: h5py.h5o.TYPE_GROUP

 -- Data: h5py.h5o.TYPE_DATASET

 -- Data: h5py.h5o.TYPE_NAMED_DATATYPE


File: Low-levelAPIforh5py.info,  Node: Copy flags,  Prev: Object types<2>,  Up: Module constants<8>

1.12.3.2 Copy flags
...................

 -- Data: h5py.h5o.COPY_SHALLOW_HIERARCHY_FLAG

     Copy only immediate members of a group.

 -- Data: h5py.h5o.COPY_EXPAND_SOFT_LINK_FLAG

     Expand soft links into new objects.

 -- Data: h5py.h5o.COPY_EXPAND_EXT_LINK_FLAG

     Expand external link into new objects.

 -- Data: h5py.h5o.COPY_EXPAND_REFERENCE_FLAG

     Copy objects that are pointed to by references.

 -- Data: h5py.h5o.COPY_WITHOUT_ATTR_FLAG

     Copy object without copying attributes.


File: Low-levelAPIforh5py.info,  Node: Module H5P,  Next: Module H5PL,  Prev: Module H5O,  Up: Contents

1.13 Module H5P
===============

HDF5 property list interface.

* Menu:

* Functional API: Functional API<7>.
* Base classes::
* File creation::
* File access::
* Dataset creation::
* Dataset access::
* Dataset transfer::
* Link creation::
* Link access::
* Group creation::
* Datatype creation::
* Module constants: Module constants<9>.


File: Low-levelAPIforh5py.info,  Node: Functional API<7>,  Next: Base classes,  Up: Module H5P

1.13.1 Functional API
---------------------

 -- Function: h5py.h5p.create (PropClassID cls) -> PropID

     Create a new property list as an instance of a class; classes are:

        - *note FILE_CREATE: 16f.

        - *note FILE_ACCESS: 170.

        - *note DATASET_CREATE: 171.

        - *note DATASET_XFER: 172.

        - *note DATASET_ACCESS: 173.

        - *note LINK_CREATE: 174.

        - *note LINK_ACCESS: 175.

        - *note GROUP_CREATE: 176.

        - *note OBJECT_COPY: 177.

        - *note OBJECT_CREATE: 178.


File: Low-levelAPIforh5py.info,  Node: Base classes,  Next: File creation,  Prev: Functional API<7>,  Up: Module H5P

1.13.2 Base classes
-------------------

 -- Class: h5py.h5p.PropID

     Bases: *note h5py._objects.ObjectID: 17.

     Base class for all property lists and classes

      -- Attribute: equal (PropID plist) -> BOOL

          Compare this property list (or class) to another for equality.

 -- Class: h5py.h5p.PropClassID

     Bases: *note h5py.h5p.PropID: 17a.

     An HDF5 property list class.

        * Hashable: Yes, by identifier

        * Equality: Logical H5P comparison

 -- Class: h5py.h5p.PropInstanceID

     Bases: *note h5py.h5p.PropID: 17a.

     Base class for property list instance objects.  Provides methods
     which are common across all HDF5 property list classes.

        * Hashable: No

        * Equality: Logical H5P comparison

      -- Attribute: copy -> PropList newid

          Create a new copy of an existing property list object.

      -- Method: get_class () -> PropClassID

          Determine the class of a property list object.

 -- Class: h5py.h5p.PropCreateID

     Bases: *note h5py.h5p.PropInstanceID: 17d.

     Generic object creation property list.

 -- Class: h5py.h5p.PropOCID

     Bases: *note h5py.h5p.PropCreateID: 180.

     Object creation property list

     This seems to be a super class for dataset creation property list
     and *note group creation property list: 11a.

     The documentation is somewhat hazy

      -- Attribute: get_attr_creation_order -> UINT flags

          Get tracking and indexing of creation order for object
          attributes

      -- Attribute: get_attr_phase_change () -> (max_compact, min_dense)

          Retrieves threshold values for attribute storage on an object.

      -- Attribute: get_obj_track_times

          Determines whether times associated with an object are being
          recorded.

      -- Attribute: set_attr_creation_order (UINT flags)

          Set tracking and indexing of creation order for object
          attributes

          flags – *note h5p.CRT_ORDER_TRACKED: 186,
          h5p.CRT_ORDER_INDEXED

      -- Attribute: set_attr_phase_change (UINT max_compact, UINT
               min_dense)

          Set threshold value for attribute storage on an object

          max_compact – maximum number of attributes to be stored in
          compact storage(default:8) must be greater than or equal to
          min_dense min_dense – minmum number of attributes to be stored
          in dense storage(default:6)

      -- Attribute: set_obj_track_times

          Sets the recording of times associated with an object.

 -- Class: h5py.h5p.PropCopyID

     Bases: *note h5py.h5p.PropInstanceID: 17d.

     Generic object copy property list

      -- Attribute: get_copy_object -> UINT flags

          Get copy process flags.  Legal flags are *note h5o.COPY*: 165.

      -- Attribute: set_copy_object (UINT flags)

          Set flags for object copying process.  Legal flags are from
          the *note h5o.COPY*: 165. family:

          *note h5o.COPY_SHALLOW_HIERARCHY_FLAG: 166.

               Copy only immediate members of a group.

          *note h5o.COPY_EXPAND_SOFT_LINK_FLAG: 167.

               Expand soft links into new objects.

          *note h5o.COPY_EXPAND_EXT_LINK_FLAG: 168.

               Expand external link into new objects.

          *note h5o.COPY_EXPAND_REFERENCE_FLAG: 169.

               Copy objects that are pointed to by references.

          *note h5o.COPY_WITHOUT_ATTR_FLAG: 16a.

               Copy object without copying attributes.


File: Low-levelAPIforh5py.info,  Node: File creation,  Next: File access,  Prev: Base classes,  Up: Module H5P

1.13.3 File creation
--------------------

 -- Class: h5py.h5p.PropFCID

     Bases: *note h5py.h5p.PropOCID: 181.

     File creation property list.

      -- Attribute: get_file_space_strategy () -> TUPLE(UINT strategy,
               BOOL persist, ULONGLONG threshold)

          Retrieve the file space handling strategy, persisting
          free-space condition and threshold value for a *note file
          creation property list: bc.

      -- Attribute: get_link_creation_order -> UINT flags

          Get tracking and indexing of creation order for links added to
          this group

      -- Attribute: get_sizes -> TUPLE sizes

          Determine addressing offsets and lengths for objects in an
          HDF5 file, in bytes.  Return value is a 2-tuple with values:

            0. UINT Address offsets

            1. UINT Lengths

      -- Attribute: get_userblock -> LONG size

          Determine the user block size, in bytes.

      -- Attribute: get_version -> TUPLE version_info

          Determine version information of various file attributes.
          Elements are:

            0. UINT Super block version number

            1. UINT Freelist version number

            2. UINT Symbol table version number

            3. UINT Shared object header version number

      -- Attribute: set_file_space_strategy (UINT strategy, BOOL
               persist, ULONGLONG threshold)

          Set the file space handling strategy and persisting free-space
          values.

      -- Attribute: set_link_creation_order (UINT flags)

          Set tracking and indexing of creation order for links added to
          this group

          flags – *note h5p.CRT_ORDER_TRACKED: 186,
          h5p.CRT_ORDER_INDEXED

      -- Attribute: set_sizes (UINT addr, UINT size)

          Set the addressing offsets and lengths for objects in an HDF5
          file, in bytes.

      -- Attribute: set_userblock (INT/LONG size)

          Set the file user block size, in bytes.  Must be a power of 2,
          and at least 512.


File: Low-levelAPIforh5py.info,  Node: File access,  Next: Dataset creation,  Prev: File creation,  Up: Module H5P

1.13.4 File access
------------------

 -- Class: h5py.h5p.PropFAID

     Bases: *note h5py.h5p.PropInstanceID: 17d.

     File access property list

      -- Method: get_alignment ()

          Retrieves the current settings for alignment properties from a
          *note file access property list: a6.

      -- Attribute: get_cache -> TUPLE cache info

          Get the metadata and raw data chunk cache settings.  See the
          HDF5 docs for element definitions.  Return is a 4-tuple with
          entries:

            1. INT mdc: Number of metadata objects

            2. INT rdcc: Number of raw data chunks

            3. UINT rdcc_nbytes: Size of raw data cache

            4. ‘DOUBLE’ rdcc_w0: Preemption policy for data cache.

      -- Attribute: get_driver -> INT driver code

          Return an integer identifier for the driver used by this list.
          Although HDF5 implements these as full-fledged objects, they
          are treated as integers by Python.  Built-in drivers
          identifiers are listed in module *note h5fd: 7.; they are:

             - *note h5fd.CORE: f0.

             - *note h5fd.FAMILY: f1.

             - *note h5fd.LOG: f2.

             - *note h5fd.MPIO: f3.

             - *note h5fd.MULTI: f4.

             - *note h5fd.SEC2: f5.

             - *note h5fd.STDIO: f6.

      -- Attribute: get_fapl_core -> TUPLE core_settings

          Determine settings for the *note h5fd.CORE: f0.
          (memory-resident) file driver.  Tuple elements are:

            0. UINT “increment”: Chunk size for new memory requests

            1. BOOL “backing_store”: If True, write the memory contents
               to disk when the file is closed.

      -- Attribute: get_fapl_family -> TUPLE info

          Determine family driver settings.  Tuple values are:

            0. UINT memb_size

            1. PropFAID memb_fapl or None

      -- Attribute: get_fclose_degree -> INT close_degree - h5fd. Get
               the file-close degree, which determines library behavior
               when a file is closed when objects are still open. Legal
               values:

             * *note h5f.CLOSE_WEAK: cf.

             * *note h5f.CLOSE_SEMI: d0.

             * *note h5f.CLOSE_STRONG: d1.

             * *note h5f.CLOSE_DEFAULT: d2.

      -- Attribute: get_libver_bounds () -> (INT low, INT high)

          Get the compatibility level for file format.  Returned values
          are from:

             - *note h5f.LIBVER_EARLIEST: dc.

             - *note h5f.LIBVER_V18: dd. (HDF5 1.10.2 or later)

             - *note h5f.LIBVER_V110: de. (HDF5 1.10.2 or later)

             - *note h5f.LIBVER_LATEST: df.

      -- Attribute: get_mdc_config -> CacheConfig Returns an object that
               stores all the information about the meta-data cache
               configuration

      -- Attribute: get_sieve_buf_size -> UINT size

          Get the current maximum size of the data sieve buffer (in
          bytes).

      -- Method: set_alignment ()

          Sets alignment properties of a *note file access property
          list: a6.

      -- Attribute: set_cache (INT mdc, INT rdcc, UINT rdcc_nbytes,
               DOUBLE rdcc_w0)

          Set the metadata (mdc) and raw data chunk (rdcc) cache
          properties.  See the HDF5 docs for a full explanation.

      -- Attribute: set_driver (INT driver_id)

          Sets the file driver identifier for this file access or data
          transfer property list.

      -- Attribute: set_fapl_core (UINT increment=64k, BOOL
               backing_store=True)

          Use the *note h5fd.CORE: f0. (memory-resident) file driver.

          increment

               Chunk size for new memory requests (default 1 meg)

          backing_store

               If True (default), memory contents are associated with an
               on-disk file, which is updated when the file is closed.
               Set to False for a purely in-memory file.

      -- Attribute: set_fapl_family (UINT memb_size=2**31-1, PropFAID
               memb_fapl=None)

          Set up the family driver.

          memb_size

               Member file size

          memb_fapl

               *note File access property list: a6. for each member
               access

      -- Attribute: set_fapl_log (STRING logfile, UINT flags, UINT
               buf_size)

          Enable the use of the logging driver.  See the HDF5
          documentation for details.  Flag constants are stored in
          module *note h5fd: 7.

      -- Attribute: set_fapl_sec2

          Select the “section-2” driver (h5fd.SEC2).

      -- Attribute: set_fapl_split

          Select the “split” driver (‘h5fd.SPLIT’)

      -- Attribute: set_fapl_stdio

          Select the “stdio” driver (*note h5fd.STDIO: f6.)

      -- Attribute: set_fclose_degree (INT close_degree)

          Set the file-close degree, which determines library behavior
          when a file is closed when objects are still open.  Legal
          values:

             * *note h5f.CLOSE_WEAK: cf.

             * *note h5f.CLOSE_SEMI: d0.

             * *note h5f.CLOSE_STRONG: d1.

             * *note h5f.CLOSE_DEFAULT: d2.

      -- Attribute: set_file_image

          Copy a file image into the property list.  Passing None
          releases any image currently loaded.  The parameter image must
          either be None or support the buffer protocol.

      -- Attribute: set_fileobj_driver (INT driver_id, OBJECT fileobj)

          Select the “fileobj” file driver (h5py-specific).

      -- Attribute: set_libver_bounds (INT low, INT high)

          Set the compatibility level for file format.  Legal values
          are:

             - *note h5f.LIBVER_EARLIEST: dc.

             - *note h5f.LIBVER_V18: dd. (HDF5 1.10.2 or later)

             - *note h5f.LIBVER_V110: de. (HDF5 1.10.2 or later)

             - *note h5f.LIBVER_LATEST: df.

      -- Attribute: set_mdc_config (CacheConfig) -> None Returns an
               object that stores all the information about the
               meta-data cache configuration

      -- Attribute: set_sieve_buf_size (UINT size)

          Set the maximum size of the data sieve buffer (in bytes).
          This buffer can improve I/O performance for hyperslab I/O, by
          combining reads and writes into blocks of the given size.  The
          default is 64k.


File: Low-levelAPIforh5py.info,  Node: Dataset creation,  Next: Dataset access,  Prev: File access,  Up: Module H5P

1.13.5 Dataset creation
-----------------------

 -- Class: h5py.h5p.PropDCID

     Bases: *note h5py.h5p.PropOCID: 181.

     Dataset creation property list.

      -- Attribute: all_filters_avail -> BOOL

          Determine if all the filters in the pipelist are available to
          the library.

      -- Attribute: fill_value_defined -> INT fill_status

          Determine the status of the dataset fill value.  Return values
          are:

             - *note h5d.FILL_VALUE_UNDEFINED: 91.

             - *note h5d.FILL_VALUE_DEFAULT: 92.

             - *note h5d.FILL_VALUE_USER_DEFINED: 93.

      -- Attribute: get_alloc_time -> INT alloc_time

          Get the storage space allocation time.  One of *note
          h5d.ALLOC_TIME*: 83.

      -- Attribute: get_chunk -> TUPLE chunk_dimensions

          Obtain the dataset chunk size, as a tuple.

      -- Attribute: get_external (UINT idx=0) -> TUPLE
               external_file_info

          Returns information about the indexed external file.  Tuple
          elements are:

            0. STRING name of file (256 chars max)

            1. UINT offset

            2. UINT size

      -- Attribute: get_external_count -> INT

          Returns the number of external files for the dataset.

      -- Attribute: get_fill_time -> INT

          Determine when fill values are written to the dataset.  Legal
          values (defined in module *note h5d: 4.) are:

             - *note h5d.FILL_TIME_ALLOC: 8d.

             - *note h5d.FILL_TIME_NEVER: 8e.

             - *note h5d.FILL_TIME_IFSET: 8f.

      -- Attribute: get_fill_value (NDARRAY value)

          Read the dataset fill value into a NumPy array.  It will be
          converted to match the array dtype.  If the array has nonzero
          rank, only the first element will contain the value.

      -- Attribute: get_filter (UINT filter_idx) -> TUPLE filter_info

          Get information about a filter, identified by its index.
          Tuple elements are:

            0. INT filter code (*note h5z.FILTER*: 1ba.)

            1. UINT flags (*note h5z.FLAG*: 1bb.)

            2. TUPLE of UINT values; filter aux data (16 values max)

            3. STRING name of filter (256 chars max)

      -- Attribute: get_filter_by_id (INT filter_code) -> TUPLE
               filter_info or None

          Get information about a filter, identified by its code (one of
          h5z.FILTER*).  If the filter doesn’t exist, returns None.
          Tuple elements are:

            0. UINT flags (*note h5z.FLAG*: 1bb.)

            1. TUPLE of UINT values; filter aux data (16 values max)

            2. STRING name of filter (256 chars max)

      -- Attribute: get_layout -> INT layout_code

          Determine the storage strategy of a dataset; legal values are:

             - *note h5d.COMPACT: 7f.

             - *note h5d.CONTIGUOUS: 80.

             - *note h5d.CHUNKED: 81.

             - ‘h5d.VIRTUAL’ (If using HDF5 library version 1.10 or
               later)

      -- Attribute: get_nfilters -> INT

          Determine the number of filters in the pipeline.

      -- Attribute: get_virtual_count -> UINT

          Get the number of mappings for the virtual dataset.

      -- Attribute: get_virtual_dsetname (UINT index=0) -> STR

          Get the name of a source dataset used in the mapping of the
          virtual dataset at the position index.

      -- Attribute: get_virtual_filename (UINT index=0) -> STR

          Get the file name of a source dataset used in the mapping of
          the virtual dataset at the position index.

      -- Attribute: get_virtual_srcspace (UINT index=0) -> SpaceID

          Get a dataspace for the selection within the source dataset
          used in the mapping.

      -- Attribute: get_virtual_vspace (UINT index=0) -> SpaceID

          Get a dataspace for the selection within the virtual dataset
          used in the mapping.

      -- Attribute: remove_filter (INT filter_class)

          Remove a filter from the pipeline.  The class code is one of
          *note h5z.FILTER*: 1ba.

      -- Attribute: set_alloc_time (INT alloc_time)

          Set the storage space allocation time.  One of *note
          h5d.ALLOC_TIME*: 83.

      -- Attribute: set_chunk (TUPLE chunksize)

          Set the dataset chunk size.  It’s up to you to provide values
          which are compatible with your dataset.

      -- Attribute: set_deflate (UINT level=5)

          Enable deflate (gzip) compression, at the given level.  Valid
          levels are 0-9, default is 5.

      -- Attribute: set_external (STR name, UINT offset, UINT size)

          Adds an external file to the list of external files for the
          dataset.

          The first call sets the external storage property in the
          property list, thus designating that the dataset will be
          stored in one or more non-HDF5 file(s) external to the HDF5
          file.

      -- Attribute: set_fill_time (INT fill_time)

          Define when fill values are written to the dataset.  Legal
          values (defined in module *note h5d: 4.) are:

             - *note h5d.FILL_TIME_ALLOC: 8d.

             - *note h5d.FILL_TIME_NEVER: 8e.

             - *note h5d.FILL_TIME_IFSET: 8f.

      -- Attribute: set_fill_value (NDARRAY value)

          Set the dataset fill value.  The object provided should be an
          0-dimensional NumPy array; otherwise, the value will be read
          from the first element.

      -- Attribute: set_filter (INT filter_code, UINT flags=0, TUPLE
               values=None)

          Set a filter in the pipeline.  Params are:

          filter_code

               One of the following:

                  - *note h5z.FILTER_DEFLATE: 1cc.

                  - *note h5z.FILTER_SHUFFLE: 1cd.

                  - *note h5z.FILTER_FLETCHER32: 1ce.

                  - *note h5z.FILTER_SZIP: 1cf.

          flags

               Bit flags (*note h5z.FLAG*: 1bb.) setting filter
               properties

          values

               TUPLE of UINTs giving auxiliary data for the filter

      -- Attribute: set_fletcher32

          Enable Fletcher32 error correction on this list.

      -- Attribute: set_layout (INT layout_code)

          Set dataset storage strategy; legal values are:

             - *note h5d.COMPACT: 7f.

             - *note h5d.CONTIGUOUS: 80.

             - *note h5d.CHUNKED: 81.

             - ‘h5d.VIRTUAL’ (If using HDF5 library version 1.10 or
               later)

      -- Attribute: set_scaleoffset (H5Z_SO_scale_type_t scale_type, INT
               scale_factor)

          Enable scale/offset (usually lossy) compression; lossless
          (e.g.  gzip) compression and other filters may be applied on
          top of this.

          Note that error detection (i.e.  fletcher32) cannot precede
          this in the filter chain, or else all reads on
          lossily-compressed data will fail.

      -- Attribute: set_shuffle

          Enable to use of the shuffle filter.  Use this immediately
          before the deflate filter to increase the compression ratio.

      -- Attribute: set_szip (UINT options, UINT pixels_per_block)

          Enable SZIP compression.  See the HDF5 docs for argument
          meanings, and general restrictions on use of the SZIP format.

      -- Attribute: set_virtual (SpaceID vspace, STR src_file_name, STR
               src_dset_name, SpaceID src_space)

          Set the mapping between virtual and source datasets.

          The virtual dataset is described by its virtual dataspace
          (vspace) to the elements.  The source dataset is described by
          the name of the file where it is located (src_file_name), the
          name of the dataset (src_dset_name) and its dataspace
          (src_space).


File: Low-levelAPIforh5py.info,  Node: Dataset access,  Next: Dataset transfer,  Prev: Dataset creation,  Up: Module H5P

1.13.6 Dataset access
---------------------

 -- Class: h5py.h5p.PropDAID

     Bases: *note h5py.h5p.PropInstanceID: 17d.

     Dataset access property list

      -- Attribute: get_chunk_cache -> TUPLE chunk cache info

          Get the metadata and raw data chunk cache settings.  See the
          HDF5 docs for element definitions.  Return is a 3-tuple with
          entries:

            0. size_t rdcc_nslots: Number of chunk slots in the raw data
               chunk cache hash table.

            1. size_t rdcc_nbytes: Total size of the raw data chunk
               cache, in bytes.

            2. ‘DOUBLE’ rdcc_w0: Preemption policy.

      -- Attribute: get_virtual_prefix -> STR

          Get the filesystem path prefix configured for accessing
          virtual datasets.

      -- Attribute: get_virtual_printf_gap -> LONG gap_size

          Return the maximum number of missing source files and/or
          datasets with the printf-style names when getting the extent
          for an unlimited virtual dataset.

      -- Attribute: get_virtual_view -> UINT view

          Retrieve the view of the virtual dataset.

          Valid values are:

             - ‘h5d.VDS_FIRST_MISSING’

             - ‘h5d.VDS_LAST_AVAILABLE’

      -- Attribute: set_chunk_cache (size_t rdcc_nslots, size_t
               rdcc_nbytes, double rdcc_w0)

          Sets the raw data chunk cache parameters.

      -- Attribute: set_virtual_prefix (STR prefix)

          Set a filesystem path prefix for looking up virtual datasets.
          This is prepended to all filenames specified in the virtual
          dataset.

      -- Attribute: set_virtual_printf_gap (LONG gap_size=0)

          Set the maximum number of missing source files and/or datasets
          with the printf-style names when getting the extent of an
          unlimited virtual dataset.

          Instruct the library to stop looking for the mapped data
          stored in the files and/or datasets with the printf-style
          names after not finding gap_size files and/or datasets.  The
          found source files and datasets will determine the extent of
          the unlimited virtual dataset with the printf-style mappings.
          Default value: 0.

      -- Attribute: set_virtual_view (UINT view)

          Set the view of the virtual dataset (‘VDS’) to include or
          exclude missing mapped elements.

          If view is set to ‘h5d.VDS_FIRST_MISSING’, the view includes
          all data before the first missing mapped data.  This setting
          provides a view containing only the continuous data starting
          with the dataset’s first data element.  Any break in
          continuity terminates the view.

          If view is set to ‘h5d.VDS_LAST_AVAILABLE’, the view includes
          all available mapped data.

          Missing mapped data is filled with the fill value set in the
          virtual dataset’s creation property list.


File: Low-levelAPIforh5py.info,  Node: Dataset transfer,  Next: Link creation,  Prev: Dataset access,  Up: Module H5P

1.13.7 Dataset transfer
-----------------------

 -- Class: h5py.h5p.PropDXID

     Bases: *note h5py.h5p.PropInstanceID: 17d.

     Data transfer property list


File: Low-levelAPIforh5py.info,  Node: Link creation,  Next: Link access,  Prev: Dataset transfer,  Up: Module H5P

1.13.8 Link creation
--------------------

 -- Class: h5py.h5p.PropLCID

     Bases: *note h5py.h5p.PropCreateID: 180.

     Link creation property list

      -- Attribute: get_char_encoding -> INT encoding

          Get the character encoding for link names.  Legal values are:

             - *note h5t.CSET_ASCII: 1e4.

             - *note h5t.CSET_UTF8: 1e5.

      -- Attribute: get_create_intermediate_group -> BOOL

          Determine if missing intermediate groups are automatically
          created.

      -- Attribute: set_char_encoding (INT encoding)

          Set the character encoding for link names.  Legal values are:

             - *note h5t.CSET_ASCII: 1e4.

             - *note h5t.CSET_UTF8: 1e5.

      -- Attribute: set_create_intermediate_group (BOOL create)

          Set whether missing intermediate groups are automatically
          created.


File: Low-levelAPIforh5py.info,  Node: Link access,  Next: Group creation,  Prev: Link creation,  Up: Module H5P

1.13.9 Link access
------------------

 -- Class: h5py.h5p.PropLAID

     Bases: *note h5py.h5p.PropInstanceID: 17d.

     Link access property list

      -- Attribute: get_elink_fapl -> PropFAID fapl

          Get the *note file access property list: a6. used when opening
          external files.

      -- Attribute: get_elink_prefix -> STRING prefix

          Get the external link prefix

      -- Attribute: get_nlinks -> UINT

          Get the maximum traversal depth for soft links

      -- Attribute: set_elink_fapl (PropFAID fapl)

          Set the *note file access property list: a6. used when opening
          external files.

      -- Attribute: set_elink_prefix (STRING prefix)

          Set the external link prefix.

      -- Attribute: set_nlinks (UINT nlinks)

          Set the maximum traversal depth for soft links


File: Low-levelAPIforh5py.info,  Node: Group creation,  Next: Datatype creation,  Prev: Link access,  Up: Module H5P

1.13.10 Group creation
----------------------

 -- Class: h5py.h5p.PropGCID

     Bases: *note h5py.h5p.PropOCID: 181.

     Group creation property list

      -- Attribute: get_link_creation_order -> UINT flags

          Get tracking and indexing of creation order for links added to
          this group

      -- Attribute: set_link_creation_order (UINT flags)

          Set tracking and indexing of creation order for links added to
          this group

          flags – *note h5p.CRT_ORDER_TRACKED: 186,
          h5p.CRT_ORDER_INDEXED


File: Low-levelAPIforh5py.info,  Node: Datatype creation,  Next: Module constants<9>,  Prev: Group creation,  Up: Module H5P

1.13.11 Datatype creation
-------------------------

 -- Class: h5py.h5p.PropTCID

     Bases: *note h5py.h5p.PropOCID: 181.

     Datatype creation property list

     No methods yet.


File: Low-levelAPIforh5py.info,  Node: Module constants<9>,  Prev: Datatype creation,  Up: Module H5P

1.13.12 Module constants
------------------------

* Menu:

* Predefined classes::
* Order tracking flags::


File: Low-levelAPIforh5py.info,  Node: Predefined classes,  Next: Order tracking flags,  Up: Module constants<9>

1.13.12.1 Predefined classes
............................

 -- Data: h5py.h5p.DEFAULT

 -- Data: h5py.h5p.FILE_CREATE

 -- Data: h5py.h5p.FILE_ACCESS

 -- Data: h5py.h5p.DATASET_CREATE

 -- Data: h5py.h5p.DATASET_XFER

 -- Data: h5py.h5p.DATASET_ACCESS

 -- Data: h5py.h5p.OBJECT_COPY

 -- Data: h5py.h5p.LINK_CREATE

 -- Data: h5py.h5p.LINK_ACCESS

 -- Data: h5py.h5p.GROUP_CREATE

 -- Data: h5py.h5p.OBJECT_CREATE


File: Low-levelAPIforh5py.info,  Node: Order tracking flags,  Prev: Predefined classes,  Up: Module constants<9>

1.13.12.2 Order tracking flags
..............................

 -- Data: h5py.h5p.CRT_ORDER_TRACKED

 -- Data: h5py.h5p.CRT_ORDER_INDEXED


File: Low-levelAPIforh5py.info,  Node: Module H5PL,  Next: Module H5R,  Prev: Module H5P,  Up: Contents

1.14 Module H5PL
================

Provides access to the low-level HDF5 “‘H5PL’” plugins interface.

These functions are only available with HDF5 1.10.1 or later.  They are
probably not thread safe.

 -- Function: h5py.h5pl.append (STRING search_path)

     Add a directory to the end of the plugin search path.

 -- Function: h5py.h5pl.get (UINT index) -> STRING

     Get the directory path at the given index (starting from 0) in the
     plugin search path.  Returns a Python bytes object.

 -- Function: h5py.h5pl.insert (STRING search_path, UINT index)

     Insert a directory at the given index in the plugin search path.

 -- Function: h5py.h5pl.prepend (STRING search_path)

     Add a directory to the start of the plugin search path.

 -- Function: h5py.h5pl.remove (UINT index)

     Remove the specified entry from the plugin search path.

 -- Function: h5py.h5pl.replace (STRING search_path, UINT index)

     Replace the directory at the given index in the plugin search path.

 -- Function: h5py.h5pl.size () -> UINT

     Get the number of directories currently in the plugin search path.


File: Low-levelAPIforh5py.info,  Node: Module H5R,  Next: Module H5S,  Prev: Module H5PL,  Up: Contents

1.15 Module H5R
===============

‘H5R’ API for object and region references.

* Menu:

* Functional API: Functional API<8>.
* Reference classes::
* API constants::


File: Low-levelAPIforh5py.info,  Node: Functional API<8>,  Next: Reference classes,  Up: Module H5R

1.15.1 Functional API
---------------------

 -- Function: h5py.h5r.create (ObjectID loc, STRING name, INT ref_type,
          SpaceID space=None) -> ReferenceObject ref

     Create a new reference.  The value of ref_type determines the kind
     of reference created:

     *note OBJECT: 207.

          Reference to an object in an HDF5 file.  Parameters “loc” and
          “name” identify the object; “space” is unused.

     *note DATASET_REGION: 208.

          Reference to a dataset region.  Parameters “loc” and “name”
          identify the dataset; the selection on “space” identifies the
          region.

 -- Function: h5py.h5r.dereference (Reference ref, ObjectID id) ->
          ObjectID or None

     Open the object pointed to by the reference and return its
     identifier.  The file identifier (or the identifier for any object
     in the file) must also be provided.  Returns None if the reference
     is zero-filled.

     The reference may be either Reference or RegionReference.

 -- Function: h5py.h5r.get_region (Reference ref, ObjectID id) ->
          SpaceID or None

     Retrieve the dataspace selection pointed to by the reference.
     Returns a copy of the dataset’s dataspace, with the appropriate
     elements selected.  The file identifier or the identifier of any
     object in the file (including the dataset itself) must also be
     provided.

     The reference object must be a RegionReference.  If it is
     zero-filled, returns None.

 -- Function: h5py.h5r.get_obj_type (Reference ref, ObjectID id) -> INT
          obj_code or None

     Determine what type of object the reference points to.  The
     reference may be a Reference or RegionReference.  The file
     identifier or the identifier of any object in the file must also be
     provided.

     The return value is one of:

        - *note h5o.TYPE_GROUP: 161.

        - *note h5o.TYPE_DATASET: 162.

        - *note h5o.TYPE_NAMED_DATATYPE: 163.

     If the reference is zero-filled, returns None.

 -- Function: h5py.h5r.get_name (Reference ref, ObjectID loc) -> STRING
          name

     Determine the name of the object pointed to by this reference.
     Requires the HDF5 1.8 API.


File: Low-levelAPIforh5py.info,  Node: Reference classes,  Next: API constants,  Prev: Functional API<8>,  Up: Module H5R

1.15.2 Reference classes
------------------------

 -- Class: h5py.h5r.Reference

     Opaque representation of an HDF5 reference.

     Objects of this class are created exclusively by the library and
     cannot be modified.  The read-only attribute “typecode” determines
     whether the reference is to an object in an HDF5 file (*note
     OBJECT: 207.) or a dataset region (DATASET_REGION).

     The object’s truth value indicates whether it contains a nonzero
     reference.  This does not guarantee that is valid, but is useful
     for rejecting “background” elements in a dataset.

     Defined attributes:

          cdef ref_u ref cdef readonly int typecode cdef readonly size_t
          typesize

 -- Class: h5py.h5r.RegionReference

     Bases: *note h5py.h5r.Reference: 20e.

     Opaque representation of an HDF5 region reference.

     This is a subclass of Reference which exists mainly for programming
     convenience.


File: Low-levelAPIforh5py.info,  Node: API constants,  Prev: Reference classes,  Up: Module H5R

1.15.3 API constants
--------------------

 -- Data: h5py.h5r.OBJECT

     Typecode for object references

 -- Data: h5py.h5r.DATASET_REGION

     Typecode for dataset region references


File: Low-levelAPIforh5py.info,  Node: Module H5S,  Next: Module H5T,  Prev: Module H5R,  Up: Contents

1.16 Module H5S
===============

Low-level interface to the “‘H5S’” family of data-space functions.

* Menu:

* Functional API: Functional API<9>.
* Dataspace objects::
* Module constants: Module constants<10>.


File: Low-levelAPIforh5py.info,  Node: Functional API<9>,  Next: Dataspace objects,  Up: Module H5S

1.16.1 Functional API
---------------------

 -- Function: h5py.h5s.create (INT class_code) -> SpaceID

     Create a new HDF5 dataspace object, of the given class.  Legal
     values are *note SCALAR: 215. and *note SIMPLE: 216.

 -- Function: h5py.h5s.create_simple (TUPLE dims_tpl, TUPLE
          max_dims_tpl) -> SpaceID

     Create a simple (slab) dataspace from a tuple of dimensions.  Every
     element of dims_tpl must be a positive integer.

     You can optionally specify the maximum dataspace size.  The special
     value *note UNLIMITED: 218, as an element of max_dims, indicates an
     unlimited dimension.

 -- Function: h5py.h5s.decode (STRING buf) -> SpaceID

     Unserialize a dataspace.  Bear in mind you can also use the native
     Python pickling machinery to do this.


File: Low-levelAPIforh5py.info,  Node: Dataspace objects,  Next: Module constants<10>,  Prev: Functional API<9>,  Up: Module H5S

1.16.2 Dataspace objects
------------------------

 -- Class: h5py.h5s.SpaceID

     Bases: *note h5py._objects.ObjectID: 17.

     Represents a dataspace identifier.

     Properties:

     shape

          Numpy-style shape tuple with dimensions.

        * Hashable: No

        * Equality: Unimplemented

     Can be pickled if HDF5 1.8 is available.

      -- Attribute: copy -> SpaceID

          Create a new copy of this dataspace.

      -- Attribute: encode -> STRING

          Serialize a dataspace, including its selection.  Bear in mind
          you can also use the native Python pickling machinery to do
          this.

      -- Attribute: extent_copy (SpaceID source)

          Replace this dataspace’s extent with another’s, changing its
          typecode if necessary.

      -- Attribute: get_regular_hyperslab () -> (TUPLE start, TUPLE
               stride, TUPLE count, TUPLE block)

          Retrieve a regular hyperslab selection.

      -- Attribute: get_select_bounds () -> (TUPLE start, TUPLE end)

          Determine the bounding box which exactly contains the current
          selection.

      -- Attribute: get_select_elem_npoints -> LONG npoints

          Determine the number of elements selected in point-selection
          mode.

      -- Attribute: get_select_elem_pointlist -> NDARRAY

          Get a list of all selected elements.  Return is a Numpy array
          of unsigned ints, with shape ‘(<npoints>, <space rank)’.

      -- Attribute: get_select_hyper_blocklist -> NDARRAY

          Get the current hyperslab selection.  The returned array has
          shape:

               (<npoints>, 2, <rank>)

          and can be interpreted as a nested sequence:

               [ (corner_coordinate_1, opposite_coordinate_1), ... ]

          with length equal to the total number of blocks.

      -- Attribute: get_select_hyper_nblocks -> LONG nblocks

          Get the number of hyperslab blocks currently selected.

      -- Attribute: get_select_npoints -> LONG npoints

          Determine the total number of points currently selected.
          Works for all selection techniques.

      -- Attribute: get_select_type -> INT select_code

          Determine selection type.  Return values are:

             - ‘SEL_NONE’

             - ‘SEL_ALL’

             - ‘SEL_POINTS’

             - ‘SEL_HYPERSLABS’

      -- Attribute: get_simple_extent_dims (BOOL maxdims=False) -> TUPLE
               shape

          Determine the shape of a “simple” (slab) dataspace.  If
          “maxdims” is True, retrieve the maximum dataspace size
          instead.

      -- Attribute: get_simple_extent_ndims -> INT rank

          Determine the rank of a “simple” (slab) dataspace.

      -- Attribute: get_simple_extent_npoints -> LONG npoints

          Determine the total number of elements in a dataspace.

      -- Attribute: get_simple_extent_type -> INT class_code

          Class code is either ‘SCALAR’ or ‘SIMPLE’.

      -- Attribute: is_regular_hyperslab -> BOOL

          Determine whether a hyperslab selection is regular.

      -- Attribute: is_simple -> BOOL is_simple

          Determine if an existing dataspace is “simple” (including
          scalar dataspaces).  Currently all HDF5 dataspaces are simple.

      -- Attribute: offset_simple (TUPLE offset=None)

          Set the offset of a dataspace.  The length of the given tuple
          must match the rank of the dataspace.  If None is provided
          (default), the offsets on all axes will be set to 0.

      -- Attribute: select_all

          Select all points in the dataspace.

      -- Attribute: select_elements (SEQUENCE coords, INT op=SELECT_SET)

          Select elements by specifying coordinates points.  The
          argument “coords” may be an ndarray or any nested sequence
          which can be converted to an array of uints with the shape:

               (<npoints>, <space rank>)

          Examples:

               >>> obj.shape
               (10, 10)
               >>> obj.select_elements([(1,2), (3,4), (5,9)])

          A zero-length selection (i.e.  shape ‘(0, <rank>)’) is not
          allowed by the HDF5 library.

      -- Attribute: select_hyperslab (TUPLE start, TUPLE count, TUPLE
               stride=None, TUPLE block=None, INT op=SELECT_SET)

          Select a block region from an existing dataspace.  See the
          HDF5 documentation for the meaning of the “block” and “op”
          keywords.

      -- Attribute: select_none

          Deselect entire dataspace.

      -- Attribute: select_valid -> BOOL

          Determine if the current selection falls within the dataspace
          extent.

      -- Attribute: set_extent_none

          Remove the dataspace extent; typecode changes to ‘NO_CLASS’.

      -- Attribute: set_extent_simple (TUPLE dims_tpl, TUPLE
               max_dims_tpl=None)

          Reset the dataspace extent via a tuple of dimensions.  Every
          element of dims_tpl must be a positive integer.

          You can optionally specify the maximum dataspace size.  The
          special value ‘UNLIMITED’, as an element of max_dims,
          indicates an unlimited dimension.

      -- Attribute: shape

          Numpy-style shape tuple representing dimensions.  () ==
          scalar.


File: Low-levelAPIforh5py.info,  Node: Module constants<10>,  Prev: Dataspace objects,  Up: Module H5S

1.16.3 Module constants
-----------------------

 -- Data: h5py.h5s.ALL

     Accepted in place of an actual dataspace; means “every point”

 -- Data: h5py.h5s.UNLIMITED

     Indicates an unlimited maximum dimension

* Menu:

* Dataspace class codes::
* Selection codes::
* Existing selection type::


File: Low-levelAPIforh5py.info,  Node: Dataspace class codes,  Next: Selection codes,  Up: Module constants<10>

1.16.3.1 Dataspace class codes
..............................

 -- Data: h5py.h5s.NO_CLASS

 -- Data: h5py.h5s.SCALAR

 -- Data: h5py.h5s.SIMPLE


File: Low-levelAPIforh5py.info,  Node: Selection codes,  Next: Existing selection type,  Prev: Dataspace class codes,  Up: Module constants<10>

1.16.3.2 Selection codes
........................

 -- Data: h5py.h5s.SELECT_NOOP

 -- Data: h5py.h5s.SELECT_SET

 -- Data: h5py.h5s.SELECT_OR

 -- Data: h5py.h5s.SELECT_AND

 -- Data: h5py.h5s.SELECT_XOR

 -- Data: h5py.h5s.SELECT_NOTB

 -- Data: h5py.h5s.SELECT_NOTA

 -- Data: h5py.h5s.SELECT_APPEND

 -- Data: h5py.h5s.SELECT_PREPEND

 -- Data: h5py.h5s.SELECT_INVALID


File: Low-levelAPIforh5py.info,  Node: Existing selection type,  Prev: Selection codes,  Up: Module constants<10>

1.16.3.3 Existing selection type
................................

 -- Data: h5py.h5s.SEL_NONE

 -- Data: h5py.h5s.SEL_POINTS

 -- Data: h5py.h5s.SEL_HYPERSLABS

 -- Data: h5py.h5s.SEL_ALL


File: Low-levelAPIforh5py.info,  Node: Module H5T,  Next: Module H5Z,  Prev: Module H5S,  Up: Contents

1.17 Module H5T
===============

HDF5 “‘H5T’” data-type API

This module contains the datatype identifier class *note TypeID: 40, and
its subclasses which represent things like integer/float/compound
identifiers.  The majority of the ‘H5T’ API is presented as methods on
these identifiers.

* Menu:

* Functions specific to h5py::
* Functional API: Functional API<10>.
* Type classes::
* Predefined Datatypes::
* Module constants: Module constants<11>.


File: Low-levelAPIforh5py.info,  Node: Functions specific to h5py,  Next: Functional API<10>,  Up: Module H5T

1.17.1 Functions specific to h5py
---------------------------------

 -- Function: h5py.h5t.py_create (OBJECT dtype_in, BOOL logical=False)
          -> TypeID

     Given a Numpy dtype object, generate a byte-for-byte
     memory-compatible HDF5 datatype object.  The result is guaranteed
     to be transient and unlocked.


     Parameters:

        * ‘dtype_in’ – may be a dtype object, or anything which can be
          converted to a dtype, including strings like ‘<i4’ or an
          “int”.

        * ‘logical’ – when this flag is set, instead of returning a
          byte-for-byte identical representation of the type, the
          function returns the closest logically appropriate HDF5 type.
          For example, in the case of a “hinted” dtype of kind “O”
          representing a string, it would return an HDF5 variable-
          length string type.

 -- Function: h5py.h5t.string_dtype ()

     Make a numpy dtype for HDF5 strings

     encoding may be ‘utf-8’ or ‘ascii’.

     length may be an integer for a fixed length string dtype, or None
     for variable length strings.  String lengths for HDF5 are counted
     in bytes, not unicode code points.

     For variable length strings, the data should be passed as Python
     str objects (unicode in Python 2) if the encoding is ‘utf-8’, and
     bytes if it is ‘ascii’.  For fixed length strings, the data should
     be numpy fixed length `bytes' arrays, regardless of the encoding.
     Fixed length unicode data is not supported.

 -- Function: h5py.h5t.check_string_dtype ()

     If the dtype represents an HDF5 string, returns a string_info
     object.

     The returned string_info object holds the encoding and the length.
     The encoding can only be ‘utf-8’ or ‘ascii’.  The length may be
     None for a variable-length string, or a fixed length in bytes.

     Returns None if the dtype does not represent an HDF5 string.

 -- Function: h5py.h5t.vlen_dtype ()

     Make a numpy dtype for an HDF5 variable-length datatype

     For variable-length string dtypes, use *note string_dtype(): 24e.
     instead.

 -- Function: h5py.h5t.check_vlen_dtype ()

     If the dtype represents an HDF5 vlen, returns the Python base
     class.

     Returns None if the dtype does not represent an HDF5 vlen.

 -- Function: h5py.h5t.enum_dtype ()

     Create a NumPy representation of an HDF5 enumerated type

     `values_dict' maps string names to integer values.  `basetype' is
     an appropriate integer base dtype large enough to hold the possible
     options.

 -- Function: h5py.h5t.check_enum_dtype ()

     If the dtype represents an HDF5 enumerated type, returns the
     dictionary mapping string names to integer values.

     Returns None if the dtype does not represent an HDF5 enumerated
     type.

 -- Function: h5py.h5t.special_dtype ()

     Create a new h5py “special” type.  Only one keyword may be given.

     Legal keywords are:

     vlen = basetype

          Base type for HDF5 variable-length datatype.  This can be
          Python str type or instance of np.dtype.  Example:
          special_dtype( vlen=str )

     enum = (basetype, values_dict)

          Create a NumPy representation of an HDF5 enumerated type.
          Provide a 2-tuple containing an (integer) base dtype and a
          dict mapping string names to integer values.

     ref = Reference | RegionReference

          Create a NumPy representation of an HDF5 object or region
          reference type.

 -- Function: h5py.h5t.check_dtype ()

     Check a dtype for h5py special type “hint” information.  Only one
     keyword may be given.

     vlen = dtype

          If the dtype represents an HDF5 vlen, returns the Python base
          class.  Currently only builting string vlens (str) are
          supported.  Returns None if the dtype does not represent an
          HDF5 vlen.

     enum = dtype

          If the dtype represents an HDF5 enumerated type, returns the
          dictionary mapping string names to integer values.  Returns
          None if the dtype does not represent an HDF5 enumerated type.

     ref = dtype

          If the dtype represents an HDF5 reference type, returns the
          reference class (either Reference or RegionReference).
          Returns None if the dtype does not represent an HDF5 reference
          type.


File: Low-levelAPIforh5py.info,  Node: Functional API<10>,  Next: Type classes,  Prev: Functions specific to h5py,  Up: Module H5T

1.17.2 Functional API
---------------------

 -- Function: h5py.h5t.create (INT classtype, UINT size) -> TypeID

     Create a new HDF5 type object.  Legal class values are *note
     COMPOUND: 258. and *note OPAQUE: 259.  Use enum_create for enums.

 -- Function: h5py.h5t.open (ObjectID group, STRING name) -> TypeID

     Open a named datatype from a file.  If present, tapl must be a
     datatype access property list.

 -- Function: h5py.h5t.array_create (TypeID base, TUPLE dimensions) ->
          TypeArrayID

     Create a new array datatype, using and HDF5 parent type and
     dimensions given via a tuple of positive integers.  “Unlimited”
     dimensions are not allowed.

 -- Function: h5py.h5t.enum_create (TypeID base) -> TypeID

     Create a new enumerated type based on an (integer) parent type.

 -- Function: h5py.h5t.vlen_create (TypeID base) -> TypeID

     Create a new variable-length datatype, using any HDF5 type as a
     base.

     Although the Python interface can manipulate these types, there is
     no provision for reading/writing vlen data.

 -- Function: h5py.h5t.decode (STRING buf) -> TypeID

     Deserialize an HDF5 type.  You can also do this with the native
     Python pickling machinery.

 -- Function: h5py.h5t.convert (TypeID src, TypeID dst, UINT n, NDARRAY
          buf, NDARRAY bkg=None, PropID dxpl=None)

     Convert n contiguous elements of a buffer in-place.  The array
     dtype is ignored.  The backing buffer is optional; for conversion
     of compound types, a temporary copy of conversion buffer will used
     for backing if one is not supplied.

 -- Function: h5py.h5t.find (TypeID src, TypeID dst) -> TUPLE or None

     Determine if a conversion path exists from src to dst.  Result is
     None or a tuple describing the conversion path.  Currently tuple
     entries are:

       1. 
          INT need_bkg: Whether this routine requires a backing buffer.

               Values are *note BKG_NO: 261, BKG_TEMP and *note BKG_YES:
               262.


File: Low-levelAPIforh5py.info,  Node: Type classes,  Next: Predefined Datatypes,  Prev: Functional API<10>,  Up: Module H5T

1.17.3 Type classes
-------------------

 -- Class: h5py.h5t.TypeID

     Base class for type identifiers (implements common operations)

        * Hashable: If committed; in HDF5 1.8.X, also if locked

        * Equality: Logical ‘H5T’ comparison

      -- Attribute: commit (ObjectID group, STRING name, PropID
               lcpl=None)

          Commit this (transient) datatype to a named datatype in a
          file.  If present, lcpl may be a *note link creation property
          list: 1e2.

      -- Attribute: committed -> BOOL is_comitted

          Determine if a given type object is named (T) or transient
          (F).

      -- Attribute: copy -> TypeID

          Create a copy of this type object.

      -- Attribute: detect_class (INT classtype) -> BOOL
               class_is_present

          Determine if a member of the given class exists in a compound
          datatype.  The search is recursive.

      -- Attribute: dtype

          A Numpy-style dtype object representing this object.

      -- Attribute: encode -> STRING

          Serialize an HDF5 type.  Bear in mind you can also use the
          native Python pickle/unpickle machinery to do this.  The
          returned string may contain binary values, including NULLs.

      -- Attribute: equal (TypeID typeid) -> BOOL

          Logical comparison between datatypes.  Also called by Python’s
          “==” operator.

      -- Attribute: get_class -> INT classcode

          Determine the datatype’s class code.

      -- Attribute: get_create_plist -> PropTCID

          Create and return a new copy of the datatype creation property
          list used when this datatype was created.

      -- Attribute: get_size -> INT size

          Determine the total size of a datatype, in bytes.

      -- Attribute: get_super -> TypeID

          Determine the parent type of an array, enumeration or vlen
          datatype.

      -- Attribute: lock

          Lock this datatype, which makes it immutable and
          indestructible.  Once locked, it can’t be unlocked.

      -- Attribute: set_size (UINT size)

          Set the total size of the datatype, in bytes.

* Menu:

* Atomic classes::
* Strings::
* Compound Types::
* Other types::


File: Low-levelAPIforh5py.info,  Node: Atomic classes,  Next: Strings,  Up: Type classes

1.17.3.1 Atomic classes
.......................

Atomic types are integers and floats.  Much of the functionality for
each is inherited from the base class *note TypeAtomicID: 272.

 -- Class: h5py.h5t.TypeAtomicID

     Bases: *note h5py.h5t.TypeID: 40.

     Base class for atomic datatypes (float or integer)

      -- Attribute: get_offset -> INT offset

          Get the offset of the first significant bit.

      -- Attribute: get_order -> INT order

          Obtain the byte order of the datatype; one of:

             - ‘ORDER_LE’

             - ‘ORDER_BE’

      -- Attribute: get_pad () -> (INT lsb_pad_code, INT msb_pad_code)

          Determine the padding type.  Possible values are:

             - ‘PAD_ZERO’

             - ‘PAD_ONE’

             - ‘PAD_BACKGROUND’

      -- Attribute: get_precision -> UINT precision

          Get the number of significant bits (excludes padding).

      -- Attribute: set_offset (UINT offset)

          Set the offset of the first significant bit.

      -- Attribute: set_order (INT order)

          Set the byte order of the datatype; one of:

             - ‘ORDER_LE’

             - ‘ORDER_BE’

      -- Attribute: set_pad (INT lsb_pad_code, INT msb_pad_code)

          Set the padding type.  Possible values are:

             - ‘PAD_ZERO’

             - ‘PAD_ONE’

             - ‘PAD_BACKGROUND’

      -- Attribute: set_precision (UINT precision)

          Set the number of significant bits (excludes padding).

 -- Class: h5py.h5t.TypeIntegerID

     Bases: *note h5py.h5t.TypeAtomicID: 272.

     Integer atomic datatypes

      -- Attribute: get_sign -> INT sign

          Get the “signedness” of the datatype; one of:

          ‘SGN_NONE’

               Unsigned

          ‘SGN_2’

               Signed 2’s complement

      -- Attribute: set_sign (INT sign)

          Set the “signedness” of the datatype; one of:

          ‘SGN_NONE’

               Unsigned

          ‘SGN_2’

               Signed 2’s complement

 -- Class: h5py.h5t.TypeFloatID

     Bases: *note h5py.h5t.TypeAtomicID: 272.

     Floating-point atomic datatypes

      -- Attribute: get_ebias -> UINT ebias

          Get the exponent bias.

      -- Attribute: get_fields -> TUPLE field_info

          Get information about floating-point bit fields.  See the HDF5
          docs for a full description.  Tuple has the following members:

            0. UINT spos

            1. UINT epos

            2. UINT esize

            3. UINT mpos

            4. UINT msize

      -- Attribute: get_inpad -> INT pad_code

          Determine the internal padding strategy.  Legal values are:

             - ‘PAD_ZERO’

             - ‘PAD_ONE’

             - ‘PAD_BACKGROUND’

      -- Attribute: get_norm -> INT normalization_code

          Get the normalization strategy.  Legal values are:

             - ‘NORM_IMPLIED’

             - ‘NORM_MSBSET’

             - ‘NORM_NONE’

      -- Attribute: set_ebias (UINT ebias)

          Set the exponent bias.

      -- Attribute: set_fields (UINT spos, UINT epos, UINT esize, UINT
               mpos, UINT msize)

          Set floating-point bit fields.  Refer to the HDF5 docs for
          argument definitions.

      -- Attribute: set_inpad (INT pad_code)

          Set the internal padding strategy.  Legal values are:

             - ‘PAD_ZERO’

             - ‘PAD_ONE’

             - ‘PAD_BACKGROUND’

      -- Attribute: set_norm (INT normalization_code)

          Set the normalization strategy.  Legal values are:

             - ‘NORM_IMPLIED’

             - ‘NORM_MSBSET’

             - ‘NORM_NONE’


File: Low-levelAPIforh5py.info,  Node: Strings,  Next: Compound Types,  Prev: Atomic classes,  Up: Type classes

1.17.3.2 Strings
................

 -- Class: h5py.h5t.TypeStringID

     Bases: *note h5py.h5t.TypeID: 40.

     String datatypes, both fixed and vlen.

      -- Attribute: get_cset -> INT character_set

          Retrieve the character set used for a string.

      -- Attribute: get_strpad -> INT padding_type

          Get the padding type.  Legal values are:

          ‘STR_NULLTERM’

               NULL termination only (C style)

          ‘STR_NULLPAD’

               Pad buffer with NULLs

          ‘STR_SPACEPAD’

               Pad buffer with spaces (FORTRAN style)

      -- Attribute: is_variable_str -> BOOL is_variable

          Determine if the given string datatype is a variable-length
          string.

      -- Attribute: set_cset (INT character_set)

          Set the character set used for a string.

      -- Attribute: set_strpad (INT pad)

          Set the padding type.  Legal values are:

          ‘STR_NULLTERM’

               NULL termination only (C style)

          ‘STR_NULLPAD’

               Pad buffer with NULLs

          ‘STR_SPACEPAD’

               Pad buffer with spaces (FORTRAN style)


File: Low-levelAPIforh5py.info,  Node: Compound Types,  Next: Other types,  Prev: Strings,  Up: Type classes

1.17.3.3 Compound Types
.......................

Traditional compound type (like NumPy record type) and enumerated types
share a base class, *note TypeCompositeID: 28f.

 -- Class: h5py.h5t.TypeCompositeID

     Bases: *note h5py.h5t.TypeID: 40.

     Base class for enumerated and compound types.

      -- Attribute: get_member_index (STRING name) -> INT index

          Determine the index of a member of a compound or enumerated
          datatype identified by a string name.

      -- Attribute: get_member_name (INT member) -> STRING name

          Determine the name of a member of a compound or enumerated
          type, identified by its index (0 <= member < nmembers).

      -- Attribute: get_nmembers -> INT number_of_members

          Determine the number of members in a compound or enumerated
          type.

 -- Class: h5py.h5t.TypeCompoundID

     Bases: *note h5py.h5t.TypeCompositeID: 28f.

     Represents a compound datatype

      -- Attribute: get_member_class (INT member) -> INT class

          Determine the datatype class of the member of a compound type,
          identified by its index (0 <= member < nmembers).

      -- Attribute: get_member_offset (INT member) -> INT offset

          Determine the offset, in bytes, of the beginning of the
          specified member of a compound datatype.

      -- Attribute: get_member_type (INT member) -> TypeID

          Create a copy of a member of a compound datatype, identified
          by its index.

      -- Attribute: insert (STRING name, UINT offset, TypeID field)

          Add a named member datatype to a compound datatype.  The
          parameter offset indicates the offset from the start of the
          compound datatype, in bytes.

      -- Attribute: pack

          Recursively removes padding (introduced on account of e.g.
          compiler alignment rules) from a compound datatype.

 -- Class: h5py.h5t.TypeEnumID

     Bases: *note h5py.h5t.TypeCompositeID: 28f.

     Represents an enumerated type

      -- Attribute: enum_insert (STRING name, INT/LONG value)

          Define a new member of an enumerated type.  The value will be
          automatically converted to the base type defined for this
          enum.  If the conversion results in overflow, the value will
          be silently clipped.

      -- Attribute: enum_nameof (LONG value) -> STRING name

          Determine the name associated with the given value.  Due to a
          limitation of the HDF5 library, this can only retrieve names
          up to 1023 characters in length.

      -- Attribute: enum_valueof (STRING name) -> LONG value

          Get the value associated with an enum name.

      -- Attribute: get_member_value (UINT index) -> LONG value

          Determine the value for the member at the given zero-based
          index.


File: Low-levelAPIforh5py.info,  Node: Other types,  Prev: Compound Types,  Up: Type classes

1.17.3.4 Other types
....................

 -- Class: h5py.h5t.TypeArrayID

     Bases: *note h5py.h5t.TypeID: 40.

     Represents an array datatype

      -- Attribute: get_array_dims -> TUPLE dimensions

          Get the dimensions of the given array datatype as a tuple of
          integers.

      -- Attribute: get_array_ndims -> INT rank

          Get the rank of the given array datatype.

 -- Class: h5py.h5t.TypeOpaqueID

     Bases: *note h5py.h5t.TypeID: 40.

     Represents an opaque type

      -- Attribute: get_tag -> STRING tag

          Get the tag associated with an opaque datatype.

      -- Attribute: set_tag (STRING tag)

          Set a string describing the contents of an opaque datatype.
          Limited to 256 characters.

 -- Class: h5py.h5t.TypeVlenID

     Bases: *note h5py.h5t.TypeID: 40.

     Non-string vlen datatypes.

 -- Class: h5py.h5t.TypeBitfieldID

     Bases: *note h5py.h5t.TypeID: 40.

     HDF5 bitfield type

 -- Class: h5py.h5t.TypeReferenceID

     Bases: *note h5py.h5t.TypeID: 40.

     HDF5 object or region reference


File: Low-levelAPIforh5py.info,  Node: Predefined Datatypes,  Next: Module constants<11>,  Prev: Type classes,  Up: Module H5T

1.17.4 Predefined Datatypes
---------------------------

These locked types are pre-allocated by the library.

* Menu:

* Floating-point::
* Integer types::
* Reference types::
* String types::
* Python object type::


File: Low-levelAPIforh5py.info,  Node: Floating-point,  Next: Integer types,  Up: Predefined Datatypes

1.17.4.1 Floating-point
.......................

 -- Data: h5py.h5t.IEEE_F32LE

 -- Data: h5py.h5t.IEEE_F32BE

 -- Data: h5py.h5t.IEEE_F64LE

 -- Data: h5py.h5t.IEEE_F64BE


File: Low-levelAPIforh5py.info,  Node: Integer types,  Next: Reference types,  Prev: Floating-point,  Up: Predefined Datatypes

1.17.4.2 Integer types
......................

 -- Data: h5py.h5t.STD_I8LE

 -- Data: h5py.h5t.STD_I16LE

 -- Data: h5py.h5t.STD_I32LE

 -- Data: h5py.h5t.STD_I64LE

 -- Data: h5py.h5t.STD_I8BE

 -- Data: h5py.h5t.STD_I16BE

 -- Data: h5py.h5t.STD_I32BE

 -- Data: h5py.h5t.STD_I64BE

 -- Data: h5py.h5t.STD_U8LE

 -- Data: h5py.h5t.STD_U16LE

 -- Data: h5py.h5t.STD_U32LE

 -- Data: h5py.h5t.STD_U64LE

 -- Data: h5py.h5t.STD_U8BE

 -- Data: h5py.h5t.STD_U16BE

 -- Data: h5py.h5t.STD_U32BE

 -- Data: h5py.h5t.STD_U64BE

 -- Data: h5py.h5t.NATIVE_INT8

 -- Data: h5py.h5t.NATIVE_UINT8

 -- Data: h5py.h5t.NATIVE_INT16

 -- Data: h5py.h5t.NATIVE_UINT16

 -- Data: h5py.h5t.NATIVE_INT32

 -- Data: h5py.h5t.NATIVE_UINT32

 -- Data: h5py.h5t.NATIVE_INT64

 -- Data: h5py.h5t.NATIVE_UINT64

 -- Data: h5py.h5t.NATIVE_FLOAT

 -- Data: h5py.h5t.NATIVE_DOUBLE


File: Low-levelAPIforh5py.info,  Node: Reference types,  Next: String types,  Prev: Integer types,  Up: Predefined Datatypes

1.17.4.3 Reference types
........................

 -- Data: h5py.h5t.STD_REF_OBJ

 -- Data: h5py.h5t.STD_REF_DSETREG


File: Low-levelAPIforh5py.info,  Node: String types,  Next: Python object type,  Prev: Reference types,  Up: Predefined Datatypes

1.17.4.4 String types
.....................

 -- Data: h5py.h5t.C_S1

     Null-terminated fixed-length string

 -- Data: h5py.h5t.FORTRAN_S1

     Zero-padded fixed-length string

 -- Data: h5py.h5t.VARIABLE

     Variable-length string


File: Low-levelAPIforh5py.info,  Node: Python object type,  Prev: String types,  Up: Predefined Datatypes

1.17.4.5 Python object type
...........................

 -- Data: h5py.h5t.PYTHON_OBJECT


File: Low-levelAPIforh5py.info,  Node: Module constants<11>,  Prev: Predefined Datatypes,  Up: Module H5T

1.17.5 Module constants
-----------------------

* Menu:

* Datatype class codes::
* API Constants::


File: Low-levelAPIforh5py.info,  Node: Datatype class codes,  Next: API Constants,  Up: Module constants<11>

1.17.5.1 Datatype class codes
.............................

 -- Data: h5py.h5t.NO_CLASS

 -- Data: h5py.h5t.INTEGER

 -- Data: h5py.h5t.FLOAT

 -- Data: h5py.h5t.TIME

 -- Data: h5py.h5t.STRING

 -- Data: h5py.h5t.BITFIELD

 -- Data: h5py.h5t.OPAQUE

 -- Data: h5py.h5t.COMPOUND

 -- Data: h5py.h5t.REFERENCE

 -- Data: h5py.h5t.ENUM

 -- Data: h5py.h5t.VLEN

 -- Data: h5py.h5t.ARRAY


File: Low-levelAPIforh5py.info,  Node: API Constants,  Prev: Datatype class codes,  Up: Module constants<11>

1.17.5.2 API Constants
......................

 -- Data: h5py.h5t.SGN_NONE

 -- Data: h5py.h5t.SGN_2

 -- Data: h5py.h5t.ORDER_LE

 -- Data: h5py.h5t.ORDER_BE

 -- Data: h5py.h5t.ORDER_VAX

 -- Data: h5py.h5t.ORDER_NONE

 -- Data: h5py.h5t.ORDER_NATIVE

 -- Data: h5py.h5t.DIR_DEFAULT

 -- Data: h5py.h5t.DIR_ASCEND

 -- Data: h5py.h5t.DIR_DESCEND

 -- Data: h5py.h5t.STR_NULLTERM

 -- Data: h5py.h5t.STR_NULLPAD

 -- Data: h5py.h5t.STR_SPACEPAD

 -- Data: h5py.h5t.NORM_IMPLIED

 -- Data: h5py.h5t.NORM_MSBSET

 -- Data: h5py.h5t.NORM_NONE

 -- Data: h5py.h5t.CSET_ASCII

 -- Data: h5py.h5t.CSET_UTF8

 -- Data: h5py.h5t.PAD_ZERO

 -- Data: h5py.h5t.PAD_ONE

 -- Data: h5py.h5t.PAD_BACKGROUND

 -- Data: h5py.h5t.BKG_NO

 -- Data: h5py.h5t.BKG_TEMP

 -- Data: h5py.h5t.BKG_YES


File: Low-levelAPIforh5py.info,  Node: Module H5Z,  Prev: Module H5T,  Up: Contents

1.18 Module H5Z
===============

Filter API and constants.

 -- Attribute: h5py.h5z.filter_avail (INT filter_code) -> BOOL

     Determine if the given filter is available to the library.  The
     filter code should be one of:

        - *note FILTER_DEFLATE: 1cc.

        - *note FILTER_SHUFFLE: 1cd.

        - *note FILTER_FLETCHER32: 1ce.

        - *note FILTER_SZIP: 1cf.

 -- Attribute: h5py.h5z.get_filter_info (INT filter_code) -> INT
          filter_flags

     Retrieve a bitfield with information about the given filter.  The
     filter code should be one of:

        - *note FILTER_DEFLATE: 1cc.

        - *note FILTER_SHUFFLE: 1cd.

        - *note FILTER_FLETCHER32: 1ce.

        - *note FILTER_SZIP: 1cf.

     Valid bitmasks for use with the returned bitfield are:

        - *note FILTER_CONFIG_ENCODE_ENABLED: 2f7.

        - *note FILTER_CONFIG_DECODE_ENABLED: 2f8.

 -- Attribute: h5py.h5z.unregister_filter (INT filter_code) -> BOOL

     Unregister a filter

* Menu:

* Module constants: Module constants<12>.


File: Low-levelAPIforh5py.info,  Node: Module constants<12>,  Up: Module H5Z

1.18.1 Module constants
-----------------------

* Menu:

* Predefined filters::
* Filter flags::
* SZIP-specific options::
* Scale/offset-specific options::
* Other flags::


File: Low-levelAPIforh5py.info,  Node: Predefined filters,  Next: Filter flags,  Up: Module constants<12>

1.18.1.1 Predefined filters
...........................

 -- Data: h5py.h5z.FILTER_NONE

 -- Data: h5py.h5z.FILTER_ALL

 -- Data: h5py.h5z.FILTER_DEFLATE

 -- Data: h5py.h5z.FILTER_SHUFFLE

 -- Data: h5py.h5z.FILTER_FLETCHER32

 -- Data: h5py.h5z.FILTER_SZIP

 -- Data: h5py.h5z.FILTER_SCALEOFFSET

 -- Data: h5py.h5z.FILTER_LZF


File: Low-levelAPIforh5py.info,  Node: Filter flags,  Next: SZIP-specific options,  Prev: Predefined filters,  Up: Module constants<12>

1.18.1.2 Filter flags
.....................

 -- Data: h5py.h5z.FLAG_DEFMASK

 -- Data: h5py.h5z.FLAG_MANDATORY

 -- Data: h5py.h5z.FLAG_OPTIONAL

 -- Data: h5py.h5z.FLAG_INVMASK

 -- Data: h5py.h5z.FLAG_REVERSE

 -- Data: h5py.h5z.FLAG_SKIP_EDC


File: Low-levelAPIforh5py.info,  Node: SZIP-specific options,  Next: Scale/offset-specific options,  Prev: Filter flags,  Up: Module constants<12>

1.18.1.3 SZIP-specific options
..............................

 -- Data: h5py.h5z.SZIP_ALLOW_K13_OPTION_MASK

 -- Data: h5py.h5z.SZIP_CHIP_OPTION_MASK

 -- Data: h5py.h5z.SZIP_EC_OPTION_MASK

 -- Data: h5py.h5z.SZIP_NN_OPTION_MASK

 -- Data: h5py.h5z.SZIP_MAX_PIXELS_PER_BLOCK


File: Low-levelAPIforh5py.info,  Node: Scale/offset-specific options,  Next: Other flags,  Prev: SZIP-specific options,  Up: Module constants<12>

1.18.1.4 Scale/offset-specific options
......................................

 -- Data: h5py.h5z.SO_FLOAT_DSCALE

 -- Data: h5py.h5z.SO_FLOAT_ESCALE

 -- Data: h5py.h5z.SO_INT

 -- Data: h5py.h5z.SO_INT_MINBITS_DEFAULT


File: Low-levelAPIforh5py.info,  Node: Other flags,  Prev: Scale/offset-specific options,  Up: Module constants<12>

1.18.1.5 Other flags
....................

 -- Data: h5py.h5z.FILTER_CONFIG_ENCODE_ENABLED

 -- Data: h5py.h5z.FILTER_CONFIG_DECODE_ENABLED

 -- Data: h5py.h5z.DISABLE_EDC

 -- Data: h5py.h5z.ENABLE_EDC

 -- Data: h5py.h5z.NO_EDC


File: Low-levelAPIforh5py.info,  Node: Python Module Index,  Next: Index,  Prev: Contents,  Up: Top

Python Module Index
*******************

* Menu:

* h5py._objects: 0.
* h5py.h5: 1.
* h5py.h5a: 2.
* h5py.h5ac: 3.
* h5py.h5d: 4.
* h5py.h5ds: 5.
* h5py.h5f: 6.
* h5py.h5fd: 7.
* h5py.h5g: 8.
* h5py.h5i: 9.
* h5py.h5l: a.
* h5py.h5o: b.
* h5py.h5p: c.
* h5py.h5pl: d.
* h5py.h5r: e.
* h5py.h5s: f.
* h5py.h5t: 10.
* h5py.h5z: 11.


File: Low-levelAPIforh5py.info,  Node: Index,  Prev: Python Module Index,  Up: Top

Index
*****

 [index ]
* Menu:

* ACC_EXCL (in module h5py.h5f):         File access flags.   (line  10)
* ACC_RDONLY (in module h5py.h5f):       File access flags.   (line  18)
* ACC_RDWR (in module h5py.h5f):         File access flags.   (line  14)
* ACC_TRUNC (in module h5py.h5f):        File access flags.   (line   6)
* ALL (in module h5py.h5s):              Module constants<10>.
                                                              (line   6)
* ALLOC_TIME_DEFAULT (in module h5py.h5d): Allocation times.  (line   6)
* ALLOC_TIME_EARLY (in module h5py.h5d): Allocation times.    (line  10)
* ALLOC_TIME_INCR (in module h5py.h5d):  Allocation times.    (line  12)
* ALLOC_TIME_LATE (in module h5py.h5d):  Allocation times.    (line   8)
* all_filters_avail (h5py.h5p.PropDCID attribute): Dataset creation.
                                                              (line  12)
* append() (in module h5py.h5pl):        Module H5PL.         (line  11)
* apply_empty_reserve (h5py.h5ac.CacheConfig attribute): Module H5AC.
                                                              (line  12)
* apply_max_decrement (h5py.h5ac.CacheConfig attribute): Module H5AC.
                                                              (line  14)
* apply_max_increment (h5py.h5ac.CacheConfig attribute): Module H5AC.
                                                              (line  16)
* ARRAY (in module h5py.h5t):            Datatype class codes.
                                                              (line  28)
* array_create() (in module h5py.h5t):   Functional API<10>.  (line  16)
* attach_scale (in module h5py.h5ds):    Module H5DS.         (line   8)
* ATTR (in module h5py.h5i):             Identifier classes.  (line  16)
* AttrID (class in h5py.h5a):            Attribute objects.   (line   6)
* AttrInfo (class in h5py.h5a):          Info objects.        (line   6)
* BADID (in module h5py.h5i):            Identifier classes.  (line   6)
* BITFIELD (in module h5py.h5t):         Datatype class codes.
                                                              (line  16)
* BKG_NO (in module h5py.h5t):           API Constants.       (line  48)
* BKG_TEMP (in module h5py.h5t):         API Constants.       (line  50)
* BKG_YES (in module h5py.h5t):          API Constants.       (line  52)
* CacheConfig (class in h5py.h5ac):      Module H5AC.         (line   8)
* check_dtype() (in module h5py.h5t):    Functions specific to h5py.
                                                              (line 107)
* check_enum_dtype() (in module h5py.h5t): Functions specific to h5py.
                                                              (line  76)
* check_string_dtype() (in module h5py.h5t): Functions specific to h5py.
                                                              (line  43)
* check_vlen_dtype() (in module h5py.h5t): Functions specific to h5py.
                                                              (line  61)
* CHUNKED (in module h5py.h5d):          Storage strategies.  (line  10)
* close (h5py.h5f.FileID attribute):     File objects.        (line  24)
* CLOSE_DEFAULT (in module h5py.h5f):    File close strength. (line  12)
* CLOSE_SEMI (in module h5py.h5f):       File close strength. (line   8)
* CLOSE_STRONG (in module h5py.h5f):     File close strength. (line  10)
* CLOSE_WEAK (in module h5py.h5f):       File close strength. (line   6)
* commit (h5py.h5t.TypeID attribute):    Type classes.        (line  14)
* committed (h5py.h5t.TypeID attribute): Type classes.        (line  21)
* COMPACT (in module h5py.h5d):          Storage strategies.  (line   6)
* COMPOUND (in module h5py.h5t):         Datatype class codes.
                                                              (line  20)
* CONTIGUOUS (in module h5py.h5d):       Storage strategies.  (line   8)
* convert() (in module h5py.h5t):        Functional API<10>.  (line  40)
* copy (h5py.h5p.PropInstanceID attribute): Base classes.     (line  37)
* copy (h5py.h5s.SpaceID attribute):     Dataspace objects.   (line  24)
* copy (h5py.h5t.TypeID attribute):      Type classes.        (line  26)
* copy() (in module h5py.h5o):           Functional API<6>.   (line  18)
* COPY_EXPAND_EXT_LINK_FLAG (in module h5py.h5o): Copy flags. (line  14)
* COPY_EXPAND_REFERENCE_FLAG (in module h5py.h5o): Copy flags.
                                                              (line  18)
* COPY_EXPAND_SOFT_LINK_FLAG (in module h5py.h5o): Copy flags.
                                                              (line  10)
* COPY_SHALLOW_HIERARCHY_FLAG (in module h5py.h5o): Copy flags.
                                                              (line   6)
* COPY_WITHOUT_ATTR_FLAG (in module h5py.h5o): Copy flags.    (line  22)
* corder (h5py.h5a.AttrInfo attribute):  Info objects.        (line   8)
* corder_valid (h5py.h5a.AttrInfo attribute): Info objects.   (line  12)
* CORE (in module h5py.h5fd):            File drivers types.  (line   6)
* create() (in module h5py.h5a):         Functional API.      (line   6)
* create() (in module h5py.h5d):         Functional API<2>.   (line  14)
* create() (in module h5py.h5f):         Functional API<3>.   (line  21)
* create() (in module h5py.h5g):         Functional API<4>.   (line  10)
* create() (in module h5py.h5p):         Functional API<7>.   (line   6)
* create() (in module h5py.h5r):         Functional API<8>.   (line   6)
* create() (in module h5py.h5s):         Functional API<9>.   (line   6)
* create() (in module h5py.h5t):         Functional API<10>.  (line   6)
* create_external (h5py.h5l.LinkProxy attribute): Linkproxy objects.
                                                              (line  31)
* create_hard (h5py.h5l.LinkProxy attribute): Linkproxy objects.
                                                              (line  37)
* create_simple() (in module h5py.h5s):  Functional API<9>.   (line  11)
* create_soft (h5py.h5l.LinkProxy attribute): Linkproxy objects.
                                                              (line  43)
* CRT_ORDER_INDEXED (in module h5py.h5p): Order tracking flags.
                                                              (line   8)
* CRT_ORDER_TRACKED (in module h5py.h5p): Order tracking flags.
                                                              (line   6)
* cset (h5py.h5a.AttrInfo attribute):    Info objects.        (line  16)
* CSET_ASCII (in module h5py.h5t):       API Constants.       (line  38)
* CSET_UTF8 (in module h5py.h5t):        API Constants.       (line  40)
* C_S1 (in module h5py.h5t):             String types.        (line   6)
* DATASET (in module h5py.h5g):          Object type codes.   (line  14)
* DATASET (in module h5py.h5i):          Identifier classes.  (line  14)
* DatasetID (class in h5py.h5d):         Dataset Objects.     (line   6)
* DATASET_ACCESS (in module h5py.h5p):   Predefined classes.  (line  16)
* DATASET_CREATE (in module h5py.h5p):   Predefined classes.  (line  12)
* DATASET_REGION (in module h5py.h5r):   API constants.       (line  10)
* DATASET_XFER (in module h5py.h5p):     Predefined classes.  (line  14)
* DATASPACE (in module h5py.h5i):        Identifier classes.  (line  12)
* DATATYPE (in module h5py.h5i):         Identifier classes.  (line  24)
* data_size (h5py.h5a.AttrInfo attribute): Info objects.      (line  21)
* decode() (in module h5py.h5s):         Functional API<9>.   (line  21)
* decode() (in module h5py.h5t):         Functional API<10>.  (line  35)
* decrement (h5py.h5ac.CacheConfig attribute): Module H5AC.   (line  20)
* decr_mode (h5py.h5ac.CacheConfig attribute): Module H5AC.   (line  18)
* dec_ref (in module h5py.h5i):          Functional API<5>.   (line   6)
* DEFAULT (in module h5py.h5p):          Predefined classes.  (line   6)
* delete() (in module h5py.h5a):         Functional API.      (line  63)
* dereference() (in module h5py.h5r):    Functional API<8>.   (line  23)
* detach_scale (in module h5py.h5ds):    Module H5DS.         (line  13)
* detect_class (h5py.h5t.TypeID attribute): Type classes.     (line  30)
* dirty_bytes_threshold (h5py.h5ac.CacheConfig attribute): Module H5AC.
                                                              (line  22)
* DIR_ASCEND (in module h5py.h5t):       API Constants.       (line  22)
* DIR_DEFAULT (in module h5py.h5t):      API Constants.       (line  20)
* DIR_DESCEND (in module h5py.h5t):      API Constants.       (line  24)
* DISABLE_EDC (in module h5py.h5z):      Other flags.         (line  10)
* dtype (h5py.h5a.AttrID attribute):     Attribute objects.   (line  19)
* dtype (h5py.h5d.DatasetID attribute):  Dataset Objects.     (line  23)
* dtype (h5py.h5t.TypeID attribute):     Type classes.        (line  36)
* empty_reserve (h5py.h5ac.CacheConfig attribute): Module H5AC.
                                                              (line  24)
* ENABLE_EDC (in module h5py.h5z):       Other flags.         (line  12)
* encode (h5py.h5s.SpaceID attribute):   Dataspace objects.   (line  28)
* encode (h5py.h5t.TypeID attribute):    Type classes.        (line  40)
* ENUM (in module h5py.h5t):             Datatype class codes.
                                                              (line  24)
* enum_create() (in module h5py.h5t):    Functional API<10>.  (line  23)
* enum_dtype() (in module h5py.h5t):     Functions specific to h5py.
                                                              (line  68)
* enum_insert (h5py.h5t.TypeEnumID attribute): Compound Types.
                                                              (line  68)
* enum_nameof (h5py.h5t.TypeEnumID attribute): Compound Types.
                                                              (line  75)
* enum_valueof (h5py.h5t.TypeEnumID attribute): Compound Types.
                                                              (line  81)
* epochs_before_eviction (h5py.h5ac.CacheConfig attribute): Module H5AC.
                                                              (line  28)
* epoch_length (h5py.h5ac.CacheConfig attribute): Module H5AC.
                                                              (line  26)
* equal (h5py.h5p.PropID attribute):     Base classes.        (line  12)
* equal (h5py.h5t.TypeID attribute):     Type classes.        (line  46)
* evictions_enabled (h5py.h5ac.CacheConfig attribute): Module H5AC.
                                                              (line  30)
* exists (h5py.h5l.LinkProxy attribute): Linkproxy objects.   (line  49)
* exists() (in module h5py.h5a):         Functional API.      (line  37)
* extend (h5py.h5d.DatasetID attribute): Dataset Objects.     (line  27)
* extent_copy (h5py.h5s.SpaceID attribute): Dataspace objects.
                                                              (line  34)
* FAMILY (in module h5py.h5fd):          File drivers types.  (line   8)
* FILE (in module h5py.h5i):             Identifier classes.  (line   8)
* FileID (class in h5py.h5f):            File objects.        (line   6)
* FILE_ACCESS (in module h5py.h5p):      Predefined classes.  (line  10)
* FILE_CREATE (in module h5py.h5p):      Predefined classes.  (line   8)
* FILL_TIME_ALLOC (in module h5py.h5d):  Fill time.           (line   6)
* FILL_TIME_IFSET (in module h5py.h5d):  Fill time.           (line  10)
* FILL_TIME_NEVER (in module h5py.h5d):  Fill time.           (line   8)
* FILL_VALUE_DEFAULT (in module h5py.h5d): Fill values.       (line   8)
* fill_value_defined (h5py.h5p.PropDCID attribute): Dataset creation.
                                                              (line  17)
* FILL_VALUE_UNDEFINED (in module h5py.h5d): Fill values.     (line   6)
* FILL_VALUE_USER_DEFINED (in module h5py.h5d): Fill values.  (line  10)
* FILTER_ALL (in module h5py.h5z):       Predefined filters.  (line   8)
* filter_avail (in module h5py.h5z):     Module H5Z.          (line   8)
* FILTER_CONFIG_DECODE_ENABLED (in module h5py.h5z): Other flags.
                                                              (line   8)
* FILTER_CONFIG_ENCODE_ENABLED (in module h5py.h5z): Other flags.
                                                              (line   6)
* FILTER_DEFLATE (in module h5py.h5z):   Predefined filters.  (line  10)
* FILTER_FLETCHER32 (in module h5py.h5z): Predefined filters. (line  14)
* FILTER_LZF (in module h5py.h5z):       Predefined filters.  (line  20)
* FILTER_NONE (in module h5py.h5z):      Predefined filters.  (line   6)
* FILTER_SCALEOFFSET (in module h5py.h5z): Predefined filters.
                                                              (line  18)
* FILTER_SHUFFLE (in module h5py.h5z):   Predefined filters.  (line  12)
* FILTER_SZIP (in module h5py.h5z):      Predefined filters.  (line  16)
* find() (in module h5py.h5t):           Functional API<10>.  (line  48)
* FLAG_DEFMASK (in module h5py.h5z):     Filter flags.        (line   6)
* FLAG_INVMASK (in module h5py.h5z):     Filter flags.        (line  12)
* FLAG_MANDATORY (in module h5py.h5z):   Filter flags.        (line   8)
* FLAG_OPTIONAL (in module h5py.h5z):    Filter flags.        (line  10)
* FLAG_REVERSE (in module h5py.h5z):     Filter flags.        (line  14)
* FLAG_SKIP_EDC (in module h5py.h5z):    Filter flags.        (line  16)
* flash_incr_mode (h5py.h5ac.CacheConfig attribute): Module H5AC.
                                                              (line  32)
* flash_multiple (h5py.h5ac.CacheConfig attribute): Module H5AC.
                                                              (line  34)
* flash_threshold (h5py.h5ac.CacheConfig attribute): Module H5AC.
                                                              (line  36)
* FLOAT (in module h5py.h5t):            Datatype class codes.
                                                              (line  10)
* flush (h5py.h5d.DatasetID attribute):  Dataset Objects.     (line  34)
* flush() (in module h5py.h5f):          Functional API<3>.   (line  37)
* FORTRAN_S1 (in module h5py.h5t):       String types.        (line  10)
* GENPROP_CLS (in module h5py.h5i):      Identifier classes.  (line  20)
* GENPROP_LST (in module h5py.h5i):      Identifier classes.  (line  22)
* get() (in module h5py.h5pl):           Module H5PL.         (line  15)
* get_access_plist (h5py.h5d.DatasetID attribute): Dataset Objects.
                                                              (line  49)
* get_access_plist (h5py.h5f.FileID attribute): File objects. (line  31)
* get_alignment() (h5py.h5p.PropFAID method): File access.    (line  12)
* get_alloc_time (h5py.h5p.PropDCID attribute): Dataset creation.
                                                              (line  28)
* get_array_dims (h5py.h5t.TypeArrayID attribute): Other types.
                                                              (line  12)
* get_array_ndims (h5py.h5t.TypeArrayID attribute): Other types.
                                                              (line  17)
* get_attr_creation_order (h5py.h5p.PropOCID attribute): Base classes.
                                                              (line  62)
* get_attr_phase_change (h5py.h5p.PropOCID attribute): Base classes.
                                                              (line  67)
* get_cache (h5py.h5p.PropFAID attribute): File access.       (line  17)
* get_char_encoding (h5py.h5p.PropLCID attribute): Link creation.
                                                              (line  12)
* get_chunk (h5py.h5p.PropDCID attribute): Dataset creation.  (line  33)
* get_chunk_cache (h5py.h5p.PropDAID attribute): Dataset access.
                                                              (line  12)
* get_chunk_info (h5py.h5d.DatasetID attribute): Dataset Objects.
                                                              (line  54)
* get_chunk_info_by_coord (h5py.h5d.DatasetID attribute): Dataset Objects.
                                                              (line  64)
* get_class (h5py.h5t.TypeID attribute): Type classes.        (line  51)
* get_class() (h5py.h5p.PropInstanceID method): Base classes. (line  41)
* get_comment (h5py.h5g.GroupID attribute): Group objects.    (line  32)
* get_comment() (in module h5py.h5o):    Functional API<6>.   (line  42)
* get_config() (in module h5py.h5):      Library API.         (line   6)
* get_copy_object (h5py.h5p.PropCopyID attribute): Base classes.
                                                              (line 104)
* get_create_intermediate_group (h5py.h5p.PropLCID attribute): Link creation.
                                                              (line  20)
* get_create_plist (h5py.h5d.DatasetID attribute): Dataset Objects.
                                                              (line  74)
* get_create_plist (h5py.h5f.FileID attribute): File objects. (line  36)
* get_create_plist (h5py.h5g.GroupID attribute): Group objects.
                                                              (line  36)
* get_create_plist (h5py.h5t.TypeID attribute): Type classes. (line  55)
* get_cset (h5py.h5t.TypeStringID attribute): Strings.        (line  12)
* get_driver (h5py.h5p.PropFAID attribute): File access.      (line  31)
* get_ebias (h5py.h5t.TypeFloatID attribute): Atomic classes. (line 103)
* get_elink_fapl (h5py.h5p.PropLAID attribute): Link access.  (line  12)
* get_elink_prefix (h5py.h5p.PropLAID attribute): Link access.
                                                              (line  17)
* get_external (h5py.h5p.PropDCID attribute): Dataset creation.
                                                              (line  37)
* get_external_count (h5py.h5p.PropDCID attribute): Dataset creation.
                                                              (line  49)
* get_fapl_core (h5py.h5p.PropFAID attribute): File access.   (line  52)
* get_fapl_family (h5py.h5p.PropFAID attribute): File access. (line  62)
* get_fclose_degree (h5py.h5p.PropFAID attribute): File access.
                                                              (line  70)
* get_fields (h5py.h5t.TypeFloatID attribute): Atomic classes.
                                                              (line 107)
* get_filesize (h5py.h5f.FileID attribute): File objects.     (line  47)
* get_file_id (in module h5py.h5i):      Functional API<5>.   (line  14)
* get_file_image (h5py.h5f.FileID attribute): File objects.   (line  41)
* get_file_space_strategy (h5py.h5p.PropFCID attribute): File creation.
                                                              (line  12)
* get_fill_time (h5py.h5p.PropDCID attribute): Dataset creation.
                                                              (line  53)
* get_fill_value (h5py.h5p.PropDCID attribute): Dataset creation.
                                                              (line  64)
* get_filter (h5py.h5p.PropDCID attribute): Dataset creation. (line  70)
* get_filter_by_id (h5py.h5p.PropDCID attribute): Dataset creation.
                                                              (line  83)
* get_filter_info (in module h5py.h5z):  Module H5Z.          (line  21)
* get_freespace (h5py.h5f.FileID attribute): File objects.    (line  52)
* get_info (h5py.h5l.LinkProxy attribute): Linkproxy objects. (line  53)
* get_info() (in module h5py.h5a):       Functional API.      (line  85)
* get_info() (in module h5py.h5o):       Functional API<6>.   (line  95)
* get_inpad (h5py.h5t.TypeFloatID attribute): Atomic classes. (line 122)
* get_intent (h5py.h5f.FileID attribute): File objects.       (line  57)
* get_label (in module h5py.h5ds):       Module H5DS.         (line  19)
* get_layout (h5py.h5p.PropDCID attribute): Dataset creation. (line  96)
* get_libversion() (in module h5py.h5):  Library API.         (line  10)
* get_libver_bounds (h5py.h5p.PropFAID attribute): File access.
                                                              (line  83)
* get_linkval (h5py.h5g.GroupID attribute): Group objects.    (line  41)
* get_link_creation_order (h5py.h5p.PropFCID attribute): File creation.
                                                              (line  19)
* get_link_creation_order (h5py.h5p.PropGCID attribute): Group creation.
                                                              (line  12)
* get_mdc_config (h5py.h5f.FileID attribute): File objects.   (line  62)
* get_mdc_config (h5py.h5p.PropFAID attribute): File access.  (line  96)
* get_mdc_hit_rate (h5py.h5f.FileID attribute): File objects. (line  68)
* get_mdc_size (h5py.h5f.FileID attribute): File objects.     (line  72)
* get_member_class (h5py.h5t.TypeCompoundID attribute): Compound Types.
                                                              (line  36)
* get_member_index (h5py.h5t.TypeCompositeID attribute): Compound Types.
                                                              (line  15)
* get_member_name (h5py.h5t.TypeCompositeID attribute): Compound Types.
                                                              (line  20)
* get_member_offset (h5py.h5t.TypeCompoundID attribute): Compound Types.
                                                              (line  41)
* get_member_type (h5py.h5t.TypeCompoundID attribute): Compound Types.
                                                              (line  46)
* get_member_value (h5py.h5t.TypeEnumID attribute): Compound Types.
                                                              (line  85)
* get_name (h5py.h5a.AttrID attribute):  Attribute objects.   (line  24)
* get_name (in module h5py.h5i):         Functional API<5>.   (line  18)
* get_name() (in module h5py.h5f):       Functional API<3>.   (line  74)
* get_name() (in module h5py.h5r):       Functional API<8>.   (line  63)
* get_nfilters (h5py.h5p.PropDCID attribute): Dataset creation.
                                                              (line 109)
* get_nlinks (h5py.h5p.PropLAID attribute): Link access.      (line  21)
* get_nmembers (h5py.h5t.TypeCompositeID attribute): Compound Types.
                                                              (line  25)
* get_norm (h5py.h5t.TypeFloatID attribute): Atomic classes.  (line 132)
* get_num_attrs() (in module h5py.h5a):  Functional API.      (line  81)
* get_num_chunks (h5py.h5d.DatasetID attribute): Dataset Objects.
                                                              (line  79)
* get_num_objs (h5py.h5g.GroupID attribute): Group objects.   (line  46)
* get_num_scales (in module h5py.h5ds):  Module H5DS.         (line  24)
* get_objinfo() (in module h5py.h5g):    Functional API<4>.   (line  31)
* get_objname_by_idx (h5py.h5g.GroupID attribute): Group objects.
                                                              (line  50)
* get_objtype_by_idx (h5py.h5g.GroupID attribute): Group objects.
                                                              (line  54)
* get_obj_count() (in module h5py.h5f):  Functional API<3>.   (line  79)
* get_obj_ids() (in module h5py.h5f):    Functional API<3>.   (line 100)
* get_obj_track_times (h5py.h5p.PropOCID attribute): Base classes.
                                                              (line  71)
* get_obj_type() (in module h5py.h5r):   Functional API<8>.   (line  45)
* get_offset (h5py.h5d.DatasetID attribute): Dataset Objects. (line  91)
* get_offset (h5py.h5t.TypeAtomicID attribute): Atomic classes.
                                                              (line  15)
* get_order (h5py.h5t.TypeAtomicID attribute): Atomic classes.
                                                              (line  19)
* get_pad (h5py.h5t.TypeAtomicID attribute): Atomic classes.  (line  27)
* get_precision (h5py.h5t.TypeAtomicID attribute): Atomic classes.
                                                              (line  37)
* get_ref (in module h5py.h5i):          Functional API<5>.   (line  28)
* get_region() (in module h5py.h5r):     Functional API<8>.   (line  33)
* get_regular_hyperslab (h5py.h5s.SpaceID attribute): Dataspace objects.
                                                              (line  39)
* get_scale_name (in module h5py.h5ds):  Module H5DS.         (line  30)
* get_select_bounds (h5py.h5s.SpaceID attribute): Dataspace objects.
                                                              (line  44)
* get_select_elem_npoints (h5py.h5s.SpaceID attribute): Dataspace objects.
                                                              (line  49)
* get_select_elem_pointlist (h5py.h5s.SpaceID attribute): Dataspace objects.
                                                              (line  54)
* get_select_hyper_blocklist (h5py.h5s.SpaceID attribute): Dataspace objects.
                                                              (line  59)
* get_select_hyper_nblocks (h5py.h5s.SpaceID attribute): Dataspace objects.
                                                              (line  72)
* get_select_npoints (h5py.h5s.SpaceID attribute): Dataspace objects.
                                                              (line  76)
* get_select_type (h5py.h5s.SpaceID attribute): Dataspace objects.
                                                              (line  81)
* get_sieve_buf_size (h5py.h5p.PropFAID attribute): File access.
                                                              (line 100)
* get_sign (h5py.h5t.TypeIntegerID attribute): Atomic classes.
                                                              (line  73)
* get_simple_extent_dims (h5py.h5s.SpaceID attribute): Dataspace objects.
                                                              (line  93)
* get_simple_extent_ndims (h5py.h5s.SpaceID attribute): Dataspace objects.
                                                              (line 100)
* get_simple_extent_npoints (h5py.h5s.SpaceID attribute): Dataspace objects.
                                                              (line 104)
* get_simple_extent_type (h5py.h5s.SpaceID attribute): Dataspace objects.
                                                              (line 108)
* get_size (h5py.h5t.TypeID attribute):  Type classes.        (line  60)
* get_sizes (h5py.h5p.PropFCID attribute): File creation.     (line  24)
* get_space (h5py.h5a.AttrID attribute): Attribute objects.   (line  28)
* get_space (h5py.h5d.DatasetID attribute): Dataset Objects.  (line  98)
* get_space_status (h5py.h5d.DatasetID attribute): Dataset Objects.
                                                              (line 103)
* get_storage_size (h5py.h5a.AttrID attribute): Attribute objects.
                                                              (line  32)
* get_storage_size (h5py.h5d.DatasetID attribute): Dataset Objects.
                                                              (line 114)
* get_strpad (h5py.h5t.TypeStringID attribute): Strings.      (line  16)
* get_super (h5py.h5t.TypeID attribute): Type classes.        (line  64)
* get_tag (h5py.h5t.TypeOpaqueID attribute): Other types.     (line  27)
* get_type (h5py.h5a.AttrID attribute):  Attribute objects.   (line  36)
* get_type (h5py.h5d.DatasetID attribute): Dataset Objects.   (line 129)
* get_type (in module h5py.h5i):         Functional API<5>.   (line  32)
* get_userblock (h5py.h5p.PropFCID attribute): File creation. (line  33)
* get_val (h5py.h5l.LinkProxy attribute): Linkproxy objects.  (line  60)
* get_version (h5py.h5p.PropFCID attribute): File creation.   (line  37)
* get_vfd_handle (h5py.h5f.FileID attribute): File objects.   (line  77)
* get_virtual_count (h5py.h5p.PropDCID attribute): Dataset creation.
                                                              (line 113)
* get_virtual_dsetname (h5py.h5p.PropDCID attribute): Dataset creation.
                                                              (line 117)
* get_virtual_filename (h5py.h5p.PropDCID attribute): Dataset creation.
                                                              (line 122)
* get_virtual_prefix (h5py.h5p.PropDAID attribute): Dataset access.
                                                              (line  26)
* get_virtual_printf_gap (h5py.h5p.PropDAID attribute): Dataset access.
                                                              (line  31)
* get_virtual_srcspace (h5py.h5p.PropDCID attribute): Dataset creation.
                                                              (line 127)
* get_virtual_view (h5py.h5p.PropDAID attribute): Dataset access.
                                                              (line  37)
* get_virtual_vspace (h5py.h5p.PropDCID attribute): Dataset creation.
                                                              (line 132)
* GROUP (in module h5py.h5g):            Object type codes.   (line  10)
* GROUP (in module h5py.h5i):            Identifier classes.  (line  10)
* GroupID (class in h5py.h5g):           Group objects.       (line   6)
* GroupStat (class in h5py.h5g):         Info objects<2>.     (line   6)
* GROUP_CREATE (in module h5py.h5p):     Predefined classes.  (line  24)
* h5py.h5 (module):                      Module H5.           (line   6)
* h5py.h5a (module):                     Module H5A.          (line   6)
* h5py.h5ac (module):                    Module H5AC.         (line   6)
* h5py.h5d (module):                     Module H5D.          (line   6)
* h5py.h5ds (module):                    Module H5DS.         (line   6)
* h5py.h5f (module):                     Module H5F.          (line   6)
* h5py.h5fd (module):                    Module H5FD.         (line   6)
* h5py.h5g (module):                     Module H5G.          (line   6)
* h5py.h5i (module):                     Functional API<5>.   (line   6)
* h5py.h5l (module):                     Linkproxy objects.   (line   6)
* h5py.h5o (module):                     Module H5O.          (line   6)
* h5py.h5p (module):                     Module H5P.          (line   6)
* h5py.h5pl (module):                    Module H5PL.         (line   6)
* h5py.h5r (module):                     Module H5R.          (line   6)
* h5py.h5s (module):                     Module H5S.          (line   6)
* h5py.h5t (module):                     Module H5T.          (line   6)
* h5py.h5z (module):                     Module H5Z.          (line   6)
* h5py._objects (module):                Base object classes. (line   6)
* H5PYConfig (class in h5py.h5):         Configuration class. (line   6)
* IEEE_F32BE (in module h5py.h5t):       Floating-point.      (line   8)
* IEEE_F32LE (in module h5py.h5t):       Floating-point.      (line   6)
* IEEE_F64BE (in module h5py.h5t):       Floating-point.      (line  12)
* IEEE_F64LE (in module h5py.h5t):       Floating-point.      (line  10)
* increment (h5py.h5ac.CacheConfig attribute): Module H5AC.   (line  40)
* incr_mode (h5py.h5ac.CacheConfig attribute): Module H5AC.   (line  38)
* inc_ref (in module h5py.h5i):          Functional API<5>.   (line  38)
* INDEX_CRT_ORDER (in module h5py.h5):   Module constants.    (line  10)
* INDEX_NAME (in module h5py.h5):        Module constants.    (line   6)
* initial_size (h5py.h5ac.CacheConfig attribute): Module H5AC.
                                                              (line  42)
* insert (h5py.h5t.TypeCompoundID attribute): Compound Types. (line  51)
* insert() (in module h5py.h5pl):        Module H5PL.         (line  20)
* INTEGER (in module h5py.h5t):          Datatype class codes.
                                                              (line   8)
* is_attached (in module h5py.h5ds):     Module H5DS.         (line  35)
* is_hdf5() (in module h5py.h5f):        Functional API<3>.   (line  51)
* is_regular_hyperslab (h5py.h5s.SpaceID attribute): Dataspace objects.
                                                              (line 112)
* is_scale (in module h5py.h5ds):        Module H5DS.         (line  41)
* is_simple (h5py.h5s.SpaceID attribute): Dataspace objects.  (line 116)
* is_variable_str (h5py.h5t.TypeStringID attribute): Strings. (line  32)
* iterate (h5py.h5l.LinkProxy attribute): Linkproxy objects.  (line  66)
* iterate (in module h5py.h5ds):         Module H5DS.         (line  45)
* iterate() (in module h5py.h5a):        Functional API.      (line 111)
* iterate() (in module h5py.h5g):        Functional API<4>.   (line  16)
* ITER_DEC (in module h5py.h5):          Module constants.    (line  23)
* ITER_INC (in module h5py.h5):          Module constants.    (line  19)
* ITER_NATIVE (in module h5py.h5):       Module constants.    (line  14)
* LIBVER_EARLIEST (in module h5py.h5f):  Library version bounding.
                                                              (line   6)
* LIBVER_LATEST (in module h5py.h5f):    Library version bounding.
                                                              (line  12)
* LIBVER_V110 (in module h5py.h5f):      Library version bounding.
                                                              (line  10)
* LIBVER_V18 (in module h5py.h5f):       Library version bounding.
                                                              (line   8)
* link (h5py.h5g.GroupID attribute):     Group objects.       (line  67)
* LINK (in module h5py.h5g):             Object type codes.   (line   6)
* link() (in module h5py.h5o):           Functional API<6>.   (line  12)
* LinkProxy (class in h5py.h5l):         Linkproxy objects.   (line  10)
* LINK_ACCESS (in module h5py.h5p):      Predefined classes.  (line  22)
* LINK_CREATE (in module h5py.h5p):      Predefined classes.  (line  20)
* LINK_HARD (in module h5py.h5g):        Link type codes.     (line   6)
* LINK_SOFT (in module h5py.h5g):        Link type codes.     (line   8)
* lock (h5py.h5t.TypeID attribute):      Type classes.        (line  69)
* LOG (in module h5py.h5fd):             File drivers types.  (line  10)
* LOG_ALL (in module h5py.h5fd):         Logging driver settings.
                                                              (line  46)
* LOG_ALLOC (in module h5py.h5fd):       Logging driver settings.
                                                              (line  44)
* LOG_FILE_IO (in module h5py.h5fd):     Logging driver settings.
                                                              (line  20)
* LOG_FILE_READ (in module h5py.h5fd):   Logging driver settings.
                                                              (line  16)
* LOG_FILE_WRITE (in module h5py.h5fd):  Logging driver settings.
                                                              (line  18)
* LOG_FLAVOR (in module h5py.h5fd):      Logging driver settings.
                                                              (line  22)
* LOG_LOC_IO (in module h5py.h5fd):      Logging driver settings.
                                                              (line  14)
* LOG_LOC_READ (in module h5py.h5fd):    Logging driver settings.
                                                              (line   8)
* LOG_LOC_SEEK (in module h5py.h5fd):    Logging driver settings.
                                                              (line  12)
* LOG_LOC_WRITE (in module h5py.h5fd):   Logging driver settings.
                                                              (line  10)
* LOG_NUM_IO (in module h5py.h5fd):      Logging driver settings.
                                                              (line  30)
* LOG_NUM_READ (in module h5py.h5fd):    Logging driver settings.
                                                              (line  24)
* LOG_NUM_SEEK (in module h5py.h5fd):    Logging driver settings.
                                                              (line  28)
* LOG_NUM_WRITE (in module h5py.h5fd):   Logging driver settings.
                                                              (line  26)
* LOG_TIME_CLOSE (in module h5py.h5fd):  Logging driver settings.
                                                              (line  40)
* LOG_TIME_IO (in module h5py.h5fd):     Logging driver settings.
                                                              (line  42)
* LOG_TIME_OPEN (in module h5py.h5fd):   Logging driver settings.
                                                              (line  32)
* LOG_TIME_READ (in module h5py.h5fd):   Logging driver settings.
                                                              (line  34)
* LOG_TIME_SEEK (in module h5py.h5fd):   Logging driver settings.
                                                              (line  38)
* LOG_TIME_WRITE (in module h5py.h5fd):  Logging driver settings.
                                                              (line  36)
* lower_hr_threshold (h5py.h5ac.CacheConfig attribute): Module H5AC.
                                                              (line  44)
* max_decrement (h5py.h5ac.CacheConfig attribute): Module H5AC.
                                                              (line  46)
* max_increment (h5py.h5ac.CacheConfig attribute): Module H5AC.
                                                              (line  48)
* max_size (h5py.h5ac.CacheConfig attribute): Module H5AC.    (line  50)
* MEM_BTREE (in module h5py.h5fd):       Memory usage types for MULTI file driver.
                                                              (line  10)
* MEM_DEFAULT (in module h5py.h5fd):     Memory usage types for MULTI file driver.
                                                              (line   6)
* MEM_DRAW (in module h5py.h5fd):        Memory usage types for MULTI file driver.
                                                              (line  12)
* MEM_GHEAP (in module h5py.h5fd):       Memory usage types for MULTI file driver.
                                                              (line  14)
* MEM_LHEAP (in module h5py.h5fd):       Memory usage types for MULTI file driver.
                                                              (line  16)
* MEM_NTYPES (in module h5py.h5fd):      Memory usage types for MULTI file driver.
                                                              (line  20)
* MEM_OHDR (in module h5py.h5fd):        Memory usage types for MULTI file driver.
                                                              (line  18)
* MEM_SUPER (in module h5py.h5fd):       Memory usage types for MULTI file driver.
                                                              (line   8)
* min_clean_fraction (h5py.h5ac.CacheConfig attribute): Module H5AC.
                                                              (line  52)
* min_size (h5py.h5ac.CacheConfig attribute): Module H5AC.    (line  54)
* mount() (in module h5py.h5f):          Functional API<3>.   (line  56)
* move (h5py.h5g.GroupID attribute):     Group objects.       (line  85)
* move (h5py.h5l.LinkProxy attribute):   Linkproxy objects.   (line 102)
* MPIO (in module h5py.h5fd):            File drivers types.  (line  12)
* MPIO_COLLECTIVE (in module h5py.h5fd): Data transfer modes for MPIO driver.
                                                              (line   8)
* MPIO_INDEPENDENT (in module h5py.h5fd): Data transfer modes for MPIO driver.
                                                              (line   6)
* MULTI (in module h5py.h5fd):           File drivers types.  (line  14)
* name (h5py.h5a.AttrID attribute):      Attribute objects.   (line  40)
* name (h5py.h5f.FileID attribute):      File objects.        (line  88)
* NATIVE_DOUBLE (in module h5py.h5t):    Integer types.       (line  56)
* NATIVE_FLOAT (in module h5py.h5t):     Integer types.       (line  54)
* NATIVE_INT16 (in module h5py.h5t):     Integer types.       (line  42)
* NATIVE_INT32 (in module h5py.h5t):     Integer types.       (line  46)
* NATIVE_INT64 (in module h5py.h5t):     Integer types.       (line  50)
* NATIVE_INT8 (in module h5py.h5t):      Integer types.       (line  38)
* NATIVE_UINT16 (in module h5py.h5t):    Integer types.       (line  44)
* NATIVE_UINT32 (in module h5py.h5t):    Integer types.       (line  48)
* NATIVE_UINT64 (in module h5py.h5t):    Integer types.       (line  52)
* NATIVE_UINT8 (in module h5py.h5t):     Integer types.       (line  40)
* NORM_IMPLIED (in module h5py.h5t):     API Constants.       (line  32)
* NORM_MSBSET (in module h5py.h5t):      API Constants.       (line  34)
* NORM_NONE (in module h5py.h5t):        API Constants.       (line  36)
* NO_CLASS (in module h5py.h5s):         Dataspace class codes.
                                                              (line   6)
* NO_CLASS (in module h5py.h5t):         Datatype class codes.
                                                              (line   6)
* NO_EDC (in module h5py.h5z):           Other flags.         (line  14)
* OBJECT (in module h5py.h5r):           API constants.       (line   6)
* ObjectID (class in h5py._objects):     Base object classes. (line   8)
* OBJECT_COPY (in module h5py.h5p):      Predefined classes.  (line  18)
* OBJECT_CREATE (in module h5py.h5p):    Predefined classes.  (line  26)
* ObjInfo (class in h5py.h5o):           Info classes.        (line   6)
* OBJ_ALL (in module h5py.h5f):          Object types.        (line  16)
* OBJ_ATTR (in module h5py.h5f):         Object types.        (line  14)
* OBJ_DATASET (in module h5py.h5f):      Object types.        (line   8)
* OBJ_DATATYPE (in module h5py.h5f):     Object types.        (line  12)
* OBJ_FILE (in module h5py.h5f):         Object types.        (line   6)
* OBJ_GROUP (in module h5py.h5f):        Object types.        (line  10)
* OBJ_LOCAL (in module h5py.h5f):        Object types.        (line  18)
* offset_simple (h5py.h5s.SpaceID attribute): Dataspace objects.
                                                              (line 121)
* OPAQUE (in module h5py.h5t):           Datatype class codes.
                                                              (line  18)
* open() (in module h5py.h5a):           Functional API.      (line  19)
* open() (in module h5py.h5d):           Functional API<2>.   (line   6)
* open() (in module h5py.h5f):           Functional API<3>.   (line   6)
* open() (in module h5py.h5g):           Functional API<4>.   (line   6)
* open() (in module h5py.h5o):           Functional API<6>.   (line   6)
* open() (in module h5py.h5t):           Functional API<10>.  (line  11)
* open_file_image() (in module h5py.h5f): Functional API<3>.  (line  65)
* ORDER_BE (in module h5py.h5t):         API Constants.       (line  12)
* ORDER_LE (in module h5py.h5t):         API Constants.       (line  10)
* ORDER_NATIVE (in module h5py.h5t):     API Constants.       (line  18)
* ORDER_NONE (in module h5py.h5t):       API Constants.       (line  16)
* ORDER_VAX (in module h5py.h5t):        API Constants.       (line  14)
* pack (h5py.h5t.TypeCompoundID attribute): Compound Types.   (line  57)
* PAD_BACKGROUND (in module h5py.h5t):   API Constants.       (line  46)
* PAD_ONE (in module h5py.h5t):          API Constants.       (line  44)
* PAD_ZERO (in module h5py.h5t):         API Constants.       (line  42)
* prepend() (in module h5py.h5pl):       Module H5PL.         (line  24)
* PropClassID (class in h5py.h5p):       Base classes.        (line  16)
* PropCopyID (class in h5py.h5p):        Base classes.        (line  98)
* PropCreateID (class in h5py.h5p):      Base classes.        (line  45)
* PropDAID (class in h5py.h5p):          Dataset access.      (line   6)
* PropDCID (class in h5py.h5p):          Dataset creation.    (line   6)
* PropDXID (class in h5py.h5p):          Dataset transfer.    (line   6)
* PropFAID (class in h5py.h5p):          File access.         (line   6)
* PropFCID (class in h5py.h5p):          File creation.       (line   6)
* PropGCID (class in h5py.h5p):          Group creation.      (line   6)
* PropID (class in h5py.h5p):            Base classes.        (line   6)
* PropInstanceID (class in h5py.h5p):    Base classes.        (line  26)
* PropLAID (class in h5py.h5p):          Link access.         (line   6)
* PropLCID (class in h5py.h5p):          Link creation.       (line   6)
* PropOCID (class in h5py.h5p):          Base classes.        (line  51)
* PropTCID (class in h5py.h5p):          Datatype creation.   (line   6)
* PYTHON_OBJECT (in module h5py.h5t):    Python object type.  (line   6)
* py_create() (in module h5py.h5t):      Functions specific to h5py.
                                                              (line   6)
* rank (h5py.h5d.DatasetID attribute):   Dataset Objects.     (line 133)
* read (h5py.h5a.AttrID attribute):      Attribute objects.   (line  44)
* read (h5py.h5d.DatasetID attribute):   Dataset Objects.     (line 137)
* read_direct_chunk() (h5py.h5d.DatasetID method): Dataset Objects.
                                                              (line 156)
* Reference (class in h5py.h5r):         Reference classes.   (line   6)
* REFERENCE (in module h5py.h5i):        Identifier classes.  (line  18)
* REFERENCE (in module h5py.h5t):        Datatype class codes.
                                                              (line  22)
* refresh (h5py.h5d.DatasetID attribute): Dataset Objects.    (line 176)
* RegionReference (class in h5py.h5r):   Reference classes.   (line  24)
* remove() (in module h5py.h5pl):        Module H5PL.         (line  28)
* remove_filter (h5py.h5p.PropDCID attribute): Dataset creation.
                                                              (line 137)
* rename() (in module h5py.h5a):         Functional API.      (line  50)
* reopen (h5py.h5f.FileID attribute):    File objects.        (line  92)
* replace() (in module h5py.h5pl):       Module H5PL.         (line  32)
* reset_mdc_hit_rate_stats (h5py.h5f.FileID attribute): File objects.
                                                              (line  98)
* rpt_fcn_enabled (h5py.h5ac.CacheConfig attribute): Module H5AC.
                                                              (line  56)
* SCALAR (in module h5py.h5s):           Dataspace class codes.
                                                              (line   8)
* SCOPE_GLOBAL (in module h5py.h5f):     File scope.          (line   8)
* SCOPE_LOCAL (in module h5py.h5f):      File scope.          (line   6)
* SEC2 (in module h5py.h5fd):            File drivers types.  (line  16)
* select_all (h5py.h5s.SpaceID attribute): Dataspace objects. (line 127)
* SELECT_AND (in module h5py.h5s):       Selection codes.     (line  12)
* SELECT_APPEND (in module h5py.h5s):    Selection codes.     (line  20)
* select_elements (h5py.h5s.SpaceID attribute): Dataspace objects.
                                                              (line 131)
* select_hyperslab (h5py.h5s.SpaceID attribute): Dataspace objects.
                                                              (line 148)
* SELECT_INVALID (in module h5py.h5s):   Selection codes.     (line  24)
* select_none (h5py.h5s.SpaceID attribute): Dataspace objects.
                                                              (line 155)
* SELECT_NOOP (in module h5py.h5s):      Selection codes.     (line   6)
* SELECT_NOTA (in module h5py.h5s):      Selection codes.     (line  18)
* SELECT_NOTB (in module h5py.h5s):      Selection codes.     (line  16)
* SELECT_OR (in module h5py.h5s):        Selection codes.     (line  10)
* SELECT_PREPEND (in module h5py.h5s):   Selection codes.     (line  22)
* SELECT_SET (in module h5py.h5s):       Selection codes.     (line   8)
* select_valid (h5py.h5s.SpaceID attribute): Dataspace objects.
                                                              (line 159)
* SELECT_XOR (in module h5py.h5s):       Selection codes.     (line  14)
* SEL_ALL (in module h5py.h5s):          Existing selection type.
                                                              (line  12)
* SEL_HYPERSLABS (in module h5py.h5s):   Existing selection type.
                                                              (line  10)
* SEL_NONE (in module h5py.h5s):         Existing selection type.
                                                              (line   6)
* SEL_POINTS (in module h5py.h5s):       Existing selection type.
                                                              (line   8)
* set_alignment() (h5py.h5p.PropFAID method): File access.    (line 105)
* set_alloc_time (h5py.h5p.PropDCID attribute): Dataset creation.
                                                              (line 142)
* set_attr_creation_order (h5py.h5p.PropOCID attribute): Base classes.
                                                              (line  76)
* set_attr_phase_change (h5py.h5p.PropOCID attribute): Base classes.
                                                              (line  84)
* set_cache (h5py.h5p.PropFAID attribute): File access.       (line 110)
* set_char_encoding (h5py.h5p.PropLCID attribute): Link creation.
                                                              (line  25)
* set_chunk (h5py.h5p.PropDCID attribute): Dataset creation.  (line 147)
* set_chunk_cache (h5py.h5p.PropDAID attribute): Dataset access.
                                                              (line  47)
* set_comment (h5py.h5g.GroupID attribute): Group objects.    (line  92)
* set_comment() (in module h5py.h5o):    Functional API<6>.   (line  29)
* set_copy_object (h5py.h5p.PropCopyID attribute): Base classes.
                                                              (line 108)
* set_create_intermediate_group (h5py.h5p.PropLCID attribute): Link creation.
                                                              (line  33)
* set_cset (h5py.h5t.TypeStringID attribute): Strings.        (line  37)
* set_deflate (h5py.h5p.PropDCID attribute): Dataset creation.
                                                              (line 152)
* set_driver (h5py.h5p.PropFAID attribute): File access.      (line 116)
* set_ebias (h5py.h5t.TypeFloatID attribute): Atomic classes. (line 142)
* set_elink_fapl (h5py.h5p.PropLAID attribute): Link access.  (line  25)
* set_elink_prefix (h5py.h5p.PropLAID attribute): Link access.
                                                              (line  30)
* set_extent (h5py.h5d.DatasetID attribute): Dataset Objects. (line 195)
* set_extent_none (h5py.h5s.SpaceID attribute): Dataspace objects.
                                                              (line 164)
* set_extent_simple (h5py.h5s.SpaceID attribute): Dataspace objects.
                                                              (line 168)
* set_external (h5py.h5p.PropDCID attribute): Dataset creation.
                                                              (line 157)
* set_fapl_core (h5py.h5p.PropFAID attribute): File access.   (line 121)
* set_fapl_family (h5py.h5p.PropFAID attribute): File access. (line 136)
* set_fapl_log (h5py.h5p.PropFAID attribute): File access.    (line 150)
* set_fapl_sec2 (h5py.h5p.PropFAID attribute): File access.   (line 157)
* set_fapl_split (h5py.h5p.PropFAID attribute): File access.  (line 161)
* set_fapl_stdio (h5py.h5p.PropFAID attribute): File access.  (line 165)
* set_fclose_degree (h5py.h5p.PropFAID attribute): File access.
                                                              (line 169)
* set_fields (h5py.h5t.TypeFloatID attribute): Atomic classes.
                                                              (line 146)
* set_fileobj_driver (h5py.h5p.PropFAID attribute): File access.
                                                              (line 189)
* set_file_image (h5py.h5p.PropFAID attribute): File access.  (line 183)
* set_file_space_strategy (h5py.h5p.PropFCID attribute): File creation.
                                                              (line  50)
* set_fill_time (h5py.h5p.PropDCID attribute): Dataset creation.
                                                              (line 167)
* set_fill_value (h5py.h5p.PropDCID attribute): Dataset creation.
                                                              (line 178)
* set_filter (h5py.h5p.PropDCID attribute): Dataset creation. (line 184)
* set_fletcher32 (h5py.h5p.PropDCID attribute): Dataset creation.
                                                              (line 210)
* set_initial_size (h5py.h5ac.CacheConfig attribute): Module H5AC.
                                                              (line  58)
* set_inpad (h5py.h5t.TypeFloatID attribute): Atomic classes. (line 152)
* set_label (in module h5py.h5ds):       Module H5DS.         (line  56)
* set_layout (h5py.h5p.PropDCID attribute): Dataset creation. (line 214)
* set_libver_bounds (h5py.h5p.PropFAID attribute): File access.
                                                              (line 193)
* set_link_creation_order (h5py.h5p.PropFCID attribute): File creation.
                                                              (line  56)
* set_link_creation_order (h5py.h5p.PropGCID attribute): Group creation.
                                                              (line  17)
* set_mdc_config (h5py.h5f.FileID attribute): File objects.   (line 104)
* set_mdc_config (h5py.h5p.PropFAID attribute): File access.  (line 206)
* set_nlinks (h5py.h5p.PropLAID attribute): Link access.      (line  34)
* set_norm (h5py.h5t.TypeFloatID attribute): Atomic classes.  (line 162)
* set_obj_track_times (h5py.h5p.PropOCID attribute): Base classes.
                                                              (line  94)
* set_offset (h5py.h5t.TypeAtomicID attribute): Atomic classes.
                                                              (line  41)
* set_order (h5py.h5t.TypeAtomicID attribute): Atomic classes.
                                                              (line  45)
* set_pad (h5py.h5t.TypeAtomicID attribute): Atomic classes.  (line  53)
* set_precision (h5py.h5t.TypeAtomicID attribute): Atomic classes.
                                                              (line  63)
* set_scale (in module h5py.h5ds):       Module H5DS.         (line  61)
* set_scaleoffset (h5py.h5p.PropDCID attribute): Dataset creation.
                                                              (line 227)
* set_shuffle (h5py.h5p.PropDCID attribute): Dataset creation.
                                                              (line 238)
* set_sieve_buf_size (h5py.h5p.PropFAID attribute): File access.
                                                              (line 210)
* set_sign (h5py.h5t.TypeIntegerID attribute): Atomic classes.
                                                              (line  85)
* set_size (h5py.h5t.TypeID attribute):  Type classes.        (line  74)
* set_sizes (h5py.h5p.PropFCID attribute): File creation.     (line  64)
* set_strpad (h5py.h5t.TypeStringID attribute): Strings.      (line  41)
* set_szip (h5py.h5p.PropDCID attribute): Dataset creation.   (line 243)
* set_tag (h5py.h5t.TypeOpaqueID attribute): Other types.     (line  31)
* set_userblock (h5py.h5p.PropFCID attribute): File creation. (line  69)
* set_virtual (h5py.h5p.PropDCID attribute): Dataset creation.
                                                              (line 248)
* set_virtual_prefix (h5py.h5p.PropDAID attribute): Dataset access.
                                                              (line  52)
* set_virtual_printf_gap (h5py.h5p.PropDAID attribute): Dataset access.
                                                              (line  58)
* set_virtual_view (h5py.h5p.PropDAID attribute): Dataset access.
                                                              (line  71)
* SGN_2 (in module h5py.h5t):            API Constants.       (line   8)
* SGN_NONE (in module h5py.h5t):         API Constants.       (line   6)
* shape (h5py.h5a.AttrID attribute):     Attribute objects.   (line  56)
* shape (h5py.h5d.DatasetID attribute):  Dataset Objects.     (line 201)
* shape (h5py.h5s.SpaceID attribute):    Dataspace objects.   (line 178)
* SIMPLE (in module h5py.h5s):           Dataspace class codes.
                                                              (line  10)
* size() (in module h5py.h5pl):          Module H5PL.         (line  36)
* SO_FLOAT_DSCALE (in module h5py.h5z):  Scale/offset-specific options.
                                                              (line   6)
* SO_FLOAT_ESCALE (in module h5py.h5z):  Scale/offset-specific options.
                                                              (line   8)
* SO_INT (in module h5py.h5z):           Scale/offset-specific options.
                                                              (line  10)
* SO_INT_MINBITS_DEFAULT (in module h5py.h5z): Scale/offset-specific options.
                                                              (line  12)
* SpaceID (class in h5py.h5s):           Dataspace objects.   (line   6)
* SPACE_STATUS_ALLOCATED (in module h5py.h5d): Allocation status.
                                                              (line  10)
* SPACE_STATUS_NOT_ALLOCATED (in module h5py.h5d): Allocation status.
                                                              (line   6)
* SPACE_STATUS_PART_ALLOCATED (in module h5py.h5d): Allocation status.
                                                              (line   8)
* special_dtype() (in module h5py.h5t):  Functions specific to h5py.
                                                              (line  84)
* start_swmr_write (h5py.h5f.FileID attribute): File objects. (line 110)
* STDIO (in module h5py.h5fd):           File drivers types.  (line  18)
* STD_I16BE (in module h5py.h5t):        Integer types.       (line  16)
* STD_I16LE (in module h5py.h5t):        Integer types.       (line   8)
* STD_I32BE (in module h5py.h5t):        Integer types.       (line  18)
* STD_I32LE (in module h5py.h5t):        Integer types.       (line  10)
* STD_I64BE (in module h5py.h5t):        Integer types.       (line  20)
* STD_I64LE (in module h5py.h5t):        Integer types.       (line  12)
* STD_I8BE (in module h5py.h5t):         Integer types.       (line  14)
* STD_I8LE (in module h5py.h5t):         Integer types.       (line   6)
* STD_REF_DSETREG (in module h5py.h5t):  Reference types.     (line   8)
* STD_REF_OBJ (in module h5py.h5t):      Reference types.     (line   6)
* STD_U16BE (in module h5py.h5t):        Integer types.       (line  32)
* STD_U16LE (in module h5py.h5t):        Integer types.       (line  24)
* STD_U32BE (in module h5py.h5t):        Integer types.       (line  34)
* STD_U32LE (in module h5py.h5t):        Integer types.       (line  26)
* STD_U64BE (in module h5py.h5t):        Integer types.       (line  36)
* STD_U64LE (in module h5py.h5t):        Integer types.       (line  28)
* STD_U8BE (in module h5py.h5t):         Integer types.       (line  30)
* STD_U8LE (in module h5py.h5t):         Integer types.       (line  22)
* STRING (in module h5py.h5t):           Datatype class codes.
                                                              (line  14)
* string_dtype() (in module h5py.h5t):   Functions specific to h5py.
                                                              (line  27)
* STR_NULLPAD (in module h5py.h5t):      API Constants.       (line  28)
* STR_NULLTERM (in module h5py.h5t):     API Constants.       (line  26)
* STR_SPACEPAD (in module h5py.h5t):     API Constants.       (line  30)
* SZIP_ALLOW_K13_OPTION_MASK (in module h5py.h5z): SZIP-specific options.
                                                              (line   6)
* SZIP_CHIP_OPTION_MASK (in module h5py.h5z): SZIP-specific options.
                                                              (line   8)
* SZIP_EC_OPTION_MASK (in module h5py.h5z): SZIP-specific options.
                                                              (line  10)
* SZIP_MAX_PIXELS_PER_BLOCK (in module h5py.h5z): SZIP-specific options.
                                                              (line  14)
* SZIP_NN_OPTION_MASK (in module h5py.h5z): SZIP-specific options.
                                                              (line  12)
* TIME (in module h5py.h5t):             Datatype class codes.
                                                              (line  12)
* TYPE (in module h5py.h5g):             Object type codes.   (line  18)
* TypeArrayID (class in h5py.h5t):       Other types.         (line   6)
* TypeAtomicID (class in h5py.h5t):      Atomic classes.      (line   9)
* TypeBitfieldID (class in h5py.h5t):    Other types.         (line  42)
* TypeCompositeID (class in h5py.h5t):   Compound Types.      (line   9)
* TypeCompoundID (class in h5py.h5t):    Compound Types.      (line  30)
* TypeEnumID (class in h5py.h5t):        Compound Types.      (line  62)
* TypeFloatID (class in h5py.h5t):       Atomic classes.      (line  97)
* TypeID (class in h5py.h5t):            Type classes.        (line   6)
* TypeIntegerID (class in h5py.h5t):     Atomic classes.      (line  67)
* TypeOpaqueID (class in h5py.h5t):      Other types.         (line  21)
* TypeReferenceID (class in h5py.h5t):   Other types.         (line  48)
* TypeStringID (class in h5py.h5t):      Strings.             (line   6)
* TypeVlenID (class in h5py.h5t):        Other types.         (line  36)
* TYPE_DATASET (in module h5py.h5o):     Object types<2>.     (line   8)
* TYPE_EXTERNAL (in module h5py.h5l):    Link types.          (line  10)
* TYPE_GROUP (in module h5py.h5o):       Object types<2>.     (line   6)
* TYPE_HARD (in module h5py.h5l):        Link types.          (line   6)
* TYPE_NAMED_DATATYPE (in module h5py.h5o): Object types<2>.  (line  10)
* TYPE_SOFT (in module h5py.h5l):        Link types.          (line   8)
* UNLIMITED (in module h5py.h5s):        Module constants<10>.
                                                              (line  10)
* unlink (h5py.h5g.GroupID attribute):   Group objects.       (line  96)
* unmount() (in module h5py.h5f):        Functional API<3>.   (line  61)
* unregister_filter (in module h5py.h5z): Module H5Z.         (line  41)
* upper_hr_threshold (h5py.h5ac.CacheConfig attribute): Module H5AC.
                                                              (line  60)
* VARIABLE (in module h5py.h5t):         String types.        (line  14)
* version (h5py.h5ac.CacheConfig attribute): Module H5AC.     (line  62)
* visit (h5py.h5l.LinkProxy attribute):  Linkproxy objects.   (line 107)
* visit() (in module h5py.h5o):          Functional API<6>.   (line  55)
* VLEN (in module h5py.h5t):             Datatype class codes.
                                                              (line  26)
* vlen_create() (in module h5py.h5t):    Functional API<10>.  (line  27)
* vlen_dtype() (in module h5py.h5t):     Functions specific to h5py.
                                                              (line  54)
* WINDOWS (in module h5py.h5fd):         File drivers types.  (line  20)
* write (h5py.h5a.AttrID attribute):     Attribute objects.   (line  61)
* write (h5py.h5d.DatasetID attribute):  Dataset Objects.     (line 205)
* write_direct_chunk() (h5py.h5d.DatasetID method): Dataset Objects.
                                                              (line 223)



Tag Table:
Node: Top433
Ref: index doc729
Ref: 12729
Node: Contents4221
Ref: index contents4322
Ref: 134322
Ref: index h5py-low-level-api-reference4322
Ref: 144322
Node: Base object classes4637
Ref: objects doc4732
Ref: 154732
Ref: objects base-object-classes4732
Ref: 164732
Ref: objects module-h5py _objects4732
Ref: 04732
Ref: objects h5py _objects ObjectID4820
Ref: 174820
Node: Module H55070
Ref: h5 doc5184
Ref: 185184
Ref: h5 module-h55184
Ref: 195184
Ref: h5 module-h5py h55184
Ref: 15184
Node: Library API5284
Ref: h5 library-api5382
Ref: 1a5382
Ref: h5 h5py h5 get_config5419
Ref: 1b5419
Ref: h5 h5py h5 get_libversion5536
Ref: 1c5536
Node: Configuration class5664
Ref: h5 configuration-class5787
Ref: 1d5787
Ref: h5 h5py h5 H5PYConfig5840
Ref: 1e5840
Node: Module constants6348
Ref: h5 module-constants6451
Ref: 1f6451
Ref: h5 h5py h5 INDEX_NAME6498
Ref: 206498
Ref: h5 h5py h5 INDEX_CRT_ORDER6572
Ref: 216572
Ref: h5 h5py h5 ITER_NATIVE6681
Ref: 226681
Ref: h5 h5py h5 ITER_INC6807
Ref: 236807
Ref: h5 h5py h5 ITER_DEC6876
Ref: 246876
Node: Module H5A6945
Ref: h5a doc7051
Ref: 257051
Ref: h5a module-h5a7051
Ref: 267051
Ref: h5a module-h5py h5a7051
Ref: 27051
Node: Functional API7220
Ref: h5a functional-api7315
Ref: 277315
Ref: h5a h5py h5a create7358
Ref: 287358
Ref: h5a h5py h5a open7702
Ref: 2a7702
Ref: h5a h5py h5a exists8190
Ref: 2b8190
Ref: h5a h5py h5a rename8526
Ref: 2c8526
Ref: h5a h5py h5a delete8830
Ref: 2d8830
Ref: h5a h5py h5a get_num_attrs9304
Ref: 2e9304
Ref: h5a h5py h5a get_info9433
Ref: 2f9433
Ref: h5a h5py h5a iterate10083
Ref: 3010083
Node: Info objects10894
Ref: h5a info-objects11015
Ref: 3111015
Ref: h5a h5py h5a AttrInfo11054
Ref: 3211054
Ref: h5a h5py h5a AttrInfo corder11084
Ref: 3311084
Ref: h5a h5py h5a AttrInfo corder_valid11138
Ref: 3411138
Ref: h5a h5py h5a AttrInfo cset11224
Ref: 3511224
Ref: h5a h5py h5a AttrInfo data_size11342
Ref: 3611342
Node: Attribute objects11401
Ref: h5a attribute-objects11499
Ref: 3711499
Ref: h5a h5py h5a AttrID11548
Ref: 3811548
Ref: h5a h5py h5a AttrID dtype11967
Ref: 3911967
Ref: h5a h5py h5a AttrID get_name12082
Ref: 3a12082
Ref: h5a h5py h5a AttrID get_space12176
Ref: 3b12176
Ref: h5a h5py h5a AttrID get_storage_size12286
Ref: 3c12286
Ref: h5a h5py h5a AttrID get_type12397
Ref: 3d12397
Ref: h5a h5py h5a AttrID name12504
Ref: 3e12504
Ref: h5a h5py h5a AttrID read12564
Ref: 3f12564
Ref: h5a h5py h5a AttrID shape13057
Ref: 4113057
Ref: h5a h5py h5a AttrID write13172
Ref: 4213172
Node: Module H5AC13535
Ref: h5ac doc13642
Ref: 4313642
Ref: h5ac module-h5ac13642
Ref: 4413642
Ref: h5ac module-h5py h5ac13642
Ref: 313642
Ref: h5ac h5py h5ac CacheConfig13739
Ref: 4513739
Ref: h5ac h5py h5ac CacheConfig apply_empty_reserve13818
Ref: 4613818
Ref: h5ac h5py h5ac CacheConfig apply_max_decrement13859
Ref: 4713859
Ref: h5ac h5py h5ac CacheConfig apply_max_increment13900
Ref: 4813900
Ref: h5ac h5py h5ac CacheConfig decr_mode13941
Ref: 4913941
Ref: h5ac h5py h5ac CacheConfig decrement13972
Ref: 4a13972
Ref: h5ac h5py h5ac CacheConfig dirty_bytes_threshold14003
Ref: 4b14003
Ref: h5ac h5py h5ac CacheConfig empty_reserve14046
Ref: 4c14046
Ref: h5ac h5py h5ac CacheConfig epoch_length14081
Ref: 4d14081
Ref: h5ac h5py h5ac CacheConfig epochs_before_eviction14115
Ref: 4e14115
Ref: h5ac h5py h5ac CacheConfig evictions_enabled14159
Ref: 4f14159
Ref: h5ac h5py h5ac CacheConfig flash_incr_mode14198
Ref: 5014198
Ref: h5ac h5py h5ac CacheConfig flash_multiple14235
Ref: 5114235
Ref: h5ac h5py h5ac CacheConfig flash_threshold14271
Ref: 5214271
Ref: h5ac h5py h5ac CacheConfig incr_mode14308
Ref: 5314308
Ref: h5ac h5py h5ac CacheConfig increment14339
Ref: 5414339
Ref: h5ac h5py h5ac CacheConfig initial_size14370
Ref: 5514370
Ref: h5ac h5py h5ac CacheConfig lower_hr_threshold14404
Ref: 5614404
Ref: h5ac h5py h5ac CacheConfig max_decrement14444
Ref: 5714444
Ref: h5ac h5py h5ac CacheConfig max_increment14479
Ref: 5814479
Ref: h5ac h5py h5ac CacheConfig max_size14514
Ref: 5914514
Ref: h5ac h5py h5ac CacheConfig min_clean_fraction14544
Ref: 5a14544
Ref: h5ac h5py h5ac CacheConfig min_size14584
Ref: 5b14584
Ref: h5ac h5py h5ac CacheConfig rpt_fcn_enabled14614
Ref: 5c14614
Ref: h5ac h5py h5ac CacheConfig set_initial_size14651
Ref: 5d14651
Ref: h5ac h5py h5ac CacheConfig upper_hr_threshold14689
Ref: 5e14689
Ref: h5ac h5py h5ac CacheConfig version14729
Ref: 5f14729
Node: Module H5D14758
Ref: h5d doc14866
Ref: 6014866
Ref: h5d module-h5d14866
Ref: 6114866
Ref: h5d module-h5py h5d14866
Ref: 414866
Node: Functional API<2>15073
Ref: h5d functional-api15174
Ref: 6215174
Ref: h5d h5py h5d open15217
Ref: 6315217
Ref: h5d h5py h5d create15460
Ref: 6415460
Node: Dataset Objects15713
Ref: h5d dataset-objects15842
Ref: 6515842
Ref: h5d h5py h5d DatasetID15887
Ref: 6615887
Ref: h5d h5py h5d DatasetID dtype16467
Ref: 6716467
Ref: h5d h5py h5d DatasetID extend16554
Ref: 6816554
Ref: h5d h5py h5d DatasetID flush16837
Ref: 6916837
Ref: h5d h5py h5d DatasetID get_access_plist17271
Ref: 6a17271
Ref: h5d h5py h5d DatasetID get_chunk_info17407
Ref: 6b17407
Ref: h5d h5py h5d DatasetID get_chunk_info_by_coord17667
Ref: 6c17667
Ref: h5d h5py h5d DatasetID get_create_plist17970
Ref: 6d17970
Ref: h5d h5py h5d DatasetID get_num_chunks18143
Ref: 6e18143
Ref: h5d h5py h5d DatasetID get_offset18535
Ref: 6f18535
Ref: h5d h5py h5d DatasetID get_space18871
Ref: 7018871
Ref: h5d h5py h5d DatasetID get_space_status18998
Ref: 7118998
Ref: h5d h5py h5d DatasetID get_storage_size19304
Ref: 7219304
Ref: h5d h5py h5d DatasetID get_type20074
Ref: 7320074
Ref: h5d h5py h5d DatasetID rank20188
Ref: 7420188
Ref: h5d h5py h5d DatasetID read20270
Ref: 7520270
Ref: h5d h5py h5d DatasetID read_direct_chunk21149
Ref: 7721149
Ref: h5d h5py h5d DatasetID refresh22119
Ref: 7822119
Ref: h5d h5py h5d DatasetID set_extent22757
Ref: 7922757
Ref: h5d h5py h5d DatasetID shape22990
Ref: 7a22990
Ref: h5d h5py h5d DatasetID write23079
Ref: 7b23079
Ref: h5d h5py h5d DatasetID write_direct_chunk23933
Ref: 7c23933
Node: Module constants<2>25020
Ref: h5d module-constants25123
Ref: 7d25123
Node: Storage strategies25276
Ref: h5d storage-strategies25388
Ref: 7e25388
Ref: h5d h5py h5d COMPACT25443
Ref: 7f25443
Ref: h5d h5py h5d CONTIGUOUS25471
Ref: 8025471
Ref: h5d h5py h5d CHUNKED25502
Ref: 8125502
Node: Allocation times25530
Ref: h5d allocation-times25668
Ref: 8225668
Ref: h5d ref-h5d-alloc-time25668
Ref: 8325668
Ref: h5d h5py h5d ALLOC_TIME_DEFAULT25719
Ref: 8425719
Ref: h5d h5py h5d ALLOC_TIME_LATE25758
Ref: 8525758
Ref: h5d h5py h5d ALLOC_TIME_EARLY25794
Ref: 8625794
Ref: h5d h5py h5d ALLOC_TIME_INCR25831
Ref: 8725831
Node: Allocation status25867
Ref: h5d allocation-status25996
Ref: 8825996
Ref: h5d h5py h5d SPACE_STATUS_NOT_ALLOCATED26049
Ref: 8926049
Ref: h5d h5py h5d SPACE_STATUS_PART_ALLOCATED26096
Ref: 8a26096
Ref: h5d h5py h5d SPACE_STATUS_ALLOCATED26144
Ref: 8b26144
Node: Fill time26187
Ref: h5d fill-time26311
Ref: 8c26311
Ref: h5d h5py h5d FILL_TIME_ALLOC26348
Ref: 8d26348
Ref: h5d h5py h5d FILL_TIME_NEVER26384
Ref: 8e26384
Ref: h5d h5py h5d FILL_TIME_IFSET26420
Ref: 8f26420
Node: Fill values26456
Ref: h5d fill-values26554
Ref: 9026554
Ref: h5d h5py h5d FILL_VALUE_UNDEFINED26595
Ref: 9126595
Ref: h5d h5py h5d FILL_VALUE_DEFAULT26636
Ref: 9226636
Ref: h5d h5py h5d FILL_VALUE_USER_DEFINED26675
Ref: 9326675
Node: Module H5DS26719
Ref: h5ds doc26826
Ref: 9426826
Ref: h5ds module-h5ds26826
Ref: 9526826
Ref: h5ds module-h5py h5ds26826
Ref: 526826
Ref: h5ds h5py h5ds attach_scale26919
Ref: 9626919
Ref: h5ds h5py h5ds detach_scale27083
Ref: 9727083
Ref: h5ds h5py h5ds get_label27258
Ref: 9827258
Ref: h5ds h5py h5ds get_num_scales27429
Ref: 9927429
Ref: h5ds h5py h5ds get_scale_name27626
Ref: 9a27626
Ref: h5ds h5py h5ds is_attached27768
Ref: 9b27768
Ref: h5ds h5py h5ds is_scale27969
Ref: 9c27969
Ref: h5ds h5py h5ds iterate28081
Ref: 9d28081
Ref: h5ds h5py h5ds set_label28510
Ref: 9e28510
Ref: h5ds h5py h5ds set_scale28671
Ref: 9f28671
Node: Module H5F28822
Ref: h5f doc28930
Ref: a028930
Ref: h5f module-h5f28930
Ref: a128930
Ref: h5f module-h5py h5f28930
Ref: 628930
Node: Functional API<3>29110
Ref: h5f functional-api29208
Ref: a229208
Ref: h5f h5py h5f open29251
Ref: a329251
Ref: h5f h5py h5f create29605
Ref: a729605
Ref: h5f h5py h5f flush30079
Ref: aa30079
Ref: h5f h5py h5f is_hdf530475
Ref: ad30475
Ref: h5f h5py h5f mount30643
Ref: ae30643
Ref: h5f h5py h5f unmount30829
Ref: af30829
Ref: h5f h5py h5f open_file_image30953
Ref: b030953
Ref: h5f h5py h5f get_name31205
Ref: b131205
Ref: h5f h5py h5f get_obj_count31344
Ref: b231344
Ref: h5f h5py h5f get_obj_ids32012
Ref: b732012
Node: File objects32699
Ref: h5f file-objects32825
Ref: b832825
Ref: h5f h5py h5f FileID32864
Ref: b332864
Ref: h5f h5py h5f FileID close33326
Ref: b933326
Ref: h5f h5py h5f FileID get_access_plist33602
Ref: ba33602
Ref: h5f h5py h5f FileID get_create_plist33768
Ref: bb33768
Ref: h5f h5py h5f FileID get_file_image33927
Ref: bd33927
Ref: h5f h5py h5f FileID get_filesize34075
Ref: be34075
Ref: h5f h5py h5f FileID get_freespace34223
Ref: bf34223
Ref: h5f h5py h5f FileID get_intent34411
Ref: c034411
Ref: h5f h5py h5f FileID get_mdc_config34563
Ref: c134563
Ref: h5f h5py h5f FileID get_mdc_hit_rate34885
Ref: c234885
Ref: h5f h5py h5f FileID get_mdc_size34972
Ref: c334972
Ref: h5f h5py h5f FileID get_vfd_handle35179
Ref: c435179
Ref: h5f h5py h5f FileID name35661
Ref: c535661
Ref: h5f h5py h5f FileID reopen35746
Ref: c635746
Ref: h5f h5py h5f FileID reset_mdc_hit_rate_stats35966
Ref: c735966
Ref: h5f h5py h5f FileID set_mdc_config36074
Ref: c836074
Ref: h5f h5py h5f FileID start_swmr_write36426
Ref: c936426
Node: Module constants<3>38081
Ref: h5f module-constants38181
Ref: ca38181
Node: File access flags38345
Ref: h5f file-access-flags38459
Ref: cb38459
Ref: h5f ref-h5f-acc38459
Ref: cc38459
Ref: h5f h5py h5f ACC_TRUNC38512
Ref: a838512
Ref: h5f h5py h5f ACC_EXCL38569
Ref: a938569
Ref: h5f h5py h5f ACC_RDWR38654
Ref: a438654
Ref: h5f h5py h5f ACC_RDONLY38713
Ref: a538713
Node: File close strength38773
Ref: h5f file-close-strength38906
Ref: cd38906
Ref: h5f ref-h5f-close38906
Ref: ce38906
Ref: h5f h5py h5f CLOSE_WEAK38963
Ref: cf38963
Ref: h5f h5py h5f CLOSE_SEMI38994
Ref: d038994
Ref: h5f h5py h5f CLOSE_STRONG39025
Ref: d139025
Ref: h5f h5py h5f CLOSE_DEFAULT39058
Ref: d239058
Node: File scope39092
Ref: h5f file-scope39220
Ref: d339220
Ref: h5f ref-h5f-scope39220
Ref: d439220
Ref: h5f h5py h5f SCOPE_LOCAL39259
Ref: ab39259
Ref: h5f h5py h5f SCOPE_GLOBAL39291
Ref: ac39291
Node: Object types39324
Ref: h5f object-types39457
Ref: d539457
Ref: h5f ref-h5f-obj39457
Ref: b539457
Ref: h5f h5py h5f OBJ_FILE39500
Ref: d639500
Ref: h5f h5py h5f OBJ_DATASET39529
Ref: d739529
Ref: h5f h5py h5f OBJ_GROUP39561
Ref: d839561
Ref: h5f h5py h5f OBJ_DATATYPE39591
Ref: d939591
Ref: h5f h5py h5f OBJ_ATTR39624
Ref: da39624
Ref: h5f h5py h5f OBJ_ALL39653
Ref: b439653
Ref: h5f h5py h5f OBJ_LOCAL39681
Ref: b639681
Node: Library version bounding39711
Ref: h5f library-version-bounding39825
Ref: db39825
Ref: h5f h5py h5f LIBVER_EARLIEST39892
Ref: dc39892
Ref: h5f h5py h5f LIBVER_V1839928
Ref: dd39928
Ref: h5f h5py h5f LIBVER_V11039959
Ref: de39959
Ref: h5f h5py h5f LIBVER_LATEST39991
Ref: df39991
Node: Module H5FD40025
Ref: h5fd doc40132
Ref: e040132
Ref: h5fd module-h5fd40132
Ref: e140132
Ref: h5fd module-h5py h5fd40132
Ref: 740132
Node: Module constants<4>40248
Ref: h5fd module-constants40328
Ref: e240328
Node: Memory usage types for MULTI file driver40521
Ref: h5fd memory-usage-types-for-multi-file-driver40674
Ref: e340674
Ref: h5fd h5py h5fd MEM_DEFAULT40773
Ref: e440773
Ref: h5fd h5py h5fd MEM_SUPER40806
Ref: e540806
Ref: h5fd h5py h5fd MEM_BTREE40837
Ref: e640837
Ref: h5fd h5py h5fd MEM_DRAW40868
Ref: e740868
Ref: h5fd h5py h5fd MEM_GHEAP40898
Ref: e840898
Ref: h5fd h5py h5fd MEM_LHEAP40929
Ref: e940929
Ref: h5fd h5py h5fd MEM_OHDR40960
Ref: ea40960
Ref: h5fd h5py h5fd MEM_NTYPES40990
Ref: eb40990
Node: Data transfer modes for MPIO driver41022
Ref: h5fd data-transfer-modes-for-mpio-driver41202
Ref: ec41202
Ref: h5fd h5py h5fd MPIO_INDEPENDENT41291
Ref: ed41291
Ref: h5fd h5py h5fd MPIO_COLLECTIVE41329
Ref: ee41329
Node: File drivers types41366
Ref: h5fd file-drivers-types41529
Ref: ef41529
Ref: h5fd h5py h5fd CORE41584
Ref: f041584
Ref: h5fd h5py h5fd FAMILY41610
Ref: f141610
Ref: h5fd h5py h5fd LOG41638
Ref: f241638
Ref: h5fd h5py h5fd MPIO41663
Ref: f341663
Ref: h5fd h5py h5fd MULTI41689
Ref: f441689
Ref: h5fd h5py h5fd SEC241716
Ref: f541716
Ref: h5fd h5py h5fd STDIO41742
Ref: f641742
Ref: h5fd h5py h5fd WINDOWS41769
Ref: f741769
Node: Logging driver settings41798
Ref: h5fd logging-driver-settings41917
Ref: f841917
Ref: h5fd h5py h5fd LOG_LOC_READ42051
Ref: f942051
Ref: h5fd h5py h5fd LOG_LOC_WRITE42085
Ref: fa42085
Ref: h5fd h5py h5fd LOG_LOC_SEEK42120
Ref: fb42120
Ref: h5fd h5py h5fd LOG_LOC_IO42154
Ref: fc42154
Ref: h5fd h5py h5fd LOG_FILE_READ42186
Ref: fd42186
Ref: h5fd h5py h5fd LOG_FILE_WRITE42221
Ref: fe42221
Ref: h5fd h5py h5fd LOG_FILE_IO42257
Ref: ff42257
Ref: h5fd h5py h5fd LOG_FLAVOR42290
Ref: 10042290
Ref: h5fd h5py h5fd LOG_NUM_READ42322
Ref: 10142322
Ref: h5fd h5py h5fd LOG_NUM_WRITE42356
Ref: 10242356
Ref: h5fd h5py h5fd LOG_NUM_SEEK42391
Ref: 10342391
Ref: h5fd h5py h5fd LOG_NUM_IO42425
Ref: 10442425
Ref: h5fd h5py h5fd LOG_TIME_OPEN42457
Ref: 10542457
Ref: h5fd h5py h5fd LOG_TIME_READ42492
Ref: 10642492
Ref: h5fd h5py h5fd LOG_TIME_WRITE42527
Ref: 10742527
Ref: h5fd h5py h5fd LOG_TIME_SEEK42563
Ref: 10842563
Ref: h5fd h5py h5fd LOG_TIME_CLOSE42598
Ref: 10942598
Ref: h5fd h5py h5fd LOG_TIME_IO42634
Ref: 10a42634
Ref: h5fd h5py h5fd LOG_ALLOC42667
Ref: 10b42667
Ref: h5fd h5py h5fd LOG_ALL42698
Ref: 10c42698
Node: Module H5G42727
Ref: h5g doc42834
Ref: 10d42834
Ref: h5g module-h5g42834
Ref: 10e42834
Ref: h5g module-h5py h5g42834
Ref: 842834
Node: Functional API<4>43053
Ref: h5g functional-api43154
Ref: 10f43154
Ref: h5g h5py h5g open43197
Ref: 11043197
Ref: h5g h5py h5g create43330
Ref: 11143330
Ref: h5g h5py h5g iterate43583
Ref: 11243583
Ref: h5g h5py h5g get_objinfo44084
Ref: 11344084
Node: Info objects<2>44664
Ref: h5g info-objects44787
Ref: 11544787
Ref: h5g h5py h5g GroupStat44826
Ref: 11644826
Node: Group objects45411
Ref: h5g group-objects45536
Ref: 11745536
Ref: h5g h5py h5g GroupID45577
Ref: 11445577
Ref: h5g h5py h5g GroupID get_comment46185
Ref: 11846185
Ref: h5g h5py h5g GroupID get_create_plist46302
Ref: 11946302
Ref: h5g h5py h5g GroupID get_linkval46464
Ref: 11b46464
Ref: h5g h5py h5g GroupID get_num_objs46646
Ref: 11c46646
Ref: h5g h5py h5g GroupID get_objname_by_idx46778
Ref: 11d46778
Ref: h5g h5py h5g GroupID get_objtype_by_idx46908
Ref: 11e46908
Ref: h5g h5py h5g GroupID link47219
Ref: 11f47219
Ref: h5g h5py h5g GroupID move47772
Ref: 12047772
Ref: h5g h5py h5g GroupID set_comment48048
Ref: 12148048
Ref: h5g h5py h5g GroupID unlink48157
Ref: 12248157
Node: Module constants<5>48254
Ref: h5g module-constants48355
Ref: 12348355
Node: Object type codes48454
Ref: h5g object-type-codes48564
Ref: 12448564
Ref: h5g h5py h5g LINK48617
Ref: 12548617
Ref: h5g h5py h5g GROUP48662
Ref: 12648662
Ref: h5g h5py h5g DATASET48705
Ref: 12748705
Ref: h5g h5py h5g TYPE48752
Ref: 12848752
Node: Link type codes48814
Ref: h5g link-type-codes48924
Ref: 12948924
Ref: h5g h5py h5g LINK_HARD48973
Ref: 12a48973
Ref: h5g h5py h5g LINK_SOFT49003
Ref: 12b49003
Node: Module H5I49033
Ref: h5i doc49139
Ref: 12c49139
Ref: h5i module-h5i49139
Ref: 12d49139
Node: Functional API<5>49260
Ref: h5i functional-api49365
Ref: 12e49365
Ref: h5i module-h5py h5i49365
Ref: 949365
Ref: h5i h5py h5i dec_ref49410
Ref: 12f49410
Ref: h5i h5py h5i get_file_id49711
Ref: 13049711
Ref: h5i h5py h5i get_name49843
Ref: 13149843
Ref: h5i h5py h5i get_ref50266
Ref: 13250266
Ref: h5i h5py h5i get_type50378
Ref: 13350378
Ref: h5i h5py h5i inc_ref50654
Ref: 13550654
Node: Module constants<6>50955
Ref: h5i module-constants51060
Ref: 13651060
Node: Identifier classes51142
Ref: h5i identifier-classes51229
Ref: 13751229
Ref: h5i h5py h5i BADID51286
Ref: 13451286
Ref: h5i h5py h5i FILE51312
Ref: 13851312
Ref: h5i h5py h5i GROUP51337
Ref: 13951337
Ref: h5i h5py h5i DATASPACE51363
Ref: 13a51363
Ref: h5i h5py h5i DATASET51393
Ref: 13b51393
Ref: h5i h5py h5i ATTR51421
Ref: 13c51421
Ref: h5i h5py h5i REFERENCE51446
Ref: 13d51446
Ref: h5i h5py h5i GENPROP_CLS51476
Ref: 13e51476
Ref: h5i h5py h5i GENPROP_LST51508
Ref: 13f51508
Ref: h5i h5py h5i DATATYPE51540
Ref: 14051540
Node: Module H5L51569
Ref: h5l doc51675
Ref: 14151675
Ref: h5l module-h5l51675
Ref: 14251675
Node: Linkproxy objects51781
Ref: h5l linkproxy-objects51886
Ref: 14351886
Ref: h5l module-h5py h5l51886
Ref: a51886
Ref: h5l h5py h5l LinkProxy52099
Ref: 14452099
Ref: h5l h5py h5l LinkProxy create_external52714
Ref: 14552714
Ref: h5l h5py h5l LinkProxy create_hard52948
Ref: 14652948
Ref: h5l h5py h5l LinkProxy create_soft53189
Ref: 14753189
Ref: h5l h5py h5l LinkProxy exists53435
Ref: 14853435
Ref: h5l h5py h5l LinkProxy get_info53574
Ref: 14953574
Ref: h5l h5py h5l LinkProxy get_val53766
Ref: 14a53766
Ref: h5l h5py h5l LinkProxy iterate53992
Ref: 14b53992
Ref: h5l h5py h5l LinkProxy move55001
Ref: 14c55001
Ref: h5l h5py h5l LinkProxy visit55148
Ref: 14d55148
Node: Module constants<7>56060
Ref: h5l module-constants56165
Ref: 14e56165
Node: Link types56239
Ref: h5l link-types56318
Ref: 14f56318
Ref: h5l h5py h5l TYPE_HARD56359
Ref: 15056359
Ref: h5l h5py h5l TYPE_SOFT56389
Ref: 15156389
Ref: h5l h5py h5l TYPE_EXTERNAL56419
Ref: 15256419
Node: Module H5O56453
Ref: h5o doc56559
Ref: 15356559
Ref: h5o module-h5o56559
Ref: 15456559
Ref: h5o module-h5py h5o56559
Ref: b56559
Node: Functional API<6>56741
Ref: h5o functional-api56839
Ref: 15556839
Ref: h5o h5py h5o open56884
Ref: 15656884
Ref: h5o h5py h5o link57064
Ref: 15757064
Ref: h5o h5py h5o copy57301
Ref: 15857301
Ref: h5o h5py h5o set_comment57757
Ref: 15957757
Ref: h5o h5py h5o get_comment58051
Ref: 15a58051
Ref: h5o h5py h5o visit58345
Ref: 15b58345
Ref: h5o h5py h5o get_info59546
Ref: 15c59546
Node: Info classes60102
Ref: h5o info-classes60228
Ref: 15d60228
Ref: h5o h5py h5o ObjInfo60269
Ref: 15e60269
Node: Module constants<8>60340
Ref: h5o module-constants60440
Ref: 15f60440
Node: Object types<2>60547
Ref: h5o object-types60650
Ref: 16060650
Ref: h5o h5py h5o TYPE_GROUP60695
Ref: 16160695
Ref: h5o h5py h5o TYPE_DATASET60726
Ref: 16260726
Ref: h5o h5py h5o TYPE_NAMED_DATATYPE60759
Ref: 16360759
Node: Copy flags60799
Ref: h5o copy-flags60902
Ref: 16460902
Ref: h5o ref-h5o-copy60902
Ref: 16560902
Ref: h5o h5py h5o COPY_SHALLOW_HIERARCHY_FLAG60943
Ref: 16660943
Ref: h5o h5py h5o COPY_EXPAND_SOFT_LINK_FLAG61037
Ref: 16761037
Ref: h5o h5py h5o COPY_EXPAND_EXT_LINK_FLAG61126
Ref: 16861126
Ref: h5o h5py h5o COPY_EXPAND_REFERENCE_FLAG61217
Ref: 16961217
Ref: h5o h5py h5o COPY_WITHOUT_ATTR_FLAG61318
Ref: 16a61318
Node: Module H5P61407
Ref: h5p doc61514
Ref: 16b61514
Ref: h5p module-h5p61514
Ref: 16c61514
Ref: h5p module-h5py h5p61514
Ref: c61514
Node: Functional API<7>61853
Ref: h5p functional-api61951
Ref: 16d61951
Ref: h5p h5py h5p create61996
Ref: 16e61996
Node: Base classes62488
Ref: h5p base-classes62608
Ref: 17962608
Ref: h5p h5py h5p PropID62649
Ref: 17a62649
Ref: h5p h5py h5p PropID equal62776
Ref: 17b62776
Ref: h5p h5py h5p PropClassID62900
Ref: 17c62900
Ref: h5p h5py h5p PropInstanceID63093
Ref: 17d63093
Ref: h5p h5py h5p PropInstanceID copy63370
Ref: 17e63370
Ref: h5p h5py h5p PropInstanceID get_class63480
Ref: 17f63480
Ref: h5p h5py h5p PropCreateID63584
Ref: 18063584
Ref: h5p h5py h5p PropOCID63712
Ref: 18163712
Ref: h5p h5py h5p PropOCID get_attr_creation_order63988
Ref: 18263988
Ref: h5p h5py h5p PropOCID get_attr_phase_change64134
Ref: 18364134
Ref: h5p h5py h5p PropOCID get_obj_track_times64282
Ref: 18464282
Ref: h5p h5py h5p PropOCID set_attr_creation_order64415
Ref: 18564415
Ref: h5p h5py h5p PropOCID set_attr_phase_change64647
Ref: 18764647
Ref: h5p h5py h5p PropOCID set_obj_track_times65061
Ref: 18865061
Ref: h5p h5py h5p PropCopyID65168
Ref: 18965168
Ref: h5p h5py h5p PropCopyID get_copy_object65289
Ref: 18a65289
Ref: h5p h5py h5p PropCopyID set_copy_object65414
Ref: 18b65414
Node: File creation66128
Ref: h5p file-creation66242
Ref: 18c66242
Ref: h5p h5py h5p PropFCID66285
Ref: bc66285
Ref: h5p h5py h5p PropFCID get_file_space_strategy66393
Ref: 18d66393
Ref: h5p h5py h5p PropFCID get_link_creation_order66686
Ref: 18e66686
Ref: h5p h5py h5p PropFCID get_sizes66840
Ref: 18f66840
Ref: h5p h5py h5p PropFCID get_userblock67093
Ref: 19067093
Ref: h5p h5py h5p PropFCID get_version67193
Ref: 19167193
Ref: h5p h5py h5p PropFCID set_file_space_strategy67540
Ref: 19267540
Ref: h5p h5py h5p PropFCID set_link_creation_order67743
Ref: 19367743
Ref: h5p h5py h5p PropFCID set_sizes67983
Ref: 19467983
Ref: h5p h5py h5p PropFCID set_userblock68136
Ref: 19568136
Node: File access68289
Ref: h5p file-access68407
Ref: 19668407
Ref: h5p h5py h5p PropFAID68446
Ref: a668446
Ref: h5p h5py h5p PropFAID get_alignment68557
Ref: 19768557
Ref: h5p h5py h5p PropFAID get_cache68713
Ref: 19868713
Ref: h5p h5py h5p PropFAID get_driver69159
Ref: 19969159
Ref: h5p h5py h5p PropFAID get_fapl_core69749
Ref: 19a69749
Ref: h5p h5py h5p PropFAID get_fapl_family70126
Ref: 19b70126
Ref: h5p h5py h5p PropFAID get_fclose_degree70315
Ref: 19c70315
Ref: h5p h5py h5p PropFAID get_libver_bounds70726
Ref: 19d70726
Ref: h5p h5py h5p PropFAID get_mdc_config71107
Ref: 19e71107
Ref: h5p h5py h5p PropFAID get_sieve_buf_size71278
Ref: 19f71278
Ref: h5p h5py h5p PropFAID set_alignment71418
Ref: 1a071418
Ref: h5p h5py h5p PropFAID set_cache71542
Ref: 1a171542
Ref: h5p h5py h5p PropFAID set_driver71773
Ref: 1a271773
Ref: h5p h5py h5p PropFAID set_fapl_core71927
Ref: 1a371927
Ref: h5p h5py h5p PropFAID set_fapl_family72409
Ref: 1a472409
Ref: h5p h5py h5p PropFAID set_fapl_log72714
Ref: 1a572714
Ref: h5p h5py h5p PropFAID set_fapl_sec272969
Ref: 1a672969
Ref: h5p h5py h5p PropFAID set_fapl_split73062
Ref: 1a773062
Ref: h5p h5py h5p PropFAID set_fapl_stdio73158
Ref: 1a873158
Ref: h5p h5py h5p PropFAID set_fclose_degree73259
Ref: 1a973259
Ref: h5p h5py h5p PropFAID set_file_image73648
Ref: 1aa73648
Ref: h5p h5py h5p PropFAID set_fileobj_driver73881
Ref: 1ab73881
Ref: h5p h5py h5p PropFAID set_libver_bounds74018
Ref: 1ac74018
Ref: h5p h5py h5p PropFAID set_mdc_config74385
Ref: 1ad74385
Ref: h5p h5py h5p PropFAID set_sieve_buf_size74563
Ref: 1ae74563
Node: Dataset creation74855
Ref: h5p dataset-creation74974
Ref: 1af74974
Ref: h5p h5py h5p PropDCID75023
Ref: 1b075023
Ref: h5p h5py h5p PropDCID all_filters_avail75134
Ref: 1b175134
Ref: h5p h5py h5p PropDCID fill_value_defined75277
Ref: 1b275277
Ref: h5p h5py h5p PropDCID get_alloc_time75582
Ref: 1b375582
Ref: h5p h5py h5p PropDCID get_chunk75731
Ref: 1b475731
Ref: h5p h5py h5p PropDCID get_external75842
Ref: 1b575842
Ref: h5p h5py h5p PropDCID get_external_count76133
Ref: 1b676133
Ref: h5p h5py h5p PropDCID get_fill_time76245
Ref: 1b776245
Ref: h5p h5py h5p PropDCID get_fill_value76557
Ref: 1b876557
Ref: h5p h5py h5p PropDCID get_filter76815
Ref: 1b976815
Ref: h5p h5py h5p PropDCID get_filter_by_id77217
Ref: 1bc77217
Ref: h5p h5py h5p PropDCID get_layout77666
Ref: 1bd77666
Ref: h5p h5py h5p PropDCID get_nfilters78006
Ref: 1be78006
Ref: h5p h5py h5p PropDCID get_virtual_count78107
Ref: 1bf78107
Ref: h5p h5py h5p PropDCID get_virtual_dsetname78217
Ref: 1c078217
Ref: h5p h5py h5p PropDCID get_virtual_filename78401
Ref: 1c178401
Ref: h5p h5py h5p PropDCID get_virtual_srcspace78590
Ref: 1c278590
Ref: h5p h5py h5p PropDCID get_virtual_vspace78760
Ref: 1c378760
Ref: h5p h5py h5p PropDCID remove_filter78929
Ref: 1c478929
Ref: h5p h5py h5p PropDCID set_alloc_time79089
Ref: 1c579089
Ref: h5p h5py h5p PropDCID set_chunk79237
Ref: 1c679237
Ref: h5p h5py h5p PropDCID set_deflate79411
Ref: 1c779411
Ref: h5p h5py h5p PropDCID set_external79572
Ref: 1c879572
Ref: h5p h5py h5p PropDCID set_fill_time79952
Ref: 1c979952
Ref: h5p h5py h5p PropDCID set_fill_value80270
Ref: 1ca80270
Ref: h5p h5py h5p PropDCID set_filter80500
Ref: 1cb80500
Ref: h5p h5py h5p PropDCID set_fletcher3281115
Ref: 1d081115
Ref: h5p h5py h5p PropDCID set_layout81211
Ref: 1d181211
Ref: h5p h5py h5p PropDCID set_scaleoffset81535
Ref: 1d281535
Ref: h5p h5py h5p PropDCID set_shuffle81974
Ref: 1d381974
Ref: h5p h5py h5p PropDCID set_szip82148
Ref: 1d482148
Ref: h5p h5py h5p PropDCID set_virtual82356
Ref: 1d582356
Node: Dataset access82842
Ref: h5p dataset-access82966
Ref: 1d682966
Ref: h5p h5py h5p PropDAID83011
Ref: 1d783011
Ref: h5p h5py h5p PropDAID get_chunk_cache83125
Ref: 1d883125
Ref: h5p h5py h5p PropDAID get_virtual_prefix83621
Ref: 1d983621
Ref: h5p h5py h5p PropDAID get_virtual_printf_gap83763
Ref: 1da83763
Ref: h5p h5py h5p PropDAID get_virtual_view84007
Ref: 1db84007
Ref: h5p h5py h5p PropDAID set_chunk_cache84229
Ref: 1dc84229
Ref: h5p h5py h5p PropDAID set_virtual_prefix84391
Ref: 1dd84391
Ref: h5p h5py h5p PropDAID set_virtual_printf_gap84606
Ref: 1de84606
Ref: h5p h5py h5p PropDAID set_virtual_view85225
Ref: 1df85225
Node: Dataset transfer85956
Ref: h5p dataset-transfer86077
Ref: 1e086077
Ref: h5p h5py h5p PropDXID86126
Ref: 7686126
Node: Link creation86239
Ref: h5p link-creation86357
Ref: 1e186357
Ref: h5p h5py h5p PropLCID86400
Ref: 1e286400
Ref: h5p h5py h5p PropLCID get_char_encoding86511
Ref: 1e386511
Ref: h5p h5py h5p PropLCID get_create_intermediate_group86724
Ref: 1e686724
Ref: h5p h5py h5p PropLCID set_char_encoding86872
Ref: 1e786872
Ref: h5p h5py h5p PropLCID set_create_intermediate_group87084
Ref: 1e887084
Node: Link access87237
Ref: h5p link-access87353
Ref: 1e987353
Ref: h5p h5py h5p PropLAID87392
Ref: 2987392
Ref: h5p h5py h5p PropLAID get_elink_fapl87503
Ref: 1ea87503
Ref: h5p h5py h5p PropLAID get_elink_prefix87656
Ref: 1eb87656
Ref: h5p h5py h5p PropLAID get_nlinks87751
Ref: 1ec87751
Ref: h5p h5py h5p PropLAID set_elink_fapl87849
Ref: 1ed87849
Ref: h5p h5py h5p PropLAID set_elink_prefix88001
Ref: 1ee88001
Ref: h5p h5py h5p PropLAID set_nlinks88096
Ref: 1ef88096
Node: Group creation88200
Ref: h5p group-creation88320
Ref: 1f088320
Ref: h5p h5py h5p PropGCID88367
Ref: 11a88367
Ref: h5p h5py h5p PropGCID get_link_creation_order88475
Ref: 1f188475
Ref: h5p h5py h5p PropGCID set_link_creation_order88629
Ref: 1f288629
Node: Datatype creation88869
Ref: h5p datatype-creation88997
Ref: 1f388997
Ref: h5p h5py h5p PropTCID89050
Ref: 1f489050
Node: Module constants<9>89183
Ref: h5p module-constants89288
Ref: 1f589288
Node: Predefined classes89397
Ref: h5p predefined-classes89513
Ref: 1f689513
Ref: h5p h5py h5p DEFAULT89572
Ref: 1f789572
Ref: h5p h5py h5p FILE_CREATE89600
Ref: 16f89600
Ref: h5p h5py h5p FILE_ACCESS89632
Ref: 17089632
Ref: h5p h5py h5p DATASET_CREATE89664
Ref: 17189664
Ref: h5p h5py h5p DATASET_XFER89699
Ref: 17289699
Ref: h5p h5py h5p DATASET_ACCESS89732
Ref: 17389732
Ref: h5p h5py h5p OBJECT_COPY89767
Ref: 17789767
Ref: h5p h5py h5p LINK_CREATE89799
Ref: 17489799
Ref: h5p h5py h5p LINK_ACCESS89831
Ref: 17589831
Ref: h5p h5py h5p GROUP_CREATE89863
Ref: 17689863
Ref: h5p h5py h5p OBJECT_CREATE89896
Ref: 17889896
Node: Order tracking flags89930
Ref: h5p order-tracking-flags90046
Ref: 1f890046
Ref: h5p h5py h5p CRT_ORDER_TRACKED90109
Ref: 18690109
Ref: h5p h5py h5p CRT_ORDER_INDEXED90147
Ref: 1f990147
Node: Module H5PL90185
Ref: h5pl doc90292
Ref: 1fa90292
Ref: h5pl module-h5pl90292
Ref: 1fb90292
Ref: h5pl module-h5py h5pl90292
Ref: d90292
Ref: h5pl h5py h5pl append90501
Ref: 1fc90501
Ref: h5pl h5py h5pl get90614
Ref: 1fd90614
Ref: h5pl h5py h5pl insert90796
Ref: 1fe90796
Ref: h5pl h5py h5pl prepend90932
Ref: 1ff90932
Ref: h5pl h5py h5pl remove91048
Ref: 20091048
Ref: h5pl h5py h5pl replace91155
Ref: 20191155
Ref: h5pl h5py h5pl size91295
Ref: 20291295
Node: Module H5R91409
Ref: h5r doc91516
Ref: 20391516
Ref: h5r module-h5py h5r91516
Ref: e91516
Ref: h5r module-h5r91516
Ref: 20491516
Node: Functional API<8>91685
Ref: h5r functional-api91788
Ref: 20591788
Ref: h5r h5py h5r create91833
Ref: 20691833
Ref: h5r h5py h5r dereference92432
Ref: 20992432
Ref: h5r h5py h5r get_region92821
Ref: 20a92821
Ref: h5r h5py h5r get_obj_type93302
Ref: 20b93302
Ref: h5r h5py h5r get_name93832
Ref: 20c93832
Node: Reference classes94021
Ref: h5r reference-classes94146
Ref: 20d94146
Ref: h5r h5py h5r Reference94197
Ref: 20e94197
Ref: h5r h5py h5r RegionReference94869
Ref: 20f94869
Node: API constants95099
Ref: h5r api-constants95198
Ref: 21095198
Ref: h5r h5py h5r OBJECT95241
Ref: 20795241
Ref: h5r h5py h5r DATASET_REGION95305
Ref: 20895305
Node: Module H5S95385
Ref: h5s doc95491
Ref: 21195491
Ref: h5s module-h5py h5s95491
Ref: f95491
Ref: h5s module-h5s95491
Ref: 21295491
Node: Functional API<9>95711
Ref: h5s functional-api95814
Ref: 21395814
Ref: h5s h5py h5s create95859
Ref: 21495859
Ref: h5s h5py h5s create_simple96045
Ref: 21796045
Ref: h5s h5py h5s decode96441
Ref: 21996441
Node: Dataspace objects96612
Ref: h5s dataspace-objects96744
Ref: 21a96744
Ref: h5s h5py h5s SpaceID96795
Ref: 21b96795
Ref: h5s h5py h5s SpaceID copy97100
Ref: 21c97100
Ref: h5s h5py h5s SpaceID encode97185
Ref: 21d97185
Ref: h5s h5py h5s SpaceID extent_copy97382
Ref: 21e97382
Ref: h5s h5py h5s SpaceID get_regular_hyperslab97541
Ref: 21f97541
Ref: h5s h5py h5s SpaceID get_select_bounds97710
Ref: 22097710
Ref: h5s h5py h5s SpaceID get_select_elem_npoints97874
Ref: 22197874
Ref: h5s h5py h5s SpaceID get_select_elem_pointlist98023
Ref: 22298023
Ref: h5s h5py h5s SpaceID get_select_hyper_blocklist98225
Ref: 22398225
Ref: h5s h5py h5s SpaceID get_select_hyper_nblocks98598
Ref: 22498598
Ref: h5s h5py h5s SpaceID get_select_npoints98726
Ref: 22598726
Ref: h5s h5py h5s SpaceID get_select_type98896
Ref: 22698896
Ref: h5s h5py h5s SpaceID get_simple_extent_dims99140
Ref: 22799140
Ref: h5s h5py h5s SpaceID get_simple_extent_ndims99394
Ref: 22899394
Ref: h5s h5py h5s SpaceID get_simple_extent_npoints99517
Ref: 22999517
Ref: h5s h5py h5s SpaceID get_simple_extent_type99646
Ref: 22a99646
Ref: h5s h5py h5s SpaceID is_regular_hyperslab99770
Ref: 22b99770
Ref: h5s h5py h5s SpaceID is_simple99883
Ref: 22c99883
Ref: h5s h5py h5s SpaceID offset_simple100078
Ref: 22d100078
Ref: h5s h5py h5s SpaceID select_all100338
Ref: 22e100338
Ref: h5s h5py h5s SpaceID select_elements100417
Ref: 22f100417
Ref: h5s h5py h5s SpaceID select_hyperslab100992
Ref: 230100992
Ref: h5s h5py h5s SpaceID select_none101295
Ref: 231101295
Ref: h5s h5py h5s SpaceID select_valid101366
Ref: 232101366
Ref: h5s h5py h5s SpaceID set_extent_none101499
Ref: 233101499
Ref: h5s h5py h5s SpaceID set_extent_simple101612
Ref: 234101612
Ref: h5s h5py h5s SpaceID shape102021
Ref: 235102021
Node: Module constants<10>102133
Ref: h5s module-constants102239
Ref: 236102239
Ref: h5s h5py h5s ALL102288
Ref: 237102288
Ref: h5s h5py h5s UNLIMITED102384
Ref: 218102384
Node: Dataspace class codes102545
Ref: h5s dataspace-class-codes102660
Ref: 238102660
Ref: h5s h5py h5s NO_CLASS102723
Ref: 239102723
Ref: h5s h5py h5s SCALAR102752
Ref: 215102752
Ref: h5s h5py h5s SIMPLE102779
Ref: 216102779
Node: Selection codes102806
Ref: h5s selection-codes102953
Ref: 23a102953
Ref: h5s h5py h5s SELECT_NOOP103004
Ref: 23b103004
Ref: h5s h5py h5s SELECT_SET103036
Ref: 23c103036
Ref: h5s h5py h5s SELECT_OR103067
Ref: 23d103067
Ref: h5s h5py h5s SELECT_AND103097
Ref: 23e103097
Ref: h5s h5py h5s SELECT_XOR103128
Ref: 23f103128
Ref: h5s h5py h5s SELECT_NOTB103159
Ref: 240103159
Ref: h5s h5py h5s SELECT_NOTA103191
Ref: 241103191
Ref: h5s h5py h5s SELECT_APPEND103223
Ref: 242103223
Ref: h5s h5py h5s SELECT_PREPEND103257
Ref: 243103257
Ref: h5s h5py h5s SELECT_INVALID103292
Ref: 244103292
Node: Existing selection type103327
Ref: h5s existing-selection-type103444
Ref: 245103444
Ref: h5s h5py h5s SEL_NONE103511
Ref: 246103511
Ref: h5s h5py h5s SEL_POINTS103540
Ref: 247103540
Ref: h5s h5py h5s SEL_HYPERSLABS103571
Ref: 248103571
Ref: h5s h5py h5s SEL_ALL103606
Ref: 249103606
Node: Module H5T103634
Ref: h5t doc103740
Ref: 24a103740
Ref: h5t module-h5py h5t103740
Ref: 10103740
Ref: h5t module-h5t103740
Ref: 24b103740
Node: Functions specific to h5py104206
Ref: h5t functions-specific-to-h5py104319
Ref: 24c104319
Ref: h5t h5py h5t py_create104388
Ref: 24d104388
Ref: h5t h5py h5t string_dtype105219
Ref: 24e105219
Ref: h5t h5py h5t check_string_dtype105876
Ref: 24f105876
Ref: h5t h5py h5t vlen_dtype106288
Ref: 250106288
Ref: h5t h5py h5t check_vlen_dtype106474
Ref: 251106474
Ref: h5t h5py h5t enum_dtype106663
Ref: 252106663
Ref: h5t h5py h5t check_enum_dtype106923
Ref: 253106923
Ref: h5t h5py h5t special_dtype107171
Ref: 254107171
Ref: h5t h5py h5t check_dtype107867
Ref: 255107867
Node: Functional API<10>108733
Ref: h5t functional-api108867
Ref: 256108867
Ref: h5t h5py h5t create108912
Ref: 257108912
Ref: h5t h5py h5t open109118
Ref: 25a109118
Ref: h5t h5py h5t array_create109292
Ref: 25b109292
Ref: h5t h5py h5t enum_create109558
Ref: 25c109558
Ref: h5t h5py h5t vlen_create109688
Ref: 25d109688
Ref: h5t h5py h5t decode109951
Ref: 25e109951
Ref: h5t h5py h5t convert110107
Ref: 25f110107
Ref: h5t h5py h5t find110484
Ref: 260110484
Node: Type classes110893
Ref: h5t type-classes111021
Ref: 263111021
Ref: h5t h5py h5t TypeID111062
Ref: 40111062
Ref: h5t h5py h5t TypeID commit111274
Ref: 264111274
Ref: h5t h5py h5t TypeID committed111527
Ref: 265111527
Ref: h5t h5py h5t TypeID copy111663
Ref: 266111663
Ref: h5t h5py h5t TypeID detect_class111745
Ref: 267111745
Ref: h5t h5py h5t TypeID dtype111954
Ref: 268111954
Ref: h5t h5py h5t TypeID encode112045
Ref: 269112045
Ref: h5t h5py h5t TypeID equal112290
Ref: 26a112290
Ref: h5t h5py h5t TypeID get_class112446
Ref: 26b112446
Ref: h5t h5py h5t TypeID get_create_plist112544
Ref: 26c112544
Ref: h5t h5py h5t TypeID get_size112720
Ref: 26d112720
Ref: h5t h5py h5t TypeID get_super112823
Ref: 26e112823
Ref: h5t h5py h5t TypeID lock112954
Ref: 26f112954
Ref: h5t h5py h5t TypeID set_size113104
Ref: 270113104
Node: Atomic classes113279
Ref: h5t atomic-classes113371
Ref: 271113371
Ref: h5t h5py h5t TypeAtomicID113553
Ref: 272113553
Ref: h5t h5py h5t TypeAtomicID get_offset113684
Ref: 273113684
Ref: h5t h5py h5t TypeAtomicID get_order113786
Ref: 274113786
Ref: h5t h5py h5t TypeAtomicID get_pad113950
Ref: 275113950
Ref: h5t h5py h5t TypeAtomicID get_precision114181
Ref: 276114181
Ref: h5t h5py h5t TypeAtomicID set_offset114300
Ref: 277114300
Ref: h5t h5py h5t TypeAtomicID set_order114402
Ref: 278114402
Ref: h5t h5py h5t TypeAtomicID set_pad114562
Ref: 279114562
Ref: h5t h5py h5t TypeAtomicID set_precision114781
Ref: 27a114781
Ref: h5t h5py h5t TypeIntegerID114899
Ref: 27b114899
Ref: h5t h5py h5t TypeIntegerID get_sign115012
Ref: 27c115012
Ref: h5t h5py h5t TypeIntegerID set_sign115229
Ref: 27d115229
Ref: h5t h5py h5t TypeFloatID115445
Ref: 27e115445
Ref: h5t h5py h5t TypeFloatID get_ebias115563
Ref: 27f115563
Ref: h5t h5py h5t TypeFloatID get_fields115642
Ref: 280115642
Ref: h5t h5py h5t TypeFloatID get_inpad115973
Ref: 281115973
Ref: h5t h5py h5t TypeFloatID get_norm116189
Ref: 282116189
Ref: h5t h5py h5t TypeFloatID set_ebias116408
Ref: 283116408
Ref: h5t h5py h5t TypeFloatID set_fields116486
Ref: 284116486
Ref: h5t h5py h5t TypeFloatID set_inpad116693
Ref: 285116693
Ref: h5t h5py h5t TypeFloatID set_norm116902
Ref: 286116902
Node: Strings117120
Ref: h5t strings117235
Ref: 287117235
Ref: h5t h5py h5t TypeStringID117270
Ref: 288117270
Ref: h5t h5py h5t TypeStringID get_cset117389
Ref: 289117389
Ref: h5t h5py h5t TypeStringID get_strpad117497
Ref: 28a117497
Ref: h5t h5py h5t TypeStringID is_variable_str117831
Ref: 28b117831
Ref: h5t h5py h5t TypeStringID set_cset117977
Ref: 28c117977
Ref: h5t h5py h5t TypeStringID set_strpad118079
Ref: 28d118079
Node: Compound Types118403
Ref: h5t compound-types118515
Ref: 28e118515
Ref: h5t h5py h5t TypeCompositeID118685
Ref: 28f118685
Ref: h5t h5py h5t TypeCompositeID get_member_index118814
Ref: 290118814
Ref: h5t h5py h5t TypeCompositeID get_member_name118998
Ref: 291118998
Ref: h5t h5py h5t TypeCompositeID get_nmembers119199
Ref: 292119199
Ref: h5t h5py h5t TypeCompoundID119345
Ref: 293119345
Ref: h5t h5py h5t TypeCompoundID get_member_class119468
Ref: 294119468
Ref: h5t h5py h5t TypeCompoundID get_member_offset119666
Ref: 295119666
Ref: h5t h5py h5t TypeCompoundID get_member_type119850
Ref: 296119850
Ref: h5t h5py h5t TypeCompoundID insert120006
Ref: 297120006
Ref: h5t h5py h5t TypeCompoundID pack120252
Ref: 298120252
Ref: h5t h5py h5t TypeEnumID120410
Ref: 299120410
Ref: h5t h5py h5t TypeEnumID enum_insert120528
Ref: 29a120528
Ref: h5t h5py h5t TypeEnumID enum_nameof120834
Ref: 29b120834
Ref: h5t h5py h5t TypeEnumID enum_valueof121082
Ref: 29c121082
Ref: h5t h5py h5t TypeEnumID get_member_value121199
Ref: 29d121199
Node: Other types121351
Ref: h5t other-types121447
Ref: 29e121447
Ref: h5t h5py h5t TypeArrayID121490
Ref: 29f121490
Ref: h5t h5py h5t TypeArrayID get_array_dims121598
Ref: 2a0121598
Ref: h5t h5py h5t TypeArrayID get_array_ndims121746
Ref: 2a1121746
Ref: h5t h5py h5t TypeOpaqueID121848
Ref: 2a2121848
Ref: h5t h5py h5t TypeOpaqueID get_tag121954
Ref: 2a3121954
Ref: h5t h5py h5t TypeOpaqueID set_tag122056
Ref: 2a4122056
Ref: h5t h5py h5t TypeVlenID122206
Ref: 2a5122206
Ref: h5t h5py h5t TypeBitfieldID122311
Ref: 2a6122311
Ref: h5t h5py h5t TypeReferenceID122412
Ref: 2a7122412
Node: Predefined Datatypes122527
Ref: h5t predefined-datatypes122657
Ref: 2a8122657
Node: Floating-point122875
Ref: h5t floating-point122981
Ref: 2a9122981
Ref: h5t h5py h5t IEEE_F32LE123030
Ref: 2aa123030
Ref: h5t h5py h5t IEEE_F32BE123061
Ref: 2ab123061
Ref: h5t h5py h5t IEEE_F64LE123092
Ref: 2ac123092
Ref: h5t h5py h5t IEEE_F64BE123123
Ref: 2ad123123
Node: Integer types123154
Ref: h5t integer-types123284
Ref: 2ae123284
Ref: h5t h5py h5t STD_I8LE123331
Ref: 2af123331
Ref: h5t h5py h5t STD_I16LE123360
Ref: 2b0123360
Ref: h5t h5py h5t STD_I32LE123390
Ref: 2b1123390
Ref: h5t h5py h5t STD_I64LE123420
Ref: 2b2123420
Ref: h5t h5py h5t STD_I8BE123450
Ref: 2b3123450
Ref: h5t h5py h5t STD_I16BE123479
Ref: 2b4123479
Ref: h5t h5py h5t STD_I32BE123509
Ref: 2b5123509
Ref: h5t h5py h5t STD_I64BE123539
Ref: 2b6123539
Ref: h5t h5py h5t STD_U8LE123569
Ref: 2b7123569
Ref: h5t h5py h5t STD_U16LE123598
Ref: 2b8123598
Ref: h5t h5py h5t STD_U32LE123628
Ref: 2b9123628
Ref: h5t h5py h5t STD_U64LE123658
Ref: 2ba123658
Ref: h5t h5py h5t STD_U8BE123688
Ref: 2bb123688
Ref: h5t h5py h5t STD_U16BE123717
Ref: 2bc123717
Ref: h5t h5py h5t STD_U32BE123747
Ref: 2bd123747
Ref: h5t h5py h5t STD_U64BE123777
Ref: 2be123777
Ref: h5t h5py h5t NATIVE_INT8123807
Ref: 2bf123807
Ref: h5t h5py h5t NATIVE_UINT8123839
Ref: 2c0123839
Ref: h5t h5py h5t NATIVE_INT16123872
Ref: 2c1123872
Ref: h5t h5py h5t NATIVE_UINT16123905
Ref: 2c2123905
Ref: h5t h5py h5t NATIVE_INT32123939
Ref: 2c3123939
Ref: h5t h5py h5t NATIVE_UINT32123972
Ref: 2c4123972
Ref: h5t h5py h5t NATIVE_INT64124006
Ref: 2c5124006
Ref: h5t h5py h5t NATIVE_UINT64124039
Ref: 2c6124039
Ref: h5t h5py h5t NATIVE_FLOAT124073
Ref: 2c7124073
Ref: h5t h5py h5t NATIVE_DOUBLE124106
Ref: 2c8124106
Node: Reference types124140
Ref: h5t reference-types124268
Ref: 2c9124268
Ref: h5t h5py h5t STD_REF_OBJ124319
Ref: 2ca124319
Ref: h5t h5py h5t STD_REF_DSETREG124351
Ref: 2cb124351
Node: String types124387
Ref: h5t string-types124520
Ref: 2cc124520
Ref: h5t h5py h5t C_S1124565
Ref: 2cd124565
Ref: h5t h5py h5t FORTRAN_S1124632
Ref: 2ce124632
Ref: h5t h5py h5t VARIABLE124701
Ref: 2cf124701
Node: Python object type124759
Ref: h5t python-object-type124868
Ref: 2d0124868
Ref: h5t h5py h5t PYTHON_OBJECT124925
Ref: 2d1124925
Node: Module constants<11>124959
Ref: h5t module-constants125068
Ref: 2d2125068
Node: Datatype class codes125170
Ref: h5t datatype-class-codes125282
Ref: 2d3125282
Ref: h5t h5py h5t NO_CLASS125343
Ref: 2d4125343
Ref: h5t h5py h5t INTEGER125372
Ref: 2d5125372
Ref: h5t h5py h5t FLOAT125400
Ref: 2d6125400
Ref: h5t h5py h5t TIME125426
Ref: 2d7125426
Ref: h5t h5py h5t STRING125451
Ref: 2d8125451
Ref: h5t h5py h5t BITFIELD125478
Ref: 2d9125478
Ref: h5t h5py h5t OPAQUE125507
Ref: 259125507
Ref: h5t h5py h5t COMPOUND125534
Ref: 258125534
Ref: h5t h5py h5t REFERENCE125563
Ref: 2da125563
Ref: h5t h5py h5t ENUM125593
Ref: 2db125593
Ref: h5t h5py h5t VLEN125618
Ref: 2dc125618
Ref: h5t h5py h5t ARRAY125643
Ref: 2dd125643
Node: API Constants125669
Ref: h5t api-constants125781
Ref: 2de125781
Ref: h5t h5py h5t SGN_NONE125828
Ref: 2df125828
Ref: h5t h5py h5t SGN_2125857
Ref: 2e0125857
Ref: h5t h5py h5t ORDER_LE125883
Ref: 2e1125883
Ref: h5t h5py h5t ORDER_BE125912
Ref: 2e2125912
Ref: h5t h5py h5t ORDER_VAX125941
Ref: 2e3125941
Ref: h5t h5py h5t ORDER_NONE125971
Ref: 2e4125971
Ref: h5t h5py h5t ORDER_NATIVE126002
Ref: 2e5126002
Ref: h5t h5py h5t DIR_DEFAULT126035
Ref: 2e6126035
Ref: h5t h5py h5t DIR_ASCEND126067
Ref: 2e7126067
Ref: h5t h5py h5t DIR_DESCEND126098
Ref: 2e8126098
Ref: h5t h5py h5t STR_NULLTERM126130
Ref: 2e9126130
Ref: h5t h5py h5t STR_NULLPAD126163
Ref: 2ea126163
Ref: h5t h5py h5t STR_SPACEPAD126195
Ref: 2eb126195
Ref: h5t h5py h5t NORM_IMPLIED126228
Ref: 2ec126228
Ref: h5t h5py h5t NORM_MSBSET126261
Ref: 2ed126261
Ref: h5t h5py h5t NORM_NONE126293
Ref: 2ee126293
Ref: h5t h5py h5t CSET_ASCII126323
Ref: 1e4126323
Ref: h5t h5py h5t CSET_UTF8126354
Ref: 1e5126354
Ref: h5t h5py h5t PAD_ZERO126384
Ref: 2ef126384
Ref: h5t h5py h5t PAD_ONE126413
Ref: 2f0126413
Ref: h5t h5py h5t PAD_BACKGROUND126441
Ref: 2f1126441
Ref: h5t h5py h5t BKG_NO126476
Ref: 261126476
Ref: h5t h5py h5t BKG_TEMP126503
Ref: 2f2126503
Ref: h5t h5py h5t BKG_YES126532
Ref: 262126532
Node: Module H5Z126560
Ref: h5z doc126647
Ref: 2f3126647
Ref: h5z module-h5py h5z126647
Ref: 11126647
Ref: h5z module-h5z126647
Ref: 2f4126647
Ref: h5z h5py h5z filter_avail126707
Ref: 2f5126707
Ref: h5z h5py h5z get_filter_info127028
Ref: 2f6127028
Ref: h5z h5py h5z unregister_filter127541
Ref: 2f9127541
Node: Module constants<12>127688
Ref: h5z module-constants127768
Ref: 2fa127768
Node: Predefined filters127943
Ref: h5z predefined-filters128052
Ref: 2fb128052
Ref: h5z ref-h5z-filter128052
Ref: 1ba128052
Ref: h5z h5py h5z FILTER_NONE128109
Ref: 2fc128109
Ref: h5z h5py h5z FILTER_ALL128141
Ref: 2fd128141
Ref: h5z h5py h5z FILTER_DEFLATE128172
Ref: 1cc128172
Ref: h5z h5py h5z FILTER_SHUFFLE128207
Ref: 1cd128207
Ref: h5z h5py h5z FILTER_FLETCHER32128242
Ref: 1ce128242
Ref: h5z h5py h5z FILTER_SZIP128280
Ref: 1cf128280
Ref: h5z h5py h5z FILTER_SCALEOFFSET128312
Ref: 2fe128312
Ref: h5z h5py h5z FILTER_LZF128351
Ref: 2ff128351
Node: Filter flags128382
Ref: h5z filter-flags128521
Ref: 300128521
Ref: h5z ref-h5z-flag128521
Ref: 1bb128521
Ref: h5z h5py h5z FLAG_DEFMASK128566
Ref: 301128566
Ref: h5z h5py h5z FLAG_MANDATORY128599
Ref: 302128599
Ref: h5z h5py h5z FLAG_OPTIONAL128634
Ref: 303128634
Ref: h5z h5py h5z FLAG_INVMASK128668
Ref: 304128668
Ref: h5z h5py h5z FLAG_REVERSE128701
Ref: 305128701
Ref: h5z h5py h5z FLAG_SKIP_EDC128734
Ref: 306128734
Node: SZIP-specific options128768
Ref: h5z ref-h5z-szip128918
Ref: 307128918
Ref: h5z szip-specific-options128918
Ref: 308128918
Ref: h5z h5py h5z SZIP_ALLOW_K13_OPTION_MASK128981
Ref: 309128981
Ref: h5z h5py h5z SZIP_CHIP_OPTION_MASK129028
Ref: 30a129028
Ref: h5z h5py h5z SZIP_EC_OPTION_MASK129070
Ref: 30b129070
Ref: h5z h5py h5z SZIP_NN_OPTION_MASK129110
Ref: 30c129110
Ref: h5z h5py h5z SZIP_MAX_PIXELS_PER_BLOCK129150
Ref: 30d129150
Node: Scale/offset-specific options129196
Ref: h5z scale-offset-specific-options129345
Ref: 30e129345
Ref: h5z h5py h5z SO_FLOAT_DSCALE129424
Ref: 30f129424
Ref: h5z h5py h5z SO_FLOAT_ESCALE129460
Ref: 310129460
Ref: h5z h5py h5z SO_INT129496
Ref: 311129496
Ref: h5z h5py h5z SO_INT_MINBITS_DEFAULT129523
Ref: 312129523
Node: Other flags129566
Ref: h5z other-flags129685
Ref: 313129685
Ref: h5z h5py h5z FILTER_CONFIG_ENCODE_ENABLED129728
Ref: 2f7129728
Ref: h5z h5py h5z FILTER_CONFIG_DECODE_ENABLED129777
Ref: 2f8129777
Ref: h5z h5py h5z DISABLE_EDC129826
Ref: 314129826
Ref: h5z h5py h5z ENABLE_EDC129858
Ref: 315129858
Ref: h5z h5py h5z NO_EDC129889
Ref: 316129889
Node: Python Module Index129916
Node: Index130350

End Tag Table


Local Variables:
coding: utf-8
End:
