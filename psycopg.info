This is psycopg.info, produced by makeinfo version 6.5 from
psycopg.texi.

     Psycopg 2.0, Jan 19, 2021

     unknown

     Copyright © 2001-2020, Federico Di Gregorio, Daniele Varrazzo, The
     Psycopg Team

INFO-DIR-SECTION Miscellaneous
START-INFO-DIR-ENTRY
* psycopg: (psycopg.info). One line description of project
END-INFO-DIR-ENTRY


   Generated by Sphinx 2.3.1.


File: psycopg.info,  Node: Top,  Next: Installation,  Up: (dir)

Psycopg
*******

     Psycopg 2.0, Jan 19, 2021

     unknown

     Copyright © 2001-2020, Federico Di Gregorio, Daniele Varrazzo, The
     Psycopg Team

Psycopg(1) is the most popular PostgreSQL(2) database adapter for the
Python(3) programming language.  Its main features are the complete
implementation of the Python DB API 2.0(4) specification and the thread
safety (several threads can share the same connection).  It was designed
for heavily multi-threaded applications that create and destroy lots of
cursors and make a large number of concurrent ‘INSERT’s or ‘UPDATE’s.

Psycopg 2 is mostly implemented in C as a libpq(5) wrapper, resulting in
being both efficient and secure.  It features client-side and *note
server-side: 9. cursors, *note asynchronous communication: a. and *note
notifications: b, *note COPY: c. support.  Many Python types are
supported out-of-the-box and *note adapted to matching PostgreSQL data
types: d.; adaptation can be extended and customized thanks to a
flexible *note objects adaptation system: e.

Psycopg 2 is both Unicode and Python 3 friendly.

Contents
========

* Menu:

* Installation::
* Basic module usage::
* The psycopg2 module content::
* The connection class::
* The cursor class::
* More advanced topics::
* psycopg2.extensions – Extensions to the DB API: psycopg2 extensions – Extensions to the DB API.
* psycopg2.extras – Miscellaneous goodies for Psycopg 2: psycopg2 extras – Miscellaneous goodies for Psycopg 2.
* psycopg2.errors – Exception classes mapping PostgreSQL errors: psycopg2 errors – Exception classes mapping PostgreSQL errors.
* psycopg2.sql – SQL string composition: psycopg2 sql – SQL string composition.
* psycopg2.tz – tzinfo implementations for Psycopg 2: psycopg2 tz – tzinfo implementations for Psycopg 2.
* psycopg2.pool – Connections pooling: psycopg2 pool – Connections pooling.
* psycopg2.errorcodes – Error codes defined by PostgreSQL: psycopg2 errorcodes – Error codes defined by PostgreSQL.
* Frequently Asked Questions::
* Release notes::
* License::
* Python Module Index::
* Index::

 — The Detailed Node Listing —

Installation

* Quick Install::
* Prerequisites::
* Non-standard builds::
* Running the test suite::
* If you still have problems::

Quick Install

* psycopg vs psycopg-binary::
* Change in binary packages between Psycopg 2.7 and 2.8: Change in binary packages between Psycopg 2 7 and 2 8.

Prerequisites

* Build prerequisites::
* Runtime requirements::

Non-standard builds

* Creating a debug build::
* Non-standard Python Implementation::

Basic module usage

* Passing parameters to SQL queries::
* Adaptation of Python values to SQL types::
* Transactions control::
* Server side cursors::
* Thread and process safety::
* Using COPY TO and COPY FROM::
* Access to PostgreSQL large objects::
* Two-Phase Commit protocol support::

Passing parameters to SQL queries

* The problem with the query parameters::
* Values containing backslashes and LIKE::

Adaptation of Python values to SQL types

* Constants adaptation::
* Numbers adaptation::
* Strings adaptation::
* Binary adaptation::
* Date/Time objects adaptation::
* Lists adaptation::
* Tuples adaptation::

Strings adaptation

* Unicode handling::

Date/Time objects adaptation

* Time zones handling::
* Infinite dates handling::
* Time handling::

Transactions control

* with statement::

The psycopg2 module content

* Exceptions::
* Type Objects and Constructors::

More advanced topics

* Connection and cursor factories::
* Adapting new Python types to SQL syntax::
* Type casting of SQL types into Python objects::
* Asynchronous notifications::
* Asynchronous support::
* Support for coroutine libraries::
* Replication protocol support::

Replication protocol support

* Logical replication Quick-Start::

psycopg2.extensions – Extensions to the DB API

* Classes definitions::
* SQL adaptation protocol objects::
* Database types casting functions::
* Additional exceptions::
* Coroutines support functions::
* Other functions::
* Isolation level constants::
* Transaction status constants::
* Connection status constants::
* Poll constants::
* Additional database types::

psycopg2.extras – Miscellaneous goodies for Psycopg 2

* Connection and cursor subclasses::
* Replication support objects::
* Additional data types::
* Fast execution helpers::
* Coroutine support::

Connection and cursor subclasses

* Dictionary-like cursor::
* Real dictionary cursor::
* namedtuple cursor::
* Logging cursor::

Additional data types

* JSON adaptation::
* Hstore data type::
* Composite types casting::
* Range data types::
* UUID data type::
* Networking data types::

psycopg2.errors – Exception classes mapping PostgreSQL errors

* SQLSTATE exception classes::

psycopg2.sql – SQL string composition

* Module usage::
* sql objects::

Frequently Asked Questions

* Meta::
* Problems with transactions handling::
* Problems with type conversions::
* Best practices::
* Problems compiling and installing psycopg2::

Release notes

* Current release::
* What’s new in psycopg 2.9: What’s new in psycopg 2 9.
* What’s new in psycopg 2.8: What’s new in psycopg 2 8.
* What’s new in psycopg 2.7: What’s new in psycopg 2 7.
* What’s new in psycopg 2.6: What’s new in psycopg 2 6.
* What’s new in psycopg 2.5: What’s new in psycopg 2 5.
* What’s new in psycopg 2.4: What’s new in psycopg 2 4.
* What’s new in psycopg 2.3: What’s new in psycopg 2 3.
* What’s new in psycopg 2.2: What’s new in psycopg 2 2.
* What’s new in psycopg 2.0: What’s new in psycopg 2 0.

What’s new in psycopg 2.9

* What’s new in psycopg 2.8.6: What’s new in psycopg 2 8 6.
* What’s new in psycopg 2.8.5: What’s new in psycopg 2 8 5.
* What’s new in psycopg 2.8.4: What’s new in psycopg 2 8 4.
* What’s new in psycopg 2.8.3: What’s new in psycopg 2 8 3.
* What’s new in psycopg 2.8.2: What’s new in psycopg 2 8 2.
* What’s new in psycopg 2.8.1: What’s new in psycopg 2 8 1.

What’s new in psycopg 2.8

* What’s new in psycopg 2.7.7: What’s new in psycopg 2 7 7.
* What’s new in psycopg 2.7.6.1: What’s new in psycopg 2 7 6 1.
* What’s new in psycopg 2.7.6: What’s new in psycopg 2 7 6.
* What’s new in psycopg 2.7.5: What’s new in psycopg 2 7 5.
* What’s new in psycopg 2.7.4: What’s new in psycopg 2 7 4.
* What’s new in psycopg 2.7.3.2: What’s new in psycopg 2 7 3 2.
* What’s new in psycopg 2.7.3.1: What’s new in psycopg 2 7 3 1.
* What’s new in psycopg 2.7.3: What’s new in psycopg 2 7 3.
* What’s new in psycopg 2.7.2: What’s new in psycopg 2 7 2.
* What’s new in psycopg 2.7.1: What’s new in psycopg 2 7 1.

What’s new in psycopg 2.7

* What’s new in psycopg 2.6.2: What’s new in psycopg 2 6 2.
* What’s new in psycopg 2.6.1: What’s new in psycopg 2 6 1.

What’s new in psycopg 2.6

* What’s new in psycopg 2.5.5: What’s new in psycopg 2 5 5.
* What’s new in psycopg 2.5.4: What’s new in psycopg 2 5 4.
* What’s new in psycopg 2.5.3: What’s new in psycopg 2 5 3.
* What’s new in psycopg 2.5.2: What’s new in psycopg 2 5 2.
* What’s new in psycopg 2.5.1: What’s new in psycopg 2 5 1.

What’s new in psycopg 2.5

* What’s new in psycopg 2.4.6: What’s new in psycopg 2 4 6.
* What’s new in psycopg 2.4.5: What’s new in psycopg 2 4 5.
* What’s new in psycopg 2.4.4: What’s new in psycopg 2 4 4.
* What’s new in psycopg 2.4.3: What’s new in psycopg 2 4 3.
* What’s new in psycopg 2.4.2: What’s new in psycopg 2 4 2.
* What’s new in psycopg 2.4.1: What’s new in psycopg 2 4 1.

What’s new in psycopg 2.4

* What’s new in psycopg 2.3.2: What’s new in psycopg 2 3 2.
* What’s new in psycopg 2.3.1: What’s new in psycopg 2 3 1.

What’s new in psycopg 2.3

* What’s new in psycopg 2.2.2: What’s new in psycopg 2 2 2.
* What’s new in psycopg 2.2.1: What’s new in psycopg 2 2 1.

What’s new in psycopg 2.2

* What’s new in psycopg 2.0.14: What’s new in psycopg 2 0 14.
* What’s new in psycopg 2.0.13: What’s new in psycopg 2 0 13.
* What’s new in psycopg 2.0.12: What’s new in psycopg 2 0 12.
* What’s new in psycopg 2.0.11: What’s new in psycopg 2 0 11.
* What’s new in psycopg 2.0.10: What’s new in psycopg 2 0 10.
* What’s new in psycopg 2.0.9: What’s new in psycopg 2 0 9.
* What’s new in psycopg 2.0.9: What’s new in psycopg 2 0 9<2>.
* What’s new in psycopg 2.0.8: What’s new in psycopg 2 0 8.
* What’s new in psycopg 2.0.7: What’s new in psycopg 2 0 7.
* What’s new in psycopg 2.0.6: What’s new in psycopg 2 0 6.
* What’s new in psycopg 2.0.5.1: What’s new in psycopg 2 0 5 1.
* What’s new in psycopg 2.0.5: What’s new in psycopg 2 0 5.
* What’s new in psycopg 2.0.4: What’s new in psycopg 2 0 4.
* What’s new in psycopg 2.0.3: What’s new in psycopg 2 0 3.
* What’s new in psycopg 2.0.2: What’s new in psycopg 2 0 2.
* What’s new in psycopg 2.0.1: What’s new in psycopg 2 0 1.

What’s new in psycopg 2.0

* What’s new in psycopg 2.0 beta 7: What’s new in psycopg 2 0 beta 7.
* What’s new in psycopg 2.0 beta 6: What’s new in psycopg 2 0 beta 6.
* What’s new in psycopg 2.0 beta 5: What’s new in psycopg 2 0 beta 5.
* What’s new in psycopg 2.0 beta 4: What’s new in psycopg 2 0 beta 4.
* What’s new in psycopg 2.0 beta 3: What’s new in psycopg 2 0 beta 3.
* What’s new in psycopg 2.0 beta 2: What’s new in psycopg 2 0 beta 2.
* What’s new in psycopg 2.0 beta 1: What’s new in psycopg 2 0 beta 1.
* What’s new in psycopg 1.99.13: What’s new in psycopg 1 99 13.
* What’s new in psycopg 1.99.12: What’s new in psycopg 1 99 12.
* What’s new in psycopg 1.99.11: What’s new in psycopg 1 99 11.
* What’s new in psycopg 1.99.10: What’s new in psycopg 1 99 10.
* What’s new in psycopg 1.99.9: What’s new in psycopg 1 99 9.
* What’s new in psycopg 1.99.8: What’s new in psycopg 1 99 8.
* What’s new in psycopg 1.99.7: What’s new in psycopg 1 99 7.
* What’s new in psycopg 1.99.6: What’s new in psycopg 1 99 6.
* What’s new in psycopg 1.99.3: What’s new in psycopg 1 99 3.
* What’s new in psycopg 1.99.3: What’s new in psycopg 1 99 3<2>.
* What’s new in psycopg 1.99.2: What’s new in psycopg 1 99 2.
* What’s new in psycopg 1.99.1: What’s new in psycopg 1 99 1.
* What’s new in psycopg 1.99.0: What’s new in psycopg 1 99 0.

License

* psycopg2 and the LGPL::
* Alternative licenses::


   ---------- Footnotes ----------

   (1) https://psycopg.org/

   (2) https://www.postgresql.org/

   (3) https://www.python.org/

   (4) https://www.python.org/dev/peps/pep-0249/

   (5) https://www.postgresql.org/docs/current/static/libpq.html


File: psycopg.info,  Node: Installation,  Next: Basic module usage,  Prev: Top,  Up: Top

1 Installation
**************

Psycopg is a PostgreSQL(1) adapter for the Python(2) programming
language.  It is a wrapper for the libpq(3), the official PostgreSQL
client library.

* Menu:

* Quick Install::
* Prerequisites::
* Non-standard builds::
* Running the test suite::
* If you still have problems::

   ---------- Footnotes ----------

   (1) https://www.postgresql.org/

   (2) https://www.python.org/

   (3) https://www.postgresql.org/docs/current/static/libpq.html


File: psycopg.info,  Node: Quick Install,  Next: Prerequisites,  Up: Installation

1.1 Quick Install
=================

For most operating systems, the quickest way to install Psycopg is using
the wheel(1) package available on PyPI(2):

     $ pip install psycopg2-binary

This will install a pre-compiled binary version of the module which does
not require the build or runtime prerequisites described below.  Make
sure to use an up-date-date version of ‘pip’ (you can upgrade it using
something like ‘pip install -U pip’).

You may then import the ‘psycopg2’ package, as usual:

     import psycopg2

     # Connect to your postgres DB
     conn = psycopg2.connect("dbname=test user=postgres")

     # Open a cursor to perform database operations
     cur = conn.cursor()

     # Execute a query
     cur.execute("SELECT * FROM my_data")

     # Retrieve query results
     records = cur.fetchall()

* Menu:

* psycopg vs psycopg-binary::
* Change in binary packages between Psycopg 2.7 and 2.8: Change in binary packages between Psycopg 2 7 and 2 8.

   ---------- Footnotes ----------

   (1) https://pythonwheels.com/

   (2) https://pypi.org/project/psycopg2-binary/


File: psycopg.info,  Node: psycopg vs psycopg-binary,  Next: Change in binary packages between Psycopg 2 7 and 2 8,  Up: Quick Install

1.1.1 psycopg vs psycopg-binary
-------------------------------

The ‘psycopg2-binary’ package is meant for beginners to start playing
with Python and PostgreSQL without the need to meet the build
requirements.

If you are the maintainer of a published package depending on ‘psycopg2’
you shouldn’t use ‘psycopg2-binary’ as a module dependency.  `For
production use you are advised to use the source distribution.'

The binary packages come with their own versions of a few C libraries,
among which ‘libpq’ and ‘libssl’, which will be used regardless of other
libraries available on the client: upgrading the system libraries will
not upgrade the libraries used by ‘psycopg2’.  Please build ‘psycopg2’
from source if you want to maintain binary upgradeability.

     Warning: The ‘psycopg2’ wheel package comes packaged, among the
     others, with its own ‘libssl’ binary.  This may create conflicts
     with other extension modules binding with ‘libssl’ as well, for
     instance with the Python ssl(1) module: in some cases, under
     concurrency, the interaction between the two libraries may result
     in a segfault.  In case of doubts you are advised to use a package
     built from source.

   ---------- Footnotes ----------

   (1) https://docs.python.org/3/library/ssl.html#module-ssl


File: psycopg.info,  Node: Change in binary packages between Psycopg 2 7 and 2 8,  Prev: psycopg vs psycopg-binary,  Up: Quick Install

1.1.2 Change in binary packages between Psycopg 2.7 and 2.8
-----------------------------------------------------------

In version 2.7.x, ‘pip install psycopg2’ would have tried to install
automatically the binary package of Psycopg.  Because of concurrency
problems binary packages have displayed, ‘psycopg2-binary’ has become a
separate package, and from 2.8 it has become the only way to install the
binary package.

If you are using Psycopg 2.7 and you want to disable the use of wheel
binary packages, relying on the system libraries available on your
client, you can use the ‘pip’ –no-binary option(1), e.g.:

     $ pip install --no-binary :all: psycopg2

which can be specified in your ‘requirements.txt’ files too, e.g.  use:

     psycopg2>=2.7,<2.8 --no-binary psycopg2

to use the last bugfix release of the ‘psycopg2’ 2.7 package, specifying
to always compile it from source.  Of course in this case you will have
to meet the *note build prerequisites: 19.

   ---------- Footnotes ----------

   (1) 
https://pip.pypa.io/en/stable/reference/pip_install/#install-no-binary


File: psycopg.info,  Node: Prerequisites,  Next: Non-standard builds,  Prev: Quick Install,  Up: Installation

1.2 Prerequisites
=================

The current ‘psycopg2’ implementation supports:

   - Python version 2.7

   - Python 3 versions from 3.6 to 3.9

   - PostgreSQL server versions from 7.4 to 13

   - PostgreSQL client library version from 9.1

* Menu:

* Build prerequisites::
* Runtime requirements::


File: psycopg.info,  Node: Build prerequisites,  Next: Runtime requirements,  Up: Prerequisites

1.2.1 Build prerequisites
-------------------------

The build prerequisites are to be met in order to install Psycopg from
source code, from a source distribution package, GitHub(1) or from PyPI.

Psycopg is a C wrapper around the libpq(2) PostgreSQL client library.
To install it from sources you will need:

   - A C compiler.

   - The Python header files.  They are usually installed in a package
     such as `python-dev' or `python3-dev'.  A message such as `error:
     Python.h: No such file or directory' is an indication that the
     Python headers are missing.

   - The libpq header files.  They are usually installed in a package
     such as `libpq-dev'.  If you get an `error: libpq-fe.h: No such
     file or directory' you are missing them.

   - The ‘pg_config’ program: it is usually installed by the `libpq-dev'
     package but sometimes it is not in a ‘PATH’ directory.  Having it
     in the ‘PATH’ greatly streamlines the installation, so try running
     ‘pg_config --version’: if it returns an error or an unexpected
     version number then locate the directory containing the ‘pg_config’
     shipped with the right libpq version (usually
     ‘/usr/lib/postgresql/X.Y/bin/’) and add it to the ‘PATH’:

          $ export PATH=/usr/lib/postgresql/X.Y/bin/:$PATH

     You only need ‘pg_config’ to compile ‘psycopg2’, not for its
     regular usage.

Once everything is in place it’s just a matter of running the standard:

     $ pip install psycopg2

or, from the directory containing the source code:

     $ python setup.py build
     $ python setup.py install

   ---------- Footnotes ----------

   (1) https://github.com/psycopg/psycopg2

   (2) https://www.postgresql.org/docs/current/static/libpq.html


File: psycopg.info,  Node: Runtime requirements,  Prev: Build prerequisites,  Up: Prerequisites

1.2.2 Runtime requirements
--------------------------

Unless you compile ‘psycopg2’ as a static library, or you install it
from a self-contained wheel package, it will need the libpq(1) library
at runtime (usually distributed in a ‘libpq.so’ or ‘libpq.dll’ file).
‘psycopg2’ relies on the host OS to find the library if the library is
installed in a standard location there is usually no problem; if the
library is in a non-standard location you will have to tell somehow
Psycopg how to find it, which is OS-dependent (for instance setting a
suitable ‘LD_LIBRARY_PATH’ on Linux).

     Note: The libpq header files used to compile ‘psycopg2’ should
     match the version of the library linked at runtime.  If you get
     errors about missing or mismatching libraries when importing
     ‘psycopg2’ check (e.g.  using ‘ldd’) if the module
     ‘psycopg2/_psycopg.so’ is linked to the right ‘libpq.so’.

     Note: Whatever version of libpq ‘psycopg2’ is compiled with, it
     will be possible to connect to PostgreSQL servers of any supported
     version: just install the most recent libpq version or the most
     practical, without trying to match it to the version of the
     PostgreSQL server you will have to connect to.

   ---------- Footnotes ----------

   (1) https://www.postgresql.org/docs/current/static/libpq.html


File: psycopg.info,  Node: Non-standard builds,  Next: Running the test suite,  Prev: Prerequisites,  Up: Installation

1.3 Non-standard builds
=======================

If you have less standard requirements such as:

   - creating a *note debug build: 1e,

   - using ‘pg_config’ not in the ‘PATH’,

   - supporting ‘mx.DateTime’,

then take a look at the ‘setup.cfg’ file.

Some of the options available in ‘setup.cfg’ are also available as
command line arguments of the ‘build_ext’ sub-command.  For instance you
can specify an alternate ‘pg_config’ location using:

     $ python setup.py build_ext --pg-config /path/to/pg_config build

Use ‘python setup.py build_ext --help’ to get a list of the options
supported.

* Menu:

* Creating a debug build::
* Non-standard Python Implementation::


File: psycopg.info,  Node: Creating a debug build,  Next: Non-standard Python Implementation,  Up: Non-standard builds

1.3.1 Creating a debug build
----------------------------

In case of problems, Psycopg can be configured to emit detailed debug
messages, which can be very useful for diagnostics and to report a bug.
In order to create a debug package:

   - Download(1) and unpack the Psycopg `source package' (the ‘.tar.gz’
     package).

   - Edit the ‘setup.cfg’ file adding the ‘PSYCOPG_DEBUG’ flag to the
     ‘define’ option.

   - *note Compile and install: 19. the package.

   - Set the ‘PSYCOPG_DEBUG’ environment variable:

     $ export PSYCOPG_DEBUG=1

   - Run your program (making sure that the ‘psycopg2’ package imported
     is the one you just compiled and not e.g.  the system one): you
     will have a copious stream of informations printed on stderr.

   ---------- Footnotes ----------

   (1) https://pypi.org/project/psycopg2/#files


File: psycopg.info,  Node: Non-standard Python Implementation,  Prev: Creating a debug build,  Up: Non-standard builds

1.3.2 Non-standard Python Implementation
----------------------------------------

The *note psycopg2: 0. package is the current mature implementation of
the adapter: it is a C extension and as such it is only compatible with
CPython(1).  If you want to use Psycopg on a different Python
implementation (PyPy, Jython, IronPython) there is a couple of
alternative:

   - a Ctypes port(2), but it is not as mature as the C implementation
     yet and it is not as feature-complete;

   - a CFFI port(3) which is currently more used and reported more
     efficient on PyPy, but please be careful of its version numbers
     because they are not aligned to the official psycopg2 ones and some
     features may differ.

   ---------- Footnotes ----------

   (1) https://en.wikipedia.org/wiki/CPython

   (2) https://github.com/mvantellingen/psycopg2-ctypes

   (3) https://github.com/chtd/psycopg2cffi


File: psycopg.info,  Node: Running the test suite,  Next: If you still have problems,  Prev: Non-standard builds,  Up: Installation

1.4 Running the test suite
==========================

Once ‘psycopg2’ is installed you can run the test suite to verify it is
working correctly.  From the source directory, you can run:

     $ python -c "import tests; tests.unittest.main(defaultTest='tests.test_suite')" --verbose

The tests run against a database called ‘psycopg2_test’ on UNIX socket
and the standard port.  You can configure a different database to run
the test by setting the environment variables:

   - ‘PSYCOPG2_TESTDB’

   - ‘PSYCOPG2_TESTDB_HOST’

   - ‘PSYCOPG2_TESTDB_PORT’

   - ‘PSYCOPG2_TESTDB_USER’

The database should already exist before running the tests.


File: psycopg.info,  Node: If you still have problems,  Prev: Running the test suite,  Up: Installation

1.5 If you still have problems
==============================

Try the following.  `In order:'

   - Read again the *note Build prerequisites: 19.

   - Read the *note FAQ: 26.

   - Google for ‘psycopg2’ `your error message'.  Especially useful the
     week after the release of a new OS X version.

   - Write to the Mailing List(1).

   - If you think that you have discovered a bug, test failure or
     missing feature please raise a ticket in the bug tracker(2).

   - Complain on your blog or on Twitter that ‘psycopg2’ is the worst
     package ever and about the quality time you have wasted figuring
     out the correct ‘ARCHFLAGS’.  Especially useful from the Starbucks
     near you.

   ---------- Footnotes ----------

   (1) https://www.postgresql.org/list/psycopg/

   (2) https://github.com/psycopg/psycopg2/issues


File: psycopg.info,  Node: Basic module usage,  Next: The psycopg2 module content,  Prev: Installation,  Up: Top

2 Basic module usage
********************

The basic Psycopg usage is common to all the database adapters
implementing the DB API 2.0(1) protocol.  Here is an interactive session
showing some of the basic commands:

     >>> import psycopg2

     # Connect to an existing database
     >>> conn = psycopg2.connect("dbname=test user=postgres")

     # Open a cursor to perform database operations
     >>> cur = conn.cursor()

     # Execute a command: this creates a new table
     >>> cur.execute("CREATE TABLE test (id serial PRIMARY KEY, num integer, data varchar);")

     # Pass data to fill a query placeholders and let Psycopg perform
     # the correct conversion (no more SQL injections!)
     >>> cur.execute("INSERT INTO test (num, data) VALUES (%s, %s)",
     ...      (100, "abc'def"))

     # Query the database and obtain data as Python objects
     >>> cur.execute("SELECT * FROM test;")
     >>> cur.fetchone()
     (1, 100, "abc'def")

     # Make the changes to the database persistent
     >>> conn.commit()

     # Close communication with the database
     >>> cur.close()
     >>> conn.close()

The main entry points of Psycopg are:

   - The function *note connect(): 2b. creates a new database session
     and returns a new *note connection: 2c. instance.

   - The class *note connection: 2c. encapsulates a database session.
     It allows to:

        - create new *note cursor: 2d. instances using the *note
          cursor(): 2e. method to execute database commands and queries,

        - terminate transactions using the methods *note commit(): 2f.
          or *note rollback(): 30.

   - The class *note cursor: 2d. allows interaction with the database:

        - send commands to the database using methods such as *note
          execute(): 31. and *note executemany(): 32,

        - retrieve data from the database *note by iteration: 33. or
          using methods such as *note fetchone(): 34, *note fetchmany():
          35, *note fetchall(): 36.

* Menu:

* Passing parameters to SQL queries::
* Adaptation of Python values to SQL types::
* Transactions control::
* Server side cursors::
* Thread and process safety::
* Using COPY TO and COPY FROM::
* Access to PostgreSQL large objects::
* Two-Phase Commit protocol support::

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0249/


File: psycopg.info,  Node: Passing parameters to SQL queries,  Next: Adaptation of Python values to SQL types,  Up: Basic module usage

2.1 Passing parameters to SQL queries
=====================================

Psycopg converts Python variables to SQL values using their types: the
Python type determines the function used to convert the object into a
string representation suitable for PostgreSQL. Many standard Python
types are already *note adapted to the correct SQL representation: d.
Passing parameters to an SQL statement happens in functions such as
*note cursor.execute(): 31. by using ‘%s’ placeholders in the SQL
statement, and passing a sequence of values as the second argument of
the function.  For example the Python function call:

     >>> cur.execute("""
     ...     INSERT INTO some_table (an_int, a_date, a_string)
     ...     VALUES (%s, %s, %s);
     ...     """,
     ...     (10, datetime.date(2005, 11, 18), "O'Reilly"))

is converted into a SQL command similar to:

     INSERT INTO some_table (an_int, a_date, a_string)
     VALUES (10, '2005-11-18', 'O''Reilly');

Named arguments are supported too using ‘%(`name')s’ placeholders in the
query and specifying the values into a mapping.  Using named arguments
allows to specify the values in any order and to repeat the same value
in several places in the query:

     >>> cur.execute("""
     ...     INSERT INTO some_table (an_int, a_date, another_date, a_string)
     ...     VALUES (%(int)s, %(date)s, %(date)s, %(str)s);
     ...     """,
     ...     {'int': 10, 'str': "O'Reilly", 'date': datetime.date(2005, 11, 18)})

Using characters ‘%’, ‘(’, ‘)’ in the argument names is not supported.

When parameters are used, in order to include a literal ‘%’ in the query
you can use the ‘%%’ string:

     >>> cur.execute("SELECT (%s % 2) = 0 AS even", (10,))       # WRONG
     >>> cur.execute("SELECT (%s %% 2) = 0 AS even", (10,))      # correct

While the mechanism resembles regular Python strings manipulation, there
are a few subtle differences you should care about when passing
parameters to a query.

   - The Python string operator ‘%’ `must not be used': the *note
     execute(): 31. method accepts a tuple or dictionary of values as
     second parameter.  *note Never use % or + to merge values into
     queries: 3a.:
          >>> cur.execute("INSERT INTO numbers VALUES (%s, %s)" % (10, 20)) # WRONG
          >>> cur.execute("INSERT INTO numbers VALUES (%s, %s)", (10, 20))  # correct

   - For positional variables binding, `the second argument must always
     be a sequence', even if it contains a single variable (remember
     that Python requires a comma to create a single element tuple):

          >>> cur.execute("INSERT INTO foo VALUES (%s)", "bar")    # WRONG
          >>> cur.execute("INSERT INTO foo VALUES (%s)", ("bar"))  # WRONG
          >>> cur.execute("INSERT INTO foo VALUES (%s)", ("bar",)) # correct
          >>> cur.execute("INSERT INTO foo VALUES (%s)", ["bar"])  # correct

   - The placeholder `must not be quoted'.  Psycopg will add quotes
     where needed:

          >>> cur.execute("INSERT INTO numbers VALUES ('%s')", (10,)) # WRONG
          >>> cur.execute("INSERT INTO numbers VALUES (%s)", (10,))   # correct

   - The variables placeholder `must always be a' ‘%s’, even if a
     different placeholder (such as a ‘%d’ for integers or ‘%f’ for
     floats) may look more appropriate:

          >>> cur.execute("INSERT INTO numbers VALUES (%d)", (10,))   # WRONG
          >>> cur.execute("INSERT INTO numbers VALUES (%s)", (10,))   # correct

   - Only query values should be bound via this method: it shouldn’t be
     used to merge table or field names to the query (Psycopg will try
     quoting the table name as a string value, generating invalid SQL).
     If you need to generate dynamically SQL queries (for instance
     choosing dynamically a table name) you can use the facilities
     provided by the *note psycopg2.sql: 6. module:

          >>> cur.execute("INSERT INTO %s VALUES (%s)", ('numbers', 10))  # WRONG
          >>> cur.execute(                                                # correct
          ...     SQL("INSERT INTO {} VALUES (%s)").format(Identifier('numbers')),
          ...     (10,))

* Menu:

* The problem with the query parameters::
* Values containing backslashes and LIKE::


File: psycopg.info,  Node: The problem with the query parameters,  Next: Values containing backslashes and LIKE,  Up: Passing parameters to SQL queries

2.1.1 The problem with the query parameters
-------------------------------------------

The SQL representation of many data types is often different from their
Python string representation.  The typical example is with single quotes
in strings: in SQL single quotes are used as string literal delimiters,
so the ones appearing inside the string itself must be escaped, whereas
in Python single quotes can be left unescaped if the string is delimited
by double quotes.

Because of the difference, sometime subtle, between the data types
representations, a naïve approach to query strings composition, such as
using Python strings concatenation, is a recipe for `terrible' problems:

     >>> SQL = "INSERT INTO authors (name) VALUES ('%s');" # NEVER DO THIS
     >>> data = ("O'Reilly", )
     >>> cur.execute(SQL % data) # THIS WILL FAIL MISERABLY
     ProgrammingError: syntax error at or near "Reilly"
     LINE 1: INSERT INTO authors (name) VALUES ('O'Reilly')
                                                   ^

If the variables containing the data to send to the database come from
an untrusted source (such as a form published on a web site) an attacker
could easily craft a malformed string, either gaining access to
unauthorized data or performing destructive operations on the database.
This form of attack is called SQL injection(1) and is known to be one of
the most widespread forms of attack to database servers.  Before
continuing, please print this page(2) as a memo and hang it onto your
desk.

Psycopg can *note automatically convert Python objects to and from SQL
literals: d.: using this feature your code will be more robust and
reliable.  We must stress this point:
     Warning: Never, `never', `NEVER' use Python string concatenation
     (‘+’) or string parameters interpolation (‘%’) to pass variables to
     a SQL query string.  Not even at gunpoint.

The correct way to pass variables in a SQL command is using the second
argument of the *note execute(): 31. method:

     >>> SQL = "INSERT INTO authors (name) VALUES (%s);" # Note: no quotes
     >>> data = ("O'Reilly", )
     >>> cur.execute(SQL, data) # Note: no % operator

   ---------- Footnotes ----------

   (1) https://en.wikipedia.org/wiki/SQL_injection

   (2) https://xkcd.com/327/


File: psycopg.info,  Node: Values containing backslashes and LIKE,  Prev: The problem with the query parameters,  Up: Passing parameters to SQL queries

2.1.2 Values containing backslashes and LIKE
--------------------------------------------

Unlike in Python, the backslash (‘\’) is not used as an escape character
`except' in patterns used with ‘LIKE’ and ‘ILIKE’ where they are needed
to escape the ‘%’ and ‘_’ characters.

This can lead to confusing situations:

     >>> path = r'C:\Users\Bobby.Tables'
     >>> cur.execute('INSERT INTO mytable(path) VALUES (%s)', (path,))
     >>> cur.execute('SELECT * FROM mytable WHERE path LIKE %s', (path,))
     >>> cur.fetchall()
     []

The solution is to specify an ‘ESCAPE’ character of ‘''’ (empty string)
in your ‘LIKE’ query:

     >>> cur.execute("SELECT * FROM mytable WHERE path LIKE %s ESCAPE ''", (path,))


File: psycopg.info,  Node: Adaptation of Python values to SQL types,  Next: Transactions control,  Prev: Passing parameters to SQL queries,  Up: Basic module usage

2.2 Adaptation of Python values to SQL types
============================================

Many standard Python types are adapted into SQL and returned as Python
objects when a query is executed.

The following table shows the default mapping between Python and
PostgreSQL types:

The mapping is fairly customizable: see *note Adapting new Python types
to SQL syntax: e. and *note Type casting of SQL types into Python
objects: 40.  You can also find a few other specialized adapters in the
*note psycopg2.extras: 4. module.

* Menu:

* Constants adaptation::
* Numbers adaptation::
* Strings adaptation::
* Binary adaptation::
* Date/Time objects adaptation::
* Lists adaptation::
* Tuples adaptation::


File: psycopg.info,  Node: Constants adaptation,  Next: Numbers adaptation,  Up: Adaptation of Python values to SQL types

2.2.1 Constants adaptation
--------------------------

Python None(1) and boolean values True(2) and False(3) are converted
into the proper SQL literals:

     >>> cur.mogrify("SELECT %s, %s, %s;", (None, True, False))
     'SELECT NULL, true, false;'

   ---------- Footnotes ----------

   (1) https://docs.python.org/3/library/constants.html#None

   (2) https://docs.python.org/3/library/constants.html#True

   (3) https://docs.python.org/3/library/constants.html#False


File: psycopg.info,  Node: Numbers adaptation,  Next: Strings adaptation,  Prev: Constants adaptation,  Up: Adaptation of Python values to SQL types

2.2.2 Numbers adaptation
------------------------

Python numeric objects int(1), ‘long’, float(2), Decimal(3) are
converted into a PostgreSQL numerical representation:

     >>> cur.mogrify("SELECT %s, %s, %s, %s;", (10, 10L, 10.0, Decimal("10.00")))
     'SELECT 10, 10, 10.0, 10.00;'

Reading from the database, integer types are converted into ‘int’,
floating point types are converted into ‘float’, ‘numeric’/‘decimal’ are
converted into ‘Decimal’.

     Note: Sometimes you may prefer to receive ‘numeric’ data as ‘float’
     instead, for performance reason or ease of manipulation: you can
     configure an adapter to *note cast PostgreSQL numeric to Python
     float: 45.  This of course may imply a loss of precision.

See also
........

PostgreSQL numeric types(4)

   ---------- Footnotes ----------

   (1) https://docs.python.org/3/library/functions.html#int

   (2) https://docs.python.org/3/library/functions.html#float

   (3) https://docs.python.org/3/library/decimal.html#decimal.Decimal

   (4) 
https://www.postgresql.org/docs/current/static/datatype-numeric.html


File: psycopg.info,  Node: Strings adaptation,  Next: Binary adaptation,  Prev: Numbers adaptation,  Up: Adaptation of Python values to SQL types

2.2.3 Strings adaptation
------------------------

Python str(1) and ‘unicode’ are converted into the SQL string syntax.
‘unicode’ objects (‘str’ in Python 3) are encoded in the connection
*note encoding: 48. before sending to the backend: trying to send a
character not supported by the encoding will result in an error.  Data
is usually received as ‘str’ (`i.e.'  it is `decoded' on Python 3, left
`encoded' on Python 2).  However it is possible to receive ‘unicode’ on
Python 2 too: see *note Unicode handling: 49.

* Menu:

* Unicode handling::

   ---------- Footnotes ----------

   (1) https://docs.python.org/3/library/stdtypes.html#str


File: psycopg.info,  Node: Unicode handling,  Up: Strings adaptation

2.2.3.1 Unicode handling
........................

Psycopg can exchange Unicode data with a PostgreSQL database.  Python
‘unicode’ objects are automatically `encoded' in the client encoding
defined on the database connection (the PostgreSQL encoding(1),
available in *note connection.encoding: 48, is translated into a Python
encoding(2) using the *note encodings: 4b. mapping):

     >>> print u, type(u)
     àèìòù€ <type 'unicode'>

     >>> cur.execute("INSERT INTO test (num, data) VALUES (%s,%s);", (74, u))

When reading data from the database, in Python 2 the strings returned
are usually 8 bit ‘str’ objects encoded in the database client encoding:

     >>> print conn.encoding
     UTF8

     >>> cur.execute("SELECT data FROM test WHERE num = 74")
     >>> x = cur.fetchone()[0]
     >>> print x, type(x), repr(x)
     àèìòù€ <type 'str'> '\xc3\xa0\xc3\xa8\xc3\xac\xc3\xb2\xc3\xb9\xe2\x82\xac'

     >>> conn.set_client_encoding('LATIN9')

     >>> cur.execute("SELECT data FROM test WHERE num = 74")
     >>> x = cur.fetchone()[0]
     >>> print type(x), repr(x)
     <type 'str'> '\xe0\xe8\xec\xf2\xf9\xa4'

In Python 3 instead the strings are automatically `decoded' in the
connection *note encoding: 48, as the ‘str’ object can represent Unicode
characters.  In Python 2 you must register a *note typecaster: 40. in
order to receive ‘unicode’ objects:

     >>> psycopg2.extensions.register_type(psycopg2.extensions.UNICODE, cur)

     >>> cur.execute("SELECT data FROM test WHERE num = 74")
     >>> x = cur.fetchone()[0]
     >>> print x, type(x), repr(x)
     àèìòù€ <type 'unicode'> u'\xe0\xe8\xec\xf2\xf9\u20ac'

In the above example, the *note UNICODE: 4c. typecaster is registered
only on the cursor.  It is also possible to register typecasters on the
connection or globally: see the function *note register_type(): 4d. and
*note Type casting of SQL types into Python objects: 40. for details.

     Note: In Python 2, if you want to uniformly receive all your
     database input in Unicode, you can register the related typecasters
     globally as soon as Psycopg is imported:

          import psycopg2.extensions
          psycopg2.extensions.register_type(psycopg2.extensions.UNICODE)
          psycopg2.extensions.register_type(psycopg2.extensions.UNICODEARRAY)

     and forget about this story.

     Note: In some cases, on Python 3, you may want to receive ‘bytes’
     instead of ‘str’, without undergoing to any decoding.  This is
     especially the case if the data in the database is in mixed
     encoding.  The *note BYTES: 4e. caster is what you neeed:

          import psycopg2.extensions
          psycopg2.extensions.register_type(psycopg2.extensions.BYTES, conn)
          psycopg2.extensions.register_type(psycopg2.extensions.BYTESARRAY, conn)
          cur = conn.cursor()
          cur.execute("select %s::text", (u"€",))
          cur.fetchone()[0]
          b'\xe2\x82\xac'

   ---------- Footnotes ----------

   (1) https://www.postgresql.org/docs/current/static/multibyte.html

   (2) https://docs.python.org/library/codecs.html


File: psycopg.info,  Node: Binary adaptation,  Next: Date/Time objects adaptation,  Prev: Strings adaptation,  Up: Adaptation of Python values to SQL types

2.2.4 Binary adaptation
-----------------------

Python types representing binary objects are converted into PostgreSQL
binary string syntax, suitable for ‘bytea’ fields.  Such types are
‘buffer’ (only available in Python 2), memoryview(1), bytearray(2), and
bytes(3) (only in Python 3: the name is available in Python 2 but it’s
only an alias for the type ‘str’).  Any object implementing the Revised
Buffer Protocol(4) should be usable as binary type.  Received data is
returned as ‘buffer’ (in Python 2) or ‘memoryview’ (in Python 3).

Changed in version 2.4: only strings were supported before.

Changed in version 2.4.1: can parse the ‘hex’ format from 9.0 servers
without relying on the version of the client library.

     Note: In Python 2, if you have binary data in a ‘str’ object, you
     can pass them to a ‘bytea’ field using the *note psycopg2.Binary:
     51. wrapper:

          mypic = open('picture.png', 'rb').read()
          curs.execute("insert into blobs (file) values (%s)",
              (psycopg2.Binary(mypic),))

     Warning: Since version 9.0 PostgreSQL uses by default a new "hex"
     format(5) to emit ‘bytea’ fields.  Starting from Psycopg 2.4.1 the
     format is correctly supported.  If you use a previous version you
     will need some extra care when receiving bytea from PostgreSQL: you
     must have at least libpq 9.0 installed on the client or
     alternatively you can set the bytea_output(6) configuration
     parameter to ‘escape’, either in the server configuration file or
     in the client session (using a query such as ‘SET bytea_output TO
     escape;’) before receiving binary data.

   ---------- Footnotes ----------

   (1) https://docs.python.org/3/library/stdtypes.html#memoryview

   (2) https://docs.python.org/3/library/stdtypes.html#bytearray

   (3) https://docs.python.org/3/library/stdtypes.html#bytes

   (4) https://www.python.org/dev/peps/pep-3118/

   (5) 
https://www.postgresql.org/docs/current/static/datatype-binary.html

   (6) 
https://www.postgresql.org/docs/current/static/runtime-config-client.html#GUC-BYTEA-OUTPUT


File: psycopg.info,  Node: Date/Time objects adaptation,  Next: Lists adaptation,  Prev: Binary adaptation,  Up: Adaptation of Python values to SQL types

2.2.5 Date/Time objects adaptation
----------------------------------

Python builtin datetime(1), date(2), time(3), timedelta(4) are converted
into PostgreSQL’s ‘timestamp[tz]’, ‘date’, ‘time[tz]’, ‘interval’ data
types.  Time zones are supported too.  The Egenix mx.DateTime(5) objects
are adapted the same way:

     >>> dt = datetime.datetime.now()
     >>> dt
     datetime.datetime(2010, 2, 8, 1, 40, 27, 425337)

     >>> cur.mogrify("SELECT %s, %s, %s;", (dt, dt.date(), dt.time()))
     "SELECT '2010-02-08T01:40:27.425337', '2010-02-08', '01:40:27.425337';"

     >>> cur.mogrify("SELECT %s;", (dt - datetime.datetime(2010,1,1),))
     "SELECT '38 days 6027.425337 seconds';"

See also
........

PostgreSQL date/time types(6)

* Menu:

* Time zones handling::
* Infinite dates handling::
* Time handling::

   ---------- Footnotes ----------

   (1) https://docs.python.org/3/library/datetime.html#datetime.datetime

   (2) https://docs.python.org/3/library/datetime.html#datetime.date

   (3) https://docs.python.org/3/library/datetime.html#datetime.time

   (4) 
https://docs.python.org/3/library/datetime.html#datetime.timedelta

   (5) https://www.egenix.com/products/python/mxBase/mxDateTime/

   (6) 
https://www.postgresql.org/docs/current/static/datatype-datetime.html


File: psycopg.info,  Node: Time zones handling,  Next: Infinite dates handling,  Up: Date/Time objects adaptation

2.2.5.1 Time zones handling
...........................

The PostgreSQL type ‘timestamp with time zone’ (a.k.a.  ‘timestamptz’)
is converted into Python datetime(1) objects with a tzinfo(2) attribute
set to a ‘FixedOffsetTimezone’ instance.

     >>> cur.execute("SET TIME ZONE 'Europe/Rome';")  # UTC + 1 hour
     >>> cur.execute("SELECT '2010-01-01 10:30:45'::timestamptz;")
     >>> cur.fetchone()[0].tzinfo
     psycopg2.tz.FixedOffsetTimezone(offset=60, name=None)

Note that only time zones with an integer number of minutes are
supported: this is a limitation of the Python datetime(3) module.  A few
historical time zones had seconds in the UTC offset: these time zones
will have the offset rounded to the nearest minute, with an error of up
to 30 seconds.

     >>> cur.execute("SET TIME ZONE 'Asia/Calcutta';")  # offset was +5:53:20
     >>> cur.execute("SELECT '1930-01-01 10:30:45'::timestamptz;")
     >>> cur.fetchone()[0].tzinfo
     psycopg2.tz.FixedOffsetTimezone(offset=353, name=None)

Changed in version 2.2.2: timezones with seconds are supported (with
rounding).  Previously such timezones raised an error.

   ---------- Footnotes ----------

   (1) https://docs.python.org/3/library/datetime.html#datetime.datetime

   (2) 
https://docs.python.org/3/library/datetime.html#datetime.datetime.tzinfo

   (3) https://docs.python.org/3/library/datetime.html#module-datetime


File: psycopg.info,  Node: Infinite dates handling,  Next: Time handling,  Prev: Time zones handling,  Up: Date/Time objects adaptation

2.2.5.2 Infinite dates handling
...............................

PostgreSQL can store the representation of an “infinite” date,
timestamp, or interval.  Infinite dates are not available to Python, so
these objects are mapped to ‘date.max’, ‘datetime.max’, ‘interval.max’.
Unfortunately the mapping cannot be bidirectional so these dates will be
stored back into the database with their values, such as ‘9999-12-31’.

It is possible to create an alternative adapter for dates and other
objects to map ‘date.max’ to ‘infinity’, for instance:

     class InfDateAdapter:
         def __init__(self, wrapped):
             self.wrapped = wrapped
         def getquoted(self):
             if self.wrapped == datetime.date.max:
                 return b"'infinity'::date"
             elif self.wrapped == datetime.date.min:
                 return b"'-infinity'::date"
             else:
                 return psycopg2.extensions.DateFromPy(self.wrapped).getquoted()

     psycopg2.extensions.register_adapter(datetime.date, InfDateAdapter)

Of course it will not be possible to write the value of ‘date.max’ in
the database anymore: ‘infinity’ will be stored instead.


File: psycopg.info,  Node: Time handling,  Prev: Infinite dates handling,  Up: Date/Time objects adaptation

2.2.5.3 Time handling
.....................

The PostgreSQL ‘time’ and Python time(1) types are not fully
bidirectional.

Within PostgreSQL, the ‘time’ type’s maximum value of ‘24:00:00’ is
treated as 24-hours later than the minimum value of ‘00:00:00’.

     >>> cur.execute("SELECT '24:00:00'::time - '00:00:00'::time")
     >>> cur.fetchone()[0]
     datetime.timedelta(days=1)

However, Python’s ‘time’ only supports times until ‘23:59:59’.
Retrieving a value of ‘24:00:00’ results in a ‘time’ of ‘00:00:00’.

     >>> cur.execute("SELECT '24:00:00'::time, '00:00:00'::time")
     >>> cur.fetchone()
     (datetime.time(0, 0), datetime.time(0, 0))

   ---------- Footnotes ----------

   (1) https://docs.python.org/3/library/datetime.html#datetime.time


File: psycopg.info,  Node: Lists adaptation,  Next: Tuples adaptation,  Prev: Date/Time objects adaptation,  Up: Adaptation of Python values to SQL types

2.2.6 Lists adaptation
----------------------

Python lists are converted into PostgreSQL ‘ARRAY’s:

     >>> cur.mogrify("SELECT %s;", ([10, 20, 30], ))
     'SELECT ARRAY[10,20,30];'

     Note: You can use a Python list as the argument of the ‘IN’
     operator using the PostgreSQL ANY operator(1).

          ids = [10, 20, 30]
          cur.execute("SELECT * FROM data WHERE id = ANY(%s);", (ids,))

     Furthermore ‘ANY’ can also work with empty lists, whereas ‘IN ()’
     is a SQL syntax error.

     Note: Reading back from PostgreSQL, arrays are converted to lists
     of Python objects as expected, but only if the items are of a known
     type.  Arrays of unknown types are returned as represented by the
     database (e.g.  ‘{a,b,c}’).  If you want to convert the items into
     Python objects you can easily create a typecaster for *note array
     of unknown types: 5c.

   ---------- Footnotes ----------

   (1) 
https://www.postgresql.org/docs/current/static/functions-subquery.html#FUNCTIONS-SUBQUERY-ANY-SOME


File: psycopg.info,  Node: Tuples adaptation,  Prev: Lists adaptation,  Up: Adaptation of Python values to SQL types

2.2.7 Tuples adaptation
-----------------------

Python tuples are converted into a syntax suitable for the SQL ‘IN’
operator and to represent a composite type:

     >>> cur.mogrify("SELECT %s IN %s;", (10, (10, 20, 30)))
     'SELECT 10 IN (10, 20, 30);'

     Note: SQL doesn’t allow an empty list in the ‘IN’ operator, so your
     code should guard against empty tuples.  Alternatively you can
     *note use a Python list: 5a.

If you want PostgreSQL composite types to be converted into a Python
tuple/namedtuple you can use the ‘register_composite()’ function.

New in version 2.0.6: the tuple ‘IN’ adaptation.

Changed in version 2.0.14: the tuple ‘IN’ adapter is always active.  In
previous releases it was necessary to import the *note extensions: 3.
module to have it registered.

Changed in version 2.3: namedtuple(1) instances are adapted like regular
tuples and can thus be used to represent composite types.

   ---------- Footnotes ----------

   (1) 
https://docs.python.org/3/library/collections.html#collections.namedtuple


File: psycopg.info,  Node: Transactions control,  Next: Server side cursors,  Prev: Adaptation of Python values to SQL types,  Up: Basic module usage

2.3 Transactions control
========================

In Psycopg transactions are handled by the *note connection: 2c. class.
By default, the first time a command is sent to the database (using one
of the *note cursor: 2d.s created by the connection), a new transaction
is created.  The following database commands will be executed in the
context of the same transaction – not only the commands issued by the
first cursor, but the ones issued by all the cursors created by the same
connection.  Should any command fail, the transaction will be aborted
and no further command will be executed until a call to the *note
rollback(): 30. method.

The connection is responsible for terminating its transaction, calling
either the *note commit(): 2f. or *note rollback(): 30. method.
Committed changes are immediately made persistent in the database.  If
the connection is closed (using the *note close(): 61. method) or
destroyed (using ‘del’ or by letting it fall out of scope) while a
transaction is in progress, the server will discard the transaction.
However doing so is not advisable: middleware such as PgBouncer(1) may
see the connection closed uncleanly and dispose of it.

It is possible to set the connection in `autocommit' mode: this way all
the commands executed will be immediately committed and no rollback is
possible.  A few commands (e.g.  ‘CREATE DATABASE’, ‘VACUUM’, ‘CALL’ on
stored procedures(2) using transaction control…) require to be run
outside any transaction: in order to be able to run these commands from
Psycopg, the connection must be in autocommit mode: you can use the
*note autocommit: 62. property.

     Warning: By default even a simple ‘SELECT’ will start a
     transaction: in long-running programs, if no further action is
     taken, the session will remain “idle in transaction”, an
     undesirable condition for several reasons (locks are held by the
     session, tables bloat…).  For long lived scripts, either make sure
     to terminate a transaction as soon as possible or use an autocommit
     connection.

A few other transaction properties can be set session-wide by the
‘connection’: for instance it is possible to have read-only transactions
or change the isolation level.  See the *note set_session(): 63. method
for all the details.

* Menu:

* with statement::

   ---------- Footnotes ----------

   (1) http://www.pgbouncer.org/

   (2) https://www.postgresql.org/docs/current/xproc.html


File: psycopg.info,  Node: with statement,  Up: Transactions control

2.3.1 ‘with’ statement
----------------------

Starting from version 2.5, psycopg2’s connections and cursors are
`context managers' and can be used with the ‘with’ statement:

     with psycopg2.connect(DSN) as conn:
         with conn.cursor() as curs:
             curs.execute(SQL)

When a connection exits the ‘with’ block, if no exception has been
raised by the block, the transaction is committed.  In case of exception
the transaction is rolled back.

When a cursor exits the ‘with’ block it is closed, releasing any
resource eventually associated with it.  The state of the transaction is
not affected.

A connection can be used in more than a ‘with’ statement and each ‘with’
block is effectively wrapped in a separate transaction:

     conn = psycopg2.connect(DSN)

     with conn:
         with conn.cursor() as curs:
             curs.execute(SQL1)

     with conn:
         with conn.cursor() as curs:
             curs.execute(SQL2)

     conn.close()

     Warning: Unlike file objects or other resources, exiting the
     connection’s ‘with’ block `doesn’t close the connection', but only
     the transaction associated to it.  If you want to make sure the
     connection is closed after a certain point, you should still use a
     try-catch block:

          conn = psycopg2.connect(DSN)
          try:
              # connection usage
          finally:
              conn.close()


File: psycopg.info,  Node: Server side cursors,  Next: Thread and process safety,  Prev: Transactions control,  Up: Basic module usage

2.4 Server side cursors
=======================

When a database query is executed, the Psycopg *note cursor: 2d. usually
fetches all the records returned by the backend, transferring them to
the client process.  If the query returned an huge amount of data, a
proportionally large amount of memory will be allocated by the client.

If the dataset is too large to be practically handled on the client
side, it is possible to create a `server side' cursor.  Using this kind
of cursor it is possible to transfer to the client only a controlled
amount of data, so that a large dataset can be examined without keeping
it entirely in memory.

Server side cursor are created in PostgreSQL using the DECLARE(1)
command and subsequently handled using ‘MOVE’, ‘FETCH’ and ‘CLOSE’
commands.

Psycopg wraps the database server side cursor in `named cursors'.  A
named cursor is created using the *note cursor(): 2e. method specifying
the `name' parameter.  Such cursor will behave mostly like a regular
cursor, allowing the user to move in the dataset using the *note
scroll(): 66. method and to read the data using *note fetchone(): 34.
and *note fetchmany(): 35. methods.  Normally you can only scroll
forward in a cursor: if you need to scroll backwards you should declare
your cursor *note scrollable: 67.

Named cursors are also *note iterable: 33. like regular cursors.  Note
however that before Psycopg 2.4 iteration was performed fetching one
record at time from the backend, resulting in a large overhead.  The
attribute *note itersize: 68. now controls how many records are fetched
at time during the iteration: the default value of 2000 allows to fetch
about 100KB per roundtrip assuming records of 10-20 columns of mixed
number and strings; you may decrease this value if you are dealing with
huge records.

Named cursors are usually created ‘WITHOUT HOLD’, meaning they live only
as long as the current transaction.  Trying to fetch from a named cursor
after a *note commit(): 2f. or to create a named cursor when the
connection is in *note autocommit: 62. mode will result in an exception.
It is possible to create a ‘WITH HOLD’ cursor by specifying a ‘True’
value for the ‘withhold’ parameter to *note cursor(): 2e. or by setting
the *note withhold: 69. attribute to ‘True’ before calling *note
execute(): 31. on the cursor.  It is extremely important to always *note
close(): 6a. such cursors, otherwise they will continue to hold
server-side resources until the connection will be eventually closed.
Also note that while ‘WITH HOLD’ cursors lifetime extends well after
*note commit(): 2f, calling *note rollback(): 30. will automatically
close the cursor.

     Note: It is also possible to use a named cursor to consume a cursor
     created in some other way than using the ‘DECLARE’ executed by
     *note execute(): 31.  For example, you may have a PL/pgSQL function
     returning a cursor:

          CREATE FUNCTION reffunc(refcursor) RETURNS refcursor AS $$
          BEGIN
              OPEN $1 FOR SELECT col FROM test;
              RETURN $1;
          END;
          $$ LANGUAGE plpgsql;

     You can read the cursor content by calling the function with a
     regular, non-named, Psycopg cursor:

          cur1 = conn.cursor()
          cur1.callproc('reffunc', ['curname'])

     and then use a named cursor in the same transaction to “steal the
     cursor”:

          cur2 = conn.cursor('curname')
          for record in cur2:     # or cur2.fetchone, fetchmany...
              # do something with record
              pass

   ---------- Footnotes ----------

   (1) https://www.postgresql.org/docs/current/static/sql-declare.html


File: psycopg.info,  Node: Thread and process safety,  Next: Using COPY TO and COPY FROM,  Prev: Server side cursors,  Up: Basic module usage

2.5 Thread and process safety
=============================

The Psycopg module and the *note connection: 2c. objects are
`thread-safe': many threads can access the same database either using
separate sessions and creating a ‘connection’ per thread or using the
same connection and creating separate *note cursor: 2d.s.  In DB API
2.0(1) parlance, Psycopg is `level 2 thread safe'.

The difference between the above two approaches is that, using different
connections, the commands will be executed in different sessions and
will be served by different server processes.  On the other hand, using
many cursors on the same connection, all the commands will be executed
in the same session (and in the same transaction if the connection is
not in *note autocommit: 60. mode), but they will be serialized.

The above observations are only valid for regular threads: they don’t
apply to forked processes nor to green threads.  ‘libpq’ connections
shouldn’t be used by a forked processes(2), so when using a module such
as multiprocessing(3) or a forking web deploy method such as FastCGI
make sure to create the connections `after' the fork.

Connections shouldn’t be shared either by different green threads: see
*note Support for coroutine libraries: 6d. for further details.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0249/

   (2) 
https://www.postgresql.org/docs/current/static/libpq-connect.html#LIBPQ-CONNECT

   (3) 
https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing


File: psycopg.info,  Node: Using COPY TO and COPY FROM,  Next: Access to PostgreSQL large objects,  Prev: Thread and process safety,  Up: Basic module usage

2.6 Using COPY TO and COPY FROM
===============================

Psycopg *note cursor: 2d. objects provide an interface to the efficient
PostgreSQL *note COPY: c. command to move data from files to tables and
back.

Currently no adaptation is provided between Python and PostgreSQL types
on ‘COPY’: the file can be any Python file-like object but its format
must be in the format accepted by PostgreSQL COPY command(1) (data
format, escaped characters, etc).  The methods exposed are:

*note copy_from(): 70.

     Reads data `from' a file-like object appending them to a database
     table (‘COPY table FROM file’ syntax).  The source file must
     provide both ‘read()’ and ‘readline()’ method.

*note copy_to(): 71.

     Writes the content of a table `to' a file-like object (‘COPY table
     TO file’ syntax).  The target file must have a ‘write()’ method.

*note copy_expert(): 72.

     Allows to handle more specific cases and to use all the ‘COPY’
     features available in PostgreSQL.

Please refer to the documentation of the single methods for details and
examples.

   ---------- Footnotes ----------

   (1) https://www.postgresql.org/docs/current/static/sql-copy.html


File: psycopg.info,  Node: Access to PostgreSQL large objects,  Next: Two-Phase Commit protocol support,  Prev: Using COPY TO and COPY FROM,  Up: Basic module usage

2.7 Access to PostgreSQL large objects
======================================

PostgreSQL offers support for large objects(1), which provide
stream-style access to user data that is stored in a special
large-object structure.  They are useful with data values too large to
be manipulated conveniently as a whole.

Psycopg allows access to the large object using the *note lobject: 75.
class.  Objects are generated using the *note connection.lobject(): 76.
factory method.  Data can be retrieved either as bytes or as Unicode
strings.

Psycopg large object support efficient import/export with file system
files using the lo_import()(2) and lo_export()(3) libpq functions.

Changed in version 2.6: added support for large objects greater than
2GB. Note that the support is enabled only if all the following
conditions are verified:

   - the Python build is 64 bits;

   - the extension was built against at least libpq 9.3;

   - the server version is at least PostgreSQL 9.3 (*note
     server_version: 77. must be >= ‘90300’).

If Psycopg was built with 64 bits large objects support (i.e.  the first
two contidions above are verified), the ‘psycopg2.__version__’ constant
will contain the ‘lo64’ flag.  If any of the contition is not met
several ‘lobject’ methods will fail if the arguments exceed 2GB.

   ---------- Footnotes ----------

   (1) https://www.postgresql.org/docs/current/static/largeobjects.html

   (2) 
https://www.postgresql.org/docs/current/static/lo-interfaces.html#LO-IMPORT

   (3) 
https://www.postgresql.org/docs/current/static/lo-interfaces.html#LO-EXPORT


File: psycopg.info,  Node: Two-Phase Commit protocol support,  Prev: Access to PostgreSQL large objects,  Up: Basic module usage

2.8 Two-Phase Commit protocol support
=====================================

New in version 2.3.

Psycopg exposes the two-phase commit features available since PostgreSQL
8.1 implementing the `two-phase commit extensions' proposed by the DB
API 2.0.

The DB API 2.0 model of two-phase commit is inspired by the XA
specification(1), according to which transaction IDs are formed from
three components:

   - a format ID (non-negative 32 bit integer)

   - a global transaction ID (string not longer than 64 bytes)

   - a branch qualifier (string not longer than 64 bytes)

For a particular global transaction, the first two components will be
the same for all the resources.  Every resource will be assigned a
different branch qualifier.

According to the DB API 2.0 specification, a transaction ID is created
using the *note connection.xid(): 7a. method.  Once you have a
transaction id, a distributed transaction can be started with *note
connection.tpc_begin(): 7b, prepared using *note tpc_prepare(): 7c. and
completed using *note tpc_commit(): 7d. or *note tpc_rollback(): 7e.
Transaction IDs can also be retrieved from the database using *note
tpc_recover(): 7f. and completed using the above ‘tpc_commit()’ and
‘tpc_rollback()’.

PostgreSQL doesn’t follow the XA standard though, and the ID for a
PostgreSQL prepared transaction can be any string up to 200 characters
long.  Psycopg’s ‘Xid’ objects can represent both XA-style transactions
IDs (such as the ones created by the ‘xid()’ method) and PostgreSQL
transaction IDs identified by an unparsed string.

The format in which the Xids are converted into strings passed to the
database is the same employed by the PostgreSQL JDBC driver(2): this
should allow interoperation between tools written in Python and in Java.
For example a recovery tool written in Python would be able to recognize
the components of transactions produced by a Java program.

For further details see the documentation for the above methods.

   ---------- Footnotes ----------

   (1) https://publications.opengroup.org/c193

   (2) https://jdbc.postgresql.org/


File: psycopg.info,  Node: The psycopg2 module content,  Next: The connection class,  Prev: Basic module usage,  Up: Top

3 The ‘psycopg2’ module content
*******************************

The module interface respects the standard defined in the DB API 2.0(1).

 -- Function: psycopg2.connect (dsn=None, connection_factory=None,
          cursor_factory=None, async=False, **kwargs)

     Create a new database session and return a new *note connection:
     2c. object.

     The connection parameters can be specified as a libpq connection
     string(2) using the `dsn' parameter:

          conn = psycopg2.connect("dbname=test user=postgres password=secret")

     or using a set of keyword arguments:

          conn = psycopg2.connect(dbname="test", user="postgres", password="secret")

     or using a mix of both: if the same parameter name is specified in
     both sources, the `kwargs' value will have precedence over the
     `dsn' value.  Note that either the `dsn' or at least one
     connection-related keyword argument is required.

     The basic connection parameters are:

        - ‘dbname’ – the database name (‘database’ is a deprecated
          alias)

        - ‘user’ – user name used to authenticate

        - ‘password’ – password used to authenticate

        - ‘host’ – database host address (defaults to UNIX socket if not
          provided)

        - ‘port’ – connection port number (defaults to 5432 if not
          provided)

     Any other connection parameter supported by the client
     library/server can be passed either in the connection string or as
     a keyword.  The PostgreSQL documentation contains the complete list
     of the supported parameters(3).  Also note that the same parameters
     can be passed to the client library using environment variables(4).
     Using the `connection_factory' parameter a different class or
     connections factory can be specified.  It should be a callable
     object taking a `dsn' string argument.  See *note Connection and
     cursor factories: 86. for details.  If a `cursor_factory' is
     specified, the connection’s *note cursor_factory: 87. is set to it.
     If you only need customized cursors you can use this parameter
     instead of subclassing a connection.

     Using `async'=‘True’ an asynchronous connection will be created:
     see *note Asynchronous support: a. to know about advantages and
     limitations.  `async_' is a valid alias for the Python version
     where ‘async’ is a keyword.

     Changed in version 2.4.3: any keyword argument is passed to the
     connection.  Previously only the basic parameters (plus ‘sslmode’)
     were supported as keywords.

     Changed in version 2.5: added the `cursor_factory' parameter.

     Changed in version 2.7: both `dsn' and keyword arguments can be
     specified.

     Changed in version 2.7: added `async_' alias.

     See also
     ........

        - *note parse_dsn: 88.

        - libpq connection string syntax(5)

        - libpq supported connection parameters(6)

        - libpq supported environment variables(7)

     The non-connection-related keyword parameters are Psycopg
     extensions to the DB API 2.0(8).

 -- Data: psycopg2.apilevel

     String constant stating the supported DB API level.  For *note
     psycopg2: 0. is ‘2.0’.

 -- Data: psycopg2.threadsafety

     Integer constant stating the level of thread safety the interface
     supports.  For *note psycopg2: 0. is ‘2’, i.e.  threads can share
     the module and the connection.  See *note Thread and process
     safety: 6c. for details.

 -- Data: psycopg2.paramstyle

     String constant stating the type of parameter marker formatting
     expected by the interface.  For *note psycopg2: 0. is ‘pyformat’.
     See also *note Passing parameters to SQL queries: 38.

 -- Data: psycopg2.__libpq_version__

     Integer constant reporting the version of the ‘libpq’ library this
     ‘psycopg2’ module was compiled with (in the same format of
     ‘server_version’).  If this value is greater or equal than ‘90100’
     then you may query the version of the actually loaded library using
     the *note libpq_version(): 8d. function.

* Menu:

* Exceptions::
* Type Objects and Constructors::

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0249/

   (2) 
https://www.postgresql.org/docs/current/static/libpq-connect.html#LIBPQ-CONNSTRING

   (3) 
https://www.postgresql.org/docs/current/static/libpq-connect.html#LIBPQ-PARAMKEYWORDS

   (4) https://www.postgresql.org/docs/current/static/libpq-envars.html

   (5) 
https://www.postgresql.org/docs/current/static/libpq-connect.html#LIBPQ-CONNSTRING

   (6) 
https://www.postgresql.org/docs/current/static/libpq-connect.html#LIBPQ-PARAMKEYWORDS

   (7) https://www.postgresql.org/docs/current/static/libpq-envars.html

   (8) https://www.python.org/dev/peps/pep-0249/


File: psycopg.info,  Node: Exceptions,  Next: Type Objects and Constructors,  Up: The psycopg2 module content

3.1 Exceptions
==============

In compliance with the DB API 2.0(1), the module makes informations
about errors available through the following exceptions:

 -- Exception: psycopg2.Warning

     Exception raised for important warnings like data truncations while
     inserting, etc.  It is a subclass of the Python ‘StandardError’
     (Exception(2) on Python 3).

 -- Exception: psycopg2.Error

     Exception that is the base class of all other error exceptions.
     You can use this to catch all errors with one single ‘except’
     statement.  Warnings are not considered errors and thus not use
     this class as base.  It is a subclass of the Python ‘StandardError’
     (Exception(3) on Python 3).

      -- Attribute: pgerror

          String representing the error message returned by the backend,
          ‘None’ if not available.

      -- Attribute: pgcode

          String representing the error code returned by the backend,
          ‘None’ if not available.  The *note errorcodes: 1. module
          contains symbolic constants representing PostgreSQL error
          codes.

          >>> try:
          ...     cur.execute("SELECT * FROM barf")
          ... except psycopg2.Error as e:
          ...     pass

          >>> e.pgcode
          '42P01'
          >>> print e.pgerror
          ERROR:  relation "barf" does not exist
          LINE 1: SELECT * FROM barf
                                ^

      -- Attribute: cursor

          The cursor the exception was raised from; None(4) if not
          applicable.

      -- Attribute: diag

          A ‘Diagnostics’ object containing further information about
          the error.

               >>> try:
               ...     cur.execute("SELECT * FROM barf")
               ... except psycopg2.Error, e:
               ...     pass

               >>> e.diag.severity
               'ERROR'
               >>> e.diag.message_primary
               'relation "barf" does not exist'

          New in version 2.5.

     The *note pgerror: 92, *note pgcode: 93, *note cursor: 94, and
     *note diag: 95. attributes are Psycopg extensions.

 -- Exception: psycopg2.InterfaceError

     Exception raised for errors that are related to the database
     interface rather than the database itself.  It is a subclass of
     *note Error: 91.

 -- Exception: psycopg2.DatabaseError

     Exception raised for errors that are related to the database.  It
     is a subclass of *note Error: 91.

 -- Exception: psycopg2.DataError

     Exception raised for errors that are due to problems with the
     processed data like division by zero, numeric value out of range,
     etc.  It is a subclass of *note DatabaseError: 97.

 -- Exception: psycopg2.OperationalError

     Exception raised for errors that are related to the database’s
     operation and not necessarily under the control of the programmer,
     e.g.  an unexpected disconnect occurs, the data source name is not
     found, a transaction could not be processed, a memory allocation
     error occurred during processing, etc.  It is a subclass of *note
     DatabaseError: 97.

 -- Exception: psycopg2.IntegrityError

     Exception raised when the relational integrity of the database is
     affected, e.g.  a foreign key check fails.  It is a subclass of
     *note DatabaseError: 97.

 -- Exception: psycopg2.InternalError

     Exception raised when the database encounters an internal error,
     e.g.  the cursor is not valid anymore, the transaction is out of
     sync, etc.  It is a subclass of *note DatabaseError: 97.

 -- Exception: psycopg2.ProgrammingError

     Exception raised for programming errors, e.g.  table not found or
     already exists, syntax error in the SQL statement, wrong number of
     parameters specified, etc.  It is a subclass of *note
     DatabaseError: 97.

 -- Exception: psycopg2.NotSupportedError

     Exception raised in case a method or database API was used which is
     not supported by the database, e.g.  requesting a ‘rollback()’ on a
     connection that does not support transaction or has transactions
     turned off.  It is a subclass of *note DatabaseError: 97.

Psycopg actually raises a different exception for each ‘SQLSTATE’ error
returned by the database: the classes are available in the *note
psycopg2.errors: 2. module.  Every exception class is a subclass of one
of the exception classes defined here though, so they don’t need to be
trapped specifically: trapping ‘Error’ or ‘DatabaseError’ is usually
what needed to write a generic error handler; trapping a specific error
such as ‘NotNullViolation’ can be useful to write specific exception
handlers.

This is the exception inheritance layout:

     StandardError
     |__ *note Warning: 90.
     |__ *note Error: 91.
         |__ *note InterfaceError: 96.
         |__ *note DatabaseError: 97.
             |__ *note DataError: 98.
             |__ *note OperationalError: 99.
             |__ *note IntegrityError: 9a.
             |__ *note InternalError: 9b.
             |__ *note ProgrammingError: 9c.
             |__ *note NotSupportedError: 9d.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0249/

   (2) https://docs.python.org/3/library/exceptions.html#Exception

   (3) https://docs.python.org/3/library/exceptions.html#Exception

   (4) https://docs.python.org/3/library/constants.html#None


File: psycopg.info,  Node: Type Objects and Constructors,  Prev: Exceptions,  Up: The psycopg2 module content

3.2 Type Objects and Constructors
=================================

     Note: This section is mostly copied verbatim from the DB API 2.0(1)
     specification.  While these objects are exposed in compliance to
     the DB API, Psycopg offers very accurate tools to convert data
     between Python and PostgreSQL formats.  See *note Adapting new
     Python types to SQL syntax: e. and *note Type casting of SQL types
     into Python objects: 40.

Many databases need to have the input in a particular format for binding
to an operation’s input parameters.  For example, if an input is
destined for a DATE column, then it must be bound to the database in a
particular string format.  Similar problems exist for “Row ID” columns
or large binary items (e.g.  blobs or RAW columns).  This presents
problems for Python since the parameters to the .execute*() method are
untyped.  When the database module sees a Python string object, it
doesn’t know if it should be bound as a simple CHAR column, as a raw
BINARY item, or as a DATE.

To overcome this problem, a module must provide the constructors defined
below to create objects that can hold special values.  When passed to
the cursor methods, the module can then detect the proper type of the
input parameter and bind it accordingly.

A Cursor Object’s description attribute returns information about each
of the result columns of a query.  The type_code must compare equal to
one of Type Objects defined below.  Type Objects may be equal to more
than one type code (e.g.  DATETIME could be equal to the type codes for
date, time and timestamp columns; see the Implementation Hints below for
details).

The module exports the following constructors and singletons:

 -- Function: psycopg2.Date (year, month, day)

     This function constructs an object holding a date value.

 -- Function: psycopg2.Time (hour, minute, second)

     This function constructs an object holding a time value.

 -- Function: psycopg2.Timestamp (year, month, day, hour, minute,
          second)

     This function constructs an object holding a time stamp value.

 -- Function: psycopg2.DateFromTicks (ticks)

     This function constructs an object holding a date value from the
     given ticks value (number of seconds since the epoch; see the
     documentation of the standard Python time module for details).

 -- Function: psycopg2.TimeFromTicks (ticks)

     This function constructs an object holding a time value from the
     given ticks value (number of seconds since the epoch; see the
     documentation of the standard Python time module for details).

 -- Function: psycopg2.TimestampFromTicks (ticks)

     This function constructs an object holding a time stamp value from
     the given ticks value (number of seconds since the epoch; see the
     documentation of the standard Python time module for details).

 -- Function: psycopg2.Binary (string)

     This function constructs an object capable of holding a binary
     (long) string value.

     Note: All the adapters returned by the module level factories
     (‘Binary’, ‘Date’, ‘Time’, ‘Timestamp’ and the ‘*FromTicks’
     variants) expose the wrapped object (a regular Python object such
     as ‘datetime’) in an ‘adapted’ attribute.

 -- Data: psycopg2.STRING

     This type object is used to describe columns in a database that are
     string-based (e.g.  CHAR).

 -- Data: psycopg2.BINARY

     This type object is used to describe (long) binary columns in a
     database (e.g.  LONG, RAW, BLOBs).

 -- Data: psycopg2.NUMBER

     This type object is used to describe numeric columns in a database.

 -- Data: psycopg2.DATETIME

     This type object is used to describe date/time columns in a
     database.

 -- Data: psycopg2.ROWID

     This type object is used to describe the “Row ID” column in a
     database.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0249/


File: psycopg.info,  Node: The connection class,  Next: The cursor class,  Prev: The psycopg2 module content,  Up: Top

4 The ‘connection’ class
************************

 -- Class: connection

     Handles the connection to a PostgreSQL database instance.  It
     encapsulates a database session.

     Connections are created using the factory function *note connect():
     2b.

     Connections are thread safe and can be shared among many threads.
     See *note Thread and process safety: 6c. for details.

     Connections can be used as context managers.  Note that a context
     wraps a transaction: if the context exits with success the
     transaction is committed, if it exits with an exception the
     transaction is rolled back.  Note that the connection is not closed
     by the context and it can be used for several contexts.

          conn = psycopg2.connect(DSN)

          with conn:
              with conn.cursor() as curs:
                  curs.execute(SQL1)

          with conn:
              with conn.cursor() as curs:
                  curs.execute(SQL2)

          # leaving contexts doesn't close the connection
          conn.close()

      -- Method: cursor (name=None, cursor_factory=None,
               scrollable=None, withhold=False)

          Return a new *note cursor: 2d. object using the connection.

          If `name' is specified, the returned cursor will be a *note
          server side cursor: 9. (also known as `named cursor').
          Otherwise it will be a regular `client side' cursor.  By
          default a named cursor is declared without ‘SCROLL’ option and
          ‘WITHOUT HOLD’: set the argument or property *note scrollable:
          67. to ‘True’/‘False’ and or *note withhold: 69. to ‘True’ to
          change the declaration.

          The name can be a string not valid as a PostgreSQL identifier:
          for example it may start with a digit and contain
          non-alphanumeric characters and quotes.

          Changed in version 2.4: previously only valid PostgreSQL
          identifiers were accepted as cursor name.

          The `cursor_factory' argument can be used to create
          non-standard cursors.  The class returned must be a subclass
          of *note psycopg2.extensions.cursor: ae.  See *note Connection
          and cursor factories: af. for details.  A default factory for
          the connection can also be specified using the *note
          cursor_factory: 87. attribute.

          Changed in version 2.4.3: added the `withhold' argument.

          Changed in version 2.5: added the `scrollable' argument.

          All the function arguments are Psycopg extensions to the DB
          API 2.0.

      -- Method: commit ()

          Commit any pending transaction to the database.

          By default, Psycopg opens a transaction before executing the
          first command: if ‘commit()’ is not called, the effect of any
          data manipulation will be lost.

          The connection can be also set in “autocommit” mode: no
          transaction is automatically open, commands have immediate
          effect.  See *note Transactions control: 60. for details.

          Changed in version 2.5: if the connection is used in a ‘with’
          statement, the method is automatically called if no exception
          is raised in the ‘with’ block.

      -- Method: rollback ()

          Roll back to the start of any pending transaction.  Closing a
          connection without committing the changes first will cause an
          implicit rollback to be performed.

          Changed in version 2.5: if the connection is used in a ‘with’
          statement, the method is automatically called if an exception
          is raised in the ‘with’ block.

      -- Method: close ()

          Close the connection now (rather than whenever ‘del’ is
          executed).  The connection will be unusable from this point
          forward; an *note InterfaceError: 96. will be raised if any
          operation is attempted with the connection.  The same applies
          to all cursor objects trying to use the connection.  Note that
          closing a connection without committing the changes first will
          cause any pending change to be discarded as if a ‘ROLLBACK’
          was performed (unless a different isolation level has been
          selected: see *note set_isolation_level(): b0.).

          Changed in version 2.2: previously an explicit ‘ROLLBACK’ was
          issued by Psycopg on ‘close()’.  The command could have been
          sent to the backend at an inappropriate time, so Psycopg
          currently relies on the backend to implicitly discard
          uncommitted changes.  Some middleware are known to behave
          incorrectly though when the connection is closed during a
          transaction (when *note status: b1. is *note
          STATUS_IN_TRANSACTION: b2.), e.g.  PgBouncer(1) reports an
          ‘unclean server’ and discards the connection.  To avoid this
          problem you can ensure to terminate the transaction with a
          *note commit(): 2f./*note rollback(): 30. before closing.

     Exceptions as connection class attributes
     -----------------------------------------

     The ‘connection’ also exposes as attributes the same exceptions
     available in the *note psycopg2: 0. module.  See *note Exceptions:
     8e.

     Two-phase commit support methods
     --------------------------------

     New in version 2.3.

     See also
     ........

     *note Two-Phase Commit protocol support: 78. for an introductory
     explanation of these methods.

     Note that PostgreSQL supports two-phase commit since release 8.1:
     these methods raise *note NotSupportedError: 9d. if used with an
     older version server.
      -- Method: xid (format_id, gtrid, bqual)

          Returns a ‘Xid’ instance to be passed to the ‘tpc_*()’ methods
          of this connection.  The argument types and constraints are
          explained in *note Two-Phase Commit protocol support: 78.

          The values passed to the method will be available on the
          returned object as the members ‘format_id’, ‘gtrid’, ‘bqual’.
          The object also allows accessing to these members and
          unpacking as a 3-items tuple.

      -- Method: tpc_begin (xid)

          Begins a TPC transaction with the given transaction ID `xid'.

          This method should be called outside of a transaction (i.e.
          nothing may have executed since the last *note commit(): 2f.
          or *note rollback(): 30. and *note connection.status: b1. is
          *note STATUS_READY: b4.).

          Furthermore, it is an error to call ‘commit()’ or ‘rollback()’
          within the TPC transaction: in this case a *note
          ProgrammingError: 9c. is raised.

          The `xid' may be either an object returned by the *note xid():
          7a. method or a plain string: the latter allows to create a
          transaction using the provided string as PostgreSQL
          transaction id.  See also *note tpc_recover(): 7f.

      -- Method: tpc_prepare ()

          Performs the first phase of a transaction started with *note
          tpc_begin(): 7b.  A *note ProgrammingError: 9c. is raised if
          this method is used outside of a TPC transaction.

          After calling ‘tpc_prepare()’, no statements can be executed
          until *note tpc_commit(): 7d. or *note tpc_rollback(): 7e.
          will be called.  The *note reset(): b5. method can be used to
          restore the status of the connection to *note STATUS_READY:
          b4.: the transaction will remain prepared in the database and
          will be possible to finish it with ‘tpc_commit(xid)’ and
          ‘tpc_rollback(xid)’.

          See also
          ........

          the PREPARE TRANSACTION(2) PostgreSQL command.

      -- Method: tpc_commit ([xid])

          When called with no arguments, ‘tpc_commit()’ commits a TPC
          transaction previously prepared with *note tpc_prepare(): 7c.

          If ‘tpc_commit()’ is called prior to ‘tpc_prepare()’, a single
          phase commit is performed.  A transaction manager may choose
          to do this if only a single resource is participating in the
          global transaction.

          When called with a transaction ID `xid', the database commits
          the given transaction.  If an invalid transaction ID is
          provided, a *note ProgrammingError: 9c. will be raised.  This
          form should be called outside of a transaction, and is
          intended for use in recovery.

          On return, the TPC transaction is ended.

          See also
          ........

          the COMMIT PREPARED(3) PostgreSQL command.

      -- Method: tpc_rollback ([xid])

          When called with no arguments, ‘tpc_rollback()’ rolls back a
          TPC transaction.  It may be called before or after *note
          tpc_prepare(): 7c.

          When called with a transaction ID `xid', it rolls back the
          given transaction.  If an invalid transaction ID is provided,
          a *note ProgrammingError: 9c. is raised.  This form should be
          called outside of a transaction, and is intended for use in
          recovery.

          On return, the TPC transaction is ended.

          See also
          ........

          the ROLLBACK PREPARED(4) PostgreSQL command.

      -- Method: tpc_recover ()

          Returns a list of ‘Xid’ representing pending transactions,
          suitable for use with *note tpc_commit(): 7d. or *note
          tpc_rollback(): 7e.

          If a transaction was not initiated by Psycopg, the returned
          Xids will have attributes ‘format_id’ and ‘bqual’ set to
          ‘None’ and the ‘gtrid’ set to the PostgreSQL transaction ID:
          such Xids are still usable for recovery.  Psycopg uses the
          same algorithm of the PostgreSQL JDBC driver(5) to encode a XA
          triple in a string, so transactions initiated by a program
          using such driver should be unpacked correctly.

          Xids returned by ‘tpc_recover()’ also have extra attributes
          ‘prepared’, ‘owner’, ‘database’ populated with the values read
          from the server.

          See also
          ........

          the pg_prepared_xacts(6) system view.

     The above methods are the only ones defined by the DB API 2.0
     protocol.  The Psycopg connection objects exports the following
     additional methods and attributes.

      -- Attribute: closed

          Read-only integer attribute: 0 if the connection is open,
          nonzero if it is closed or broken.

      -- Method: cancel ()

          Cancel the current database operation.

          The method interrupts the processing of the current operation.
          If no query is being executed, it does nothing.  You can call
          this function from a different thread than the one currently
          executing a database operation, for instance if you want to
          cancel a long running query if a button is pushed in the UI.
          Interrupting query execution will cause the cancelled method
          to raise a *note QueryCanceledError: b8.  Note that the
          termination of the query is not guaranteed to succeed: see the
          documentation for PQcancel()(7).

          New in version 2.3.

      -- Method: reset ()

          Reset the connection to the default.

          The method rolls back an eventual pending transaction and
          executes the PostgreSQL RESET(8) and SET SESSION
          AUTHORIZATION(9) to revert the session to the default values.
          A two-phase commit transaction prepared using *note
          tpc_prepare(): 7c. will remain in the database available for
          recover.

          New in version 2.0.12.

      -- Attribute: dsn

          Read-only string containing the connection string used by the
          connection.

          If a password was specified in the connection string it will
          be obscured.

     Transaction control methods and attributes.
     -------------------------------------------

      -- Method: set_session (isolation_level=None, readonly=None,
               deferrable=None, autocommit=None)

          Set one or more parameters for the next transactions or
          statements in the current session.


          Parameters:

             * ‘isolation_level’ – set the isolation level(10) for the
               next transactions/statements.  The value can be one of
               the literal values ‘READ UNCOMMITTED’, ‘READ COMMITTED’,
               ‘REPEATABLE READ’, ‘SERIALIZABLE’ or the equivalent *note
               constant: ba. defined in the *note extensions: 3. module.

             * ‘readonly’ – if ‘True’, set the connection to read only;
               read/write if ‘False’.

             * ‘deferrable’ – if ‘True’, set the connection to
               deferrable; non deferrable if ‘False’.  Only available
               from PostgreSQL 9.1.

             * ‘autocommit’ – switch the connection to autocommit mode:
               not a PostgreSQL session setting but an alias for setting
               the *note autocommit: 62. attribute.

          Arguments set to ‘None’ (the default for all) will not be
          changed.  The parameters `isolation_level', `readonly' and
          `deferrable' also accept the string ‘DEFAULT’ as a value: the
          effect is to reset the parameter to the server default.
          Defaults are defined by the server configuration: see values
          for default_transaction_isolation(11),
          default_transaction_read_only(12),
          default_transaction_deferrable(13).

          The function must be invoked with no transaction in progress.

          See also
          ........

          SET TRANSACTION(14) for further details about the behaviour of
          the transaction parameters in the server.

          New in version 2.4.2.

          Changed in version 2.7: Before this version, the function
          would have set ‘default_transaction_*’ attribute in the
          current session; this implementation has the problem of not
          playing well with external connection pooling working at
          transaction level and not resetting the state of the session:
          changing the default transaction would pollute the connections
          in the pool and create problems to other applications using
          the same pool.

          Starting from 2.7, if the connection is not autocommit, the
          transaction characteristics are issued together with ‘BEGIN’
          and will leave the ‘default_transaction_*’ settings untouched.
          For example:

               conn.set_session(readonly=True)

          will not change ‘default_transaction_read_only’, but following
          transaction will start with a ‘BEGIN READ ONLY’.  Conversely,
          using:

               conn.set_session(readonly=True, autocommit=True)

          will set ‘default_transaction_read_only’ to ‘on’ and rely on
          the server to apply the read only state to whatever
          transaction, implicit or explicit, is executed in the
          connection.

      -- Attribute: autocommit

          Read/write attribute: if ‘True’, no transaction is handled by
          the driver and every statement sent to the backend has
          immediate effect; if ‘False’ a new transaction is started at
          the first command execution: the methods *note commit(): 2f.
          or *note rollback(): 30. must be manually invoked to terminate
          the transaction.

          The autocommit mode is useful to execute commands requiring to
          be run outside a transaction, such as ‘CREATE DATABASE’ or
          ‘VACUUM’.

          The default is ‘False’ (manual commit) as per DBAPI
          specification.

               Warning: By default, any query execution, including a
               simple ‘SELECT’ will start a transaction: for
               long-running programs, if no further action is taken, the
               session will remain “idle in transaction”, an undesirable
               condition for several reasons (locks are held by the
               session, tables bloat…).  For long lived scripts, either
               ensure to terminate a transaction as soon as possible or
               use an autocommit connection.

          New in version 2.4.2.

      -- Attribute: isolation_level

          Return or set the transaction isolation level(15) for the
          current session.  The value is one of the *note Isolation
          level constants: ba. defined in the *note psycopg2.extensions:
          3. module.  On set it is also possible to use one of the
          literal values ‘READ UNCOMMITTED’, ‘READ COMMITTED’,
          ‘REPEATABLE READ’, ‘SERIALIZABLE’, ‘DEFAULT’.

          Changed in version 2.7: the property is writable.

          Changed in version 2.7: the default value for
          ‘isolation_level’ is *note ISOLATION_LEVEL_DEFAULT: bc.;
          previously the property would have queried the server and
          returned the real value applied.  To know this value you can
          run a query such as ‘show transaction_isolation’.  Usually the
          default value is ‘READ COMMITTED’, but this may be changed in
          the server configuration.

          This value is now entirely separate from the *note autocommit:
          62. property: in previous version, if ‘autocommit’ was set to
          ‘True’ this property would have returned *note
          ISOLATION_LEVEL_AUTOCOMMIT: bd.; it will now return the server
          isolation level.

      -- Attribute: readonly

          Return or set the read-only status for the current session.
          Available values are ‘True’ (new transactions will be in
          read-only mode), ‘False’ (new transactions will be writable),
          ‘None’ (use the default configured for the server by
          ‘default_transaction_read_only’).

          New in version 2.7.

      -- Attribute: deferrable

          Return or set the deferrable status(16) for the current
          session.  Available values are ‘True’ (new transactions will
          be in deferrable mode), ‘False’ (new transactions will be in
          non deferrable mode), ‘None’ (use the default configured for
          the server by ‘default_transaction_deferrable’).

          New in version 2.7.

      -- Method: set_isolation_level (level)

               Note: This is a legacy method mixing ‘isolation_level’
               and ‘autocommit’.  Using the respective properties is a
               better option.

          Set the transaction isolation level(17) for the current
          session.  The level defines the different phenomena that can
          happen in the database between concurrent transactions.

          The value set is an integer: symbolic constants are defined in
          the module *note psycopg2.extensions: 3.: see *note Isolation
          level constants: ba. for the available values.

          The default level is *note ISOLATION_LEVEL_DEFAULT: bc.: at
          this level a transaction is automatically started the first
          time a database command is executed.  If you want an
          `autocommit' mode, switch to *note ISOLATION_LEVEL_AUTOCOMMIT:
          bd. before executing any command:

               >>> conn.set_isolation_level(psycopg2.extensions.ISOLATION_LEVEL_AUTOCOMMIT)

          See also *note Transactions control: 60.

      -- Attribute: encoding

      -- Method: set_client_encoding (enc)

          Read or set the client encoding for the current session.  The
          default is the encoding defined by the database.  It should be
          one of the characters set supported by PostgreSQL(18)

      -- Attribute: notices

          A list containing all the database messages sent to the client
          during the session.

               >>> cur.execute("CREATE TABLE foo (id serial PRIMARY KEY);")
               >>> pprint(conn.notices)
               ['NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "foo_pkey" for table "foo"\n',
                'NOTICE:  CREATE TABLE will create implicit sequence "foo_id_seq" for serial column "foo.id"\n']

          Changed in version 2.7: The ‘notices’ attribute is writable:
          the user may replace it with any Python object exposing an
          ‘append()’ method.  If appending raises an exception the
          notice is silently dropped.

          To avoid a leak in case excessive notices are generated, only
          the last 50 messages are kept.  This check is only in place if
          the ‘notices’ attribute is a list: if any other object is used
          it will be up to the user to guard from leakage.

          You can configure what messages to receive using PostgreSQL
          logging configuration parameters(19) such as ‘log_statement’,
          ‘client_min_messages’, ‘log_min_duration_statement’ etc.

      -- Attribute: notifies

          List of ‘Notify’ objects containing asynchronous notifications
          received by the session.

          For other details see *note Asynchronous notifications: b.

          Changed in version 2.3: Notifications are instances of the
          ‘Notify’ object.  Previously the list was composed by 2 items
          tuples ‘(`pid',`channel')’ and the payload was not accessible.
          To keep backward compatibility, ‘Notify’ objects can still be
          accessed as 2 items tuples.

          Changed in version 2.7: The ‘notifies’ attribute is writable:
          the user may replace it with any Python object exposing an
          ‘append()’ method.  If appending raises an exception the
          notification is silently dropped.

      -- Attribute: cursor_factory

          The default cursor factory used by *note cursor(): 2e. if the
          parameter is not specified.

          New in version 2.5.

      -- Attribute: info

          A ‘ConnectionInfo’ object exposing information about the
          native libpq connection.

          New in version 2.8.

      -- Attribute: status

          A read-only integer representing the status of the connection.
          Symbolic constants for the values are defined in the module
          *note psycopg2.extensions: 3.: see *note Connection status
          constants: c4. for the available values.

          The status is undefined for *note closed: b6. connections.

      -- Method: lobject ([oid[, mode[, new_oid[, new_file[,
               lobject_factory]]]]])

          Return a new database large object as a *note lobject: 75.
          instance.

          See *note Access to PostgreSQL large objects: 74. for an
          overview.


          Parameters:

             * ‘oid’ – The OID of the object to read or write.  0 to
               create a new large object and and have its OID assigned
               automatically.

             * ‘mode’ – Access mode to the object, see below.

             * ‘new_oid’ – Create a new object using the specified OID.
               The function raises *note OperationalError: 99. if the
               OID is already in use.  Default is 0, meaning assign a
               new one automatically.

             * ‘new_file’ – The name of a file to be imported in the
               database (using the lo_import()(20) function)

             * ‘lobject_factory’ – Subclass of *note lobject: 75. to be
               instantiated.

          Available values for `mode' are:

          `mode'      meaning
                      
          ----------------------------------------------------------------------------------------------------------------------------------
                      
          ‘r’         Open for read only
                      
                      
          ‘w’         Open for write only
                      
                      
          ‘rw’        Open for read/write
                      
                      
          ‘n’         Don’t open the file
                      
                      
          ‘b’         Don’t decode read data (return data as ‘str’ in Python 2 or ‘bytes’ in Python 3)
                      
                      
          ‘t’         Decode read data according to *note connection.encoding: 48. (return data as ‘unicode’ in Python 2 or ‘str’ in
                      Python 3)
                      

          ‘b’ and ‘t’ can be specified together with a read/write mode.
          If neither ‘b’ nor ‘t’ is specified, the default is ‘b’ in
          Python 2 and ‘t’ in Python 3.

          New in version 2.0.8.

          Changed in version 2.4: added ‘b’ and ‘t’ mode and unicode
          support.

     Methods related to asynchronous support
     ---------------------------------------

     New in version 2.2.

     See also
     ........

     *note Asynchronous support: a. and *note Support for coroutine
     libraries: 6d.

      -- Attribute: async
      -- Attribute: async_

          Read only attribute: 1 if the connection is asynchronous, 0
          otherwise.

          Changed in version 2.7: added the ‘async_’ alias for Python
          versions where ‘async’ is a keyword.

      -- Method: poll ()

          Used during an asynchronous connection attempt, or when a
          cursor is executing a query on an asynchronous connection,
          make communication proceed if it wouldn’t block.

          Return one of the constants defined in *note Poll constants:
          c8.  If it returns *note POLL_OK: c9. then the connection has
          been established or the query results are available on the
          client.  Otherwise wait until the file descriptor returned by
          *note fileno(): ca. is ready to read or to write, as explained
          in *note Asynchronous support: a.  *note poll(): c7. should be
          also used by the function installed by ‘set_wait_callback()’
          as explained in *note Support for coroutine libraries: 6d.

          *note poll(): c7. is also used to receive asynchronous
          notifications from the database: see *note Asynchronous
          notifications: b. from further details.

      -- Method: fileno ()

          Return the file descriptor underlying the connection: useful
          to read its status during asynchronous communication.

      -- Method: isexecuting ()

          Return ‘True’ if the connection is executing an asynchronous
          operation.

     Interoperation with other C API modules
     ---------------------------------------

      -- Attribute: pgconn_ptr

          Return the internal ‘PGconn*’ as integer.  Useful to pass the
          libpq raw connection structure to C functions, e.g.  via
          ctypes(21):

               >>> import ctypes
               >>> import ctypes.util
               >>> libpq = ctypes.pydll.LoadLibrary(ctypes.util.find_library('pq'))
               >>> libpq.PQserverVersion.argtypes = [ctypes.c_void_p]
               >>> libpq.PQserverVersion.restype = ctypes.c_int
               >>> libpq.PQserverVersion(conn.pgconn_ptr)
               90611

          New in version 2.8.

      -- Method: get_native_connection ()

          Return the internal ‘PGconn*’ wrapped in a PyCapsule object.
          This is only useful for passing the ‘libpq’ raw connection
          associated to this connection object to other C-level modules
          that may have a use for it.

          See also
          ........

          Python C API Capsules(22) docs.

          New in version 2.8.

     informative methods of the native connection
     --------------------------------------------

          Note: These methods are better accessed using the *note info:
          c3. attributes and may be dropped in future versions.

      -- Method: get_transaction_status ()

          Also available as *note info: c3.‘.’‘transaction_status’.

          Return the current session transaction status as an integer.
          Symbolic constants for the values are defined in the module
          *note psycopg2.extensions: 3.: see *note Transaction status
          constants: cf. for the available values.

          See also
          ........

          libpq docs for PQtransactionStatus()(23) for details.

      -- Attribute: protocol_version

          Also available as *note info: c3.‘.’‘protocol_version’.

          A read-only integer representing frontend/backend protocol
          being used.  Currently Psycopg supports only protocol 3, which
          allows connection to PostgreSQL server from version 7.4.
          Psycopg versions previous than 2.3 support both protocols 2
          and 3.

          See also
          ........

          libpq docs for PQprotocolVersion()(24) for details.

          New in version 2.0.12.

      -- Attribute: server_version

          Also available as *note info: c3.‘.’‘server_version’.

          A read-only integer representing the backend version.

          The number is formed by converting the major, minor, and
          revision numbers into two-decimal-digit numbers and appending
          them together.  For example, version 8.1.5 will be returned as
          ‘80105’.

          See also
          ........

          libpq docs for PQserverVersion()(25) for details.

          New in version 2.0.12.

      -- Method: get_backend_pid ()

          Also available as *note info: c3.‘.’‘backend_pid’.

          Returns the process ID (PID) of the backend server process
          `you connected to'.  Note that if you use a connection pool
          service such as PgBouncer(26) this value will not be updated
          if your connection is switched to a different backend.

          Note that the PID belongs to a process executing on the
          database server host, not the local host!

          See also
          ........

          libpq docs for PQbackendPID()(27) for details.

          New in version 2.0.8.

      -- Method: get_parameter_status (parameter)

          Also available as *note info: c3.‘.’‘parameter_status()’.

          Look up a current parameter setting of the server.

          Potential values for ‘parameter’ are: ‘server_version’,
          ‘server_encoding’, ‘client_encoding’, ‘is_superuser’,
          ‘session_authorization’, ‘DateStyle’, ‘TimeZone’,
          ‘integer_datetimes’, and ‘standard_conforming_strings’.

          If server did not report requested parameter, return ‘None’.

          See also
          ........

          libpq docs for PQparameterStatus()(28) for details.

          New in version 2.0.12.

      -- Method: get_dsn_parameters ()

          Also available as *note info: c3.‘.’‘dsn_parameters’.

          Get the effective dsn parameters for the connection as a
          dictionary.

          The `password' parameter is removed from the result.

          Example:

               >>> conn.get_dsn_parameters()
               {'dbname': 'test', 'user': 'postgres', 'port': '5432', 'sslmode': 'prefer'}

          Requires libpq >= 9.3.

          See also
          ........

          libpq docs for PQconninfo()(29) for details.

          New in version 2.7.

   ---------- Footnotes ----------

   (1) http://www.pgbouncer.org/

   (2) 
https://www.postgresql.org/docs/current/static/sql-prepare-transaction.html

   (3) 
https://www.postgresql.org/docs/current/static/sql-commit-prepared.html

   (4) 
https://www.postgresql.org/docs/current/static/sql-rollback-prepared.html

   (5) https://jdbc.postgresql.org/

   (6) 
https://www.postgresql.org/docs/current/static/view-pg-prepared-xacts.html

   (7) 
https://www.postgresql.org/docs/current/static/libpq-cancel.html#LIBPQ-PQCANCEL

   (8) https://www.postgresql.org/docs/current/static/sql-reset.html

   (9) 
https://www.postgresql.org/docs/current/static/sql-set-session-authorization.html

   (10) 
https://www.postgresql.org/docs/current/static/transaction-iso.html

   (11) 
https://www.postgresql.org/docs/current/static/runtime-config-client.html#GUC-DEFAULT-TRANSACTION-ISOLATION

   (12) 
https://www.postgresql.org/docs/current/static/runtime-config-client.html#GUC-DEFAULT-TRANSACTION-READ-ONLY

   (13) 
https://www.postgresql.org/docs/current/static/runtime-config-client.html#GUC-DEFAULT-TRANSACTION-DEFERRABLE

   (14) 
https://www.postgresql.org/docs/current/static/sql-set-transaction.html

   (15) 
https://www.postgresql.org/docs/current/static/transaction-iso.html

   (16) 
https://www.postgresql.org/docs/current/static/sql-set-transaction.html

   (17) 
https://www.postgresql.org/docs/current/static/transaction-iso.html

   (18) https://www.postgresql.org/docs/current/static/multibyte.html

   (19) 
https://www.postgresql.org/docs/current/static/runtime-config-logging.html

   (20) 
https://www.postgresql.org/docs/current/static/lo-interfaces.html#LO-IMPORT

   (21) https://docs.python.org/3/library/ctypes.html#module-ctypes

   (22) https://docs.python.org/3.1/c-api/capsule.html

   (23) 
https://www.postgresql.org/docs/current/static/libpq-status.html#LIBPQ-PQTRANSACTIONSTATUS

   (24) 
https://www.postgresql.org/docs/current/static/libpq-status.html#LIBPQ-PQPROTOCOLVERSION

   (25) 
https://www.postgresql.org/docs/current/static/libpq-status.html#LIBPQ-PQSERVERVERSION

   (26) http://www.pgbouncer.org/

   (27) 
https://www.postgresql.org/docs/current/static/libpq-status.html#LIBPQ-PQBACKENDPID

   (28) 
https://www.postgresql.org/docs/current/static/libpq-status.html#LIBPQ-PQPARAMETERSTATUS

   (29) 
https://www.postgresql.org/docs/current/static/libpq-connect.html#LIBPQ-PQCONNINFO


File: psycopg.info,  Node: The cursor class,  Next: More advanced topics,  Prev: The connection class,  Up: Top

5 The ‘cursor’ class
********************

 -- Class: cursor

     Allows Python code to execute PostgreSQL command in a database
     session.  Cursors are created by the *note connection.cursor(): 2e.
     method: they are bound to the connection for the entire lifetime
     and all the commands are executed in the context of the database
     session wrapped by the connection.

     Cursors created from the same connection are not isolated, i.e.,
     any changes done to the database by a cursor are immediately
     visible by the other cursors.  Cursors created from different
     connections can or can not be isolated, depending on the
     connections’ *note isolation level: 60.  See also *note rollback():
     30. and *note commit(): 2f. methods.

     Cursors are `not' thread safe: a multithread application can create
     many cursors from the same connection and should use each cursor
     from a single thread.  See *note Thread and process safety: 6c. for
     details.

     Cursors can be used as context managers: leaving the context will
     close the cursor.

          with conn.cursor() as curs:
              curs.execute(SQL)

          # the cursor is now closed

      -- Attribute: description

          Read-only attribute describing the result of a query.  It is a
          sequence of *note Column: d8. instances, each one describing
          one result column in order.  The attribute is ‘None’ for
          operations that do not return rows or if the cursor has not
          had an operation invoked via the *note execute*(): d9. methods
          yet.

          For compatibility with the DB-API, every object can be
          unpacked as a 7-items sequence: the attributes retuned this
          way are the following.  For further details and other
          attributes available check the *note Column: d8.
          documentation.

            0. *note name: da.: the name of the column returned.

            1. *note type_code: db.: the PostgreSQL OID of the column.

            2. *note display_size: dc.: the actual length of the column
               in bytes.

            3. *note internal_size: dd.: the size in bytes of the column
               associated to this column on the server.

            4. *note precision: de.: total number of significant digits
               in columns of type ‘NUMERIC’.  ‘None’ for other types.

            5. *note scale: df.: count of decimal digits in the
               fractional part in columns of type ‘NUMERIC’.  ‘None’ for
               other types.

            6. *note null_ok: e0.: always ‘None’ as not easy to retrieve
               from the libpq.

          Changed in version 2.4: if possible, columns descriptions are
          named tuple instead of regular tuples.

          Changed in version 2.8: columns descriptions are instances of
          ‘Column’, exposing extra attributes.

      -- Method: close ()

          Close the cursor now (rather than whenever ‘del’ is executed).
          The cursor will be unusable from this point forward; an *note
          InterfaceError: 96. will be raised if any operation is
          attempted with the cursor.

          Changed in version 2.5: if the cursor is used in a ‘with’
          statement, the method is automatically called at the end of
          the ‘with’ block.

      -- Attribute: closed

          Read-only boolean attribute: specifies if the cursor is closed
          (‘True’) or not (‘False’).

          The *note closed: e1. attribute is a Psycopg extension to the
          DB API 2.0.

          New in version 2.0.7.

      -- Attribute: connection

          Read-only attribute returning a reference to the *note
          connection: 2c. object on which the cursor was created.

      -- Attribute: name

          Read-only attribute containing the name of the cursor if it
          was creates as named cursor by *note connection.cursor(): 2e,
          or ‘None’ if it is a client side cursor.  See *note Server
          side cursors: 9.

          The *note name: e3. attribute is a Psycopg extension to the DB
          API 2.0.

      -- Attribute: scrollable

          Read/write attribute: specifies if a named cursor is declared
          ‘SCROLL’, hence is capable to scroll backwards (using *note
          scroll(): 66.).  If ‘True’, the cursor can be scrolled
          backwards, if ‘False’ it is never scrollable.  If ‘None’
          (default) the cursor scroll option is not specified, usually
          but not always meaning no backward scroll (see the DECLARE
          notes(1)).

               Note: set the value before calling *note execute(): 31.
               or use the *note connection.cursor(): 2e. `scrollable'
               parameter, otherwise the value will have no effect.

          New in version 2.5.

          The *note scrollable: 67. attribute is a Psycopg extension to
          the DB API 2.0.

      -- Attribute: withhold

          Read/write attribute: specifies if a named cursor lifetime
          should extend outside of the current transaction, i.e., it is
          possible to fetch from the cursor even after a *note
          connection.commit(): 2f. (but not after a *note
          connection.rollback(): 30.).  See *note Server side cursors:
          9.

               Note: set the value before calling *note execute(): 31.
               or use the *note connection.cursor(): 2e. `withhold'
               parameter, otherwise the value will have no effect.

          New in version 2.4.3.

          The *note withhold: 69. attribute is a Psycopg extension to
          the DB API 2.0.

     Commands execution methods
     --------------------------

      -- Method: execute (query, vars=None)

          Execute a database operation (query or command).

          Parameters may be provided as sequence or mapping and will be
          bound to variables in the operation.  Variables are specified
          either with positional (‘%s’) or named (‘%(`name')s’)
          placeholders.  See *note Passing parameters to SQL queries:
          38.

          The method returns ‘None’.  If a query was executed, the
          returned values can be retrieved using *note fetch*(): e4.
          methods.

      -- Method: executemany (query, vars_list)

          Execute a database operation (query or command) against all
          parameter tuples or mappings found in the sequence
          `vars_list'.

          The function is mostly useful for commands that update the
          database: any result set returned by the query is discarded.

          Parameters are bounded to the query using the same rules
          described in the *note execute(): 31. method.

               Warning: In its current implementation this method is not
               faster than executing *note execute(): 31. in a loop.
               For better performance you can use the functions
               described in *note Fast execution helpers: e5.

      -- Method: callproc (procname[, parameters])

          Call a stored database procedure with the given name.  The
          sequence of parameters must contain one entry for each
          argument that the procedure expects.  Overloaded procedures
          are supported.  Named parameters can be used by supplying the
          parameters as a dictionary.

          This function is, at present, not DBAPI-compliant.  The return
          value is supposed to consist of the sequence of parameters
          with modified output and input/output parameters.  In future
          versions, the DBAPI-compliant return value may be implemented,
          but for now the function returns None.

          The procedure may provide a result set as output.  This is
          then made available through the standard *note fetch*(): e4.
          methods.

          Changed in version 2.7: added support for named arguments.

      -- Method: mogrify (operation[, parameters])

          Return a query string after arguments binding.  The string
          returned is exactly the one that would be sent to the database
          running the *note execute(): 31. method or similar.

          The returned string is always a bytes string.

               >>> cur.mogrify("INSERT INTO test (num, data) VALUES (%s, %s)", (42, 'bar'))
               "INSERT INTO test (num, data) VALUES (42, E'bar')"

          The *note mogrify(): e7. method is a Psycopg extension to the
          DB API 2.0.

      -- Method: setinputsizes (sizes)

          This method is exposed in compliance with the DB API 2.0.  It
          currently does nothing but it is safe to call it.

     Results retrieval methods
     -------------------------

     The following methods are used to read data from the database after
     an *note execute(): 31. call.
          Note: *note cursor: 2d. objects are iterable, so, instead of
          calling explicitly *note fetchone(): 34. in a loop, the object
          itself can be used:

               >>> cur.execute("SELECT * FROM test;")
               >>> for record in cur:
               ...     print record
               ...
               (1, 100, "abc'def")
               (2, None, 'dada')
               (3, 42, 'bar')

          Changed in version 2.4: iterating over a *note named cursor:
          9. fetches *note itersize: 68. records at time from the
          backend.  Previously only one record was fetched per
          roundtrip, resulting in a large overhead.

      -- Method: fetchone ()

          Fetch the next row of a query result set, returning a single
          tuple, or ‘None’ when no more data is available:

               >>> cur.execute("SELECT * FROM test WHERE id = %s", (3,))
               >>> cur.fetchone()
               (3, 42, 'bar')

          A *note ProgrammingError: 9c. is raised if the previous call
          to *note execute*(): d9. did not produce any result set or no
          call was issued yet.

      -- Method: fetchmany ([size=cursor.arraysize])

          Fetch the next set of rows of a query result, returning a list
          of tuples.  An empty list is returned when no more rows are
          available.

          The number of rows to fetch per call is specified by the
          parameter.  If it is not given, the cursor’s *note arraysize:
          e9. determines the number of rows to be fetched.  The method
          should try to fetch as many rows as indicated by the size
          parameter.  If this is not possible due to the specified
          number of rows not being available, fewer rows may be
          returned:

               >>> cur.execute("SELECT * FROM test;")
               >>> cur.fetchmany(2)
               [(1, 100, "abc'def"), (2, None, 'dada')]
               >>> cur.fetchmany(2)
               [(3, 42, 'bar')]
               >>> cur.fetchmany(2)
               []

          A *note ProgrammingError: 9c. is raised if the previous call
          to *note execute*(): d9. did not produce any result set or no
          call was issued yet.

          Note there are performance considerations involved with the
          size parameter.  For optimal performance, it is usually best
          to use the *note arraysize: e9. attribute.  If the size
          parameter is used, then it is best for it to retain the same
          value from one *note fetchmany(): 35. call to the next.

      -- Method: fetchall ()

          Fetch all (remaining) rows of a query result, returning them
          as a list of tuples.  An empty list is returned if there is no
          more record to fetch.

               >>> cur.execute("SELECT * FROM test;")
               >>> cur.fetchall()
               [(1, 100, "abc'def"), (2, None, 'dada'), (3, 42, 'bar')]

          A *note ProgrammingError: 9c. is raised if the previous call
          to *note execute*(): d9. did not produce any result set or no
          call was issued yet.

      -- Method: scroll (value[, mode='relative'])

          Scroll the cursor in the result set to a new position
          according to mode.

          If ‘mode’ is ‘relative’ (default), value is taken as offset to
          the current position in the result set, if set to ‘absolute’,
          value states an absolute target position.

          If the scroll operation would leave the result set, a *note
          ProgrammingError: 9c. is raised and the cursor position is not
          changed.

               Note: According to the DB API 2.0(2), the exception
               raised for a cursor out of bound should have been
               ‘IndexError’.  The best option is probably to catch both
               exceptions in your code:

                    try:
                        cur.scroll(1000 * 1000)
                    except (ProgrammingError, IndexError), exc:
                        deal_with_it(exc)

          The method can be used both for client-side cursors and *note
          server-side cursors: 9.  Server-side cursors can usually
          scroll backwards only if declared *note scrollable: 67.
          Moving out-of-bound in a server-side cursor doesn’t result in
          an exception, if the backend doesn’t raise any (Postgres
          doesn’t tell us in a reliable way if we went out of bound).

      -- Attribute: arraysize

          This read/write attribute specifies the number of rows to
          fetch at a time with *note fetchmany(): 35.  It defaults to 1
          meaning to fetch a single row at a time.

      -- Attribute: itersize

          Read/write attribute specifying the number of rows to fetch
          from the backend at each network roundtrip during *note
          iteration: 33. on a *note named cursor: 9.  The default is
          2000.

          New in version 2.4.

          The *note itersize: 68. attribute is a Psycopg extension to
          the DB API 2.0.

      -- Attribute: rowcount

          This read-only attribute specifies the number of rows that the
          last *note execute*(): d9. produced (for DQL (Data Query
          Language) statements like ‘SELECT’) or affected (for DML (Data
          Manipulation Language) statements like ‘UPDATE’ or ‘INSERT’).

          The attribute is -1 in case no ‘execute*()’ has been performed
          on the cursor or the row count of the last operation if it
          can’t be determined by the interface.

               Note: The DB API 2.0(3) interface reserves to redefine
               the latter case to have the object return ‘None’ instead
               of -1 in future versions of the specification.

      -- Attribute: rownumber

          This read-only attribute provides the current 0-based index of
          the cursor in the result set or ‘None’ if the index cannot be
          determined.

          The index can be seen as index of the cursor in a sequence
          (the result set).  The next fetch operation will fetch the row
          indexed by *note rownumber: eb. in that sequence.

      -- Attribute: lastrowid

          This read-only attribute provides the OID of the last row
          inserted by the cursor.  If the table wasn’t created with OID
          support or the last operation is not a single record insert,
          the attribute is set to ‘None’.

               Note: PostgreSQL currently advices to not create OIDs on
               the tables and the default for CREATE TABLE(4) is to not
               support them.  The INSERT ...  RETURNING(5) syntax
               available from PostgreSQL 8.3 allows more flexibility.

      -- Attribute: query

          Read-only attribute containing the body of the last query sent
          to the backend (including bound arguments) as bytes string.
          ‘None’ if no query has been executed yet:

               >>> cur.execute("INSERT INTO test (num, data) VALUES (%s, %s)", (42, 'bar'))
               >>> cur.query
               "INSERT INTO test (num, data) VALUES (42, E'bar')"

          The *note query: ed. attribute is a Psycopg extension to the
          DB API 2.0.

      -- Attribute: statusmessage

          Read-only attribute containing the message returned by the
          last command:

               >>> cur.execute("INSERT INTO test (num, data) VALUES (%s, %s)", (42, 'bar'))
               >>> cur.statusmessage
               'INSERT 0 1'

          The *note statusmessage: ee. attribute is a Psycopg extension
          to the DB API 2.0.

      -- Method: cast (oid, s)

          Convert a value from the PostgreSQL string representation to a
          Python object.

          Use the most specific of the typecasters registered by *note
          register_type(): 4d.

          New in version 2.4.

          The *note cast(): ef. method is a Psycopg extension to the DB
          API 2.0.

      -- Attribute: tzinfo_factory

          The time zone factory used to handle data types such as
          ‘TIMESTAMP WITH TIME ZONE’.  It should be a tzinfo(6) object.
          A few implementations are available in the *note psycopg2.tz:
          7. module.

      -- Method: nextset ()

          This method is not supported (PostgreSQL does not have
          multiple data sets) and will raise a *note NotSupportedError:
          9d. exception.

      -- Method: setoutputsize (size[, column])

          This method is exposed in compliance with the DB API 2.0.  It
          currently does nothing but it is safe to call it.

     COPY-related methods
     --------------------

     Efficiently copy data from file-like objects to the database and
     back.  See *note Using COPY TO and COPY FROM: c. for an overview.

     The ‘COPY’ command is a PostgreSQL extension to the SQL standard.
     As such, its support is a Psycopg extension to the DB API 2.0.

      -- Method: copy_from (file, table, sep='\t', null='\\N',
               size=8192, columns=None)

          Read data `from' the file-like object `file' appending them to
          the table named `table'.


          Parameters:

             * ‘file’ – file-like object to read data from.  It must
               have both ‘read()’ and ‘readline()’ methods.

             * ‘table’ – name of the table to copy data into.

             * ‘sep’ – columns separator expected in the file.  Defaults
               to a tab.

             * ‘null’ – textual representation of ‘NULL’ in the file.
               The default is the two characters string ‘\N’.

             * ‘size’ – size of the buffer used to read from the file.

             * ‘columns’ – iterable with name of the columns to import.
               The length and types should match the content of the file
               to read.  If not specified, it is assumed that the entire
               table matches the file structure.

          Example:

               >>> f = StringIO("42\tfoo\n74\tbar\n")
               >>> cur.copy_from(f, 'test', columns=('num', 'data'))
               >>> cur.execute("select * from test where id > 5;")
               >>> cur.fetchall()
               [(6, 42, 'foo'), (7, 74, 'bar')]

               Note: the name of the table is not quoted: if the table
               name contains uppercase letters or special characters it
               must be quoted with double quotes:

                    cur.copy_from(f, '"TABLE"')

          Changed in version 2.0.6: added the `columns' parameter.

          Changed in version 2.4: data read from files implementing the
          io.TextIOBase(7) interface are encoded in the connection *note
          encoding: 48. when sent to the backend.

      -- Method: copy_to (file, table, sep='\t', null='\\N',
               columns=None)

          Write the content of the table named `table' `to' the
          file-like object `file'.  See *note Using COPY TO and COPY
          FROM: c. for an overview.


          Parameters:

             * ‘file’ – file-like object to write data into.  It must
               have a ‘write()’ method.

             * ‘table’ – name of the table to copy data from.

             * ‘sep’ – columns separator expected in the file.  Defaults
               to a tab.

             * ‘null’ – textual representation of ‘NULL’ in the file.
               The default is the two characters string ‘\N’.

             * ‘columns’ – iterable with name of the columns to export.
               If not specified, export all the columns.

          Example:

               >>> cur.copy_to(sys.stdout, 'test', sep="|")
               1|100|abc'def
               2|\N|dada
               ...

               Note: the name of the table is not quoted: if the table
               name contains uppercase letters or special characters it
               must be quoted with double quotes:

                    cur.copy_to(f, '"TABLE"')

          Changed in version 2.0.6: added the `columns' parameter.

          Changed in version 2.4: data sent to files implementing the
          io.TextIOBase(8) interface are decoded in the connection *note
          encoding: 48. when read from the backend.

      -- Method: copy_expert (sql, file, size=8192)

          Submit a user-composed ‘COPY’ statement.  The method is useful
          to handle all the parameters that PostgreSQL makes available
          (see COPY(9) command documentation).


          Parameters:

             * ‘sql’ – the ‘COPY’ statement to execute.

             * ‘file’ – a file-like object to read or write (according
               to `sql').

             * ‘size’ – size of the read buffer to be used in ‘COPY
               FROM’.

          The `sql' statement should be in the form ‘COPY `table' TO
          STDOUT’ to export ‘`table'’ to the `file' object passed as
          argument or ‘COPY `table' FROM STDIN’ to import the content of
          the `file' object into ‘`table'’.  If you need to compose a
          ‘COPY’ statement dynamically (because table, fields, or query
          parameters are in Python variables) you may use the objects
          provided by the *note psycopg2.sql: 6. module.

          `file' must be a readable file-like object (as required by
          *note copy_from(): 70.) for `sql' statement ‘COPY ... FROM
          STDIN’ or a writable one (as required by *note copy_to(): 71.)
          for ‘COPY ... TO STDOUT’.

          Example:

               >>> cur.copy_expert("COPY test TO STDOUT WITH CSV HEADER", sys.stdout)
               id,num,data
               1,100,abc'def
               2,,dada
               ...

          New in version 2.0.6.

          Changed in version 2.4: files implementing the
          io.TextIOBase(10) interface are dealt with using Unicode data
          instead of bytes.

     Interoperation with other C API modules
     ---------------------------------------

      -- Attribute: pgresult_ptr

          Return the cursor’s internal ‘PGresult*’ as integer.  Useful
          to pass the libpq raw result structure to C functions, e.g.
          via ctypes(11):

               >>> import ctypes
               >>> libpq = ctypes.pydll.LoadLibrary(ctypes.util.find_library('pq'))
               >>> libpq.PQcmdStatus.argtypes = [ctypes.c_void_p]
               >>> libpq.PQcmdStatus.restype = ctypes.c_char_p

               >>> curs.execute("select 'x'")
               >>> libpq.PQcmdStatus(curs.pgresult_ptr)
               b'SELECT 1'

          New in version 2.8.

   ---------- Footnotes ----------

   (1) 
https://www.postgresql.org/docs/current/static/sql-declare.html#SQL-DECLARE-NOTES

   (2) https://www.python.org/dev/peps/pep-0249/

   (3) https://www.python.org/dev/peps/pep-0249/

   (4) 
https://www.postgresql.org/docs/current/static/sql-createtable.html

   (5) https://www.postgresql.org/docs/current/static/sql-insert.html

   (6) https://docs.python.org/3/library/datetime.html#datetime.tzinfo

   (7) https://docs.python.org/3/library/io.html#io.TextIOBase

   (8) https://docs.python.org/3/library/io.html#io.TextIOBase

   (9) https://www.postgresql.org/docs/current/static/sql-copy.html

   (10) https://docs.python.org/3/library/io.html#io.TextIOBase

   (11) https://docs.python.org/3/library/ctypes.html#module-ctypes


File: psycopg.info,  Node: More advanced topics,  Next: psycopg2 extensions – Extensions to the DB API,  Prev: The cursor class,  Up: Top

6 More advanced topics
**********************

* Menu:

* Connection and cursor factories::
* Adapting new Python types to SQL syntax::
* Type casting of SQL types into Python objects::
* Asynchronous notifications::
* Asynchronous support::
* Support for coroutine libraries::
* Replication protocol support::


File: psycopg.info,  Node: Connection and cursor factories,  Next: Adapting new Python types to SQL syntax,  Up: More advanced topics

6.1 Connection and cursor factories
===================================

Psycopg exposes two new-style classes that can be sub-classed and
expanded to adapt them to the needs of the programmer: *note
psycopg2.extensions.cursor: ae. and *note
psycopg2.extensions.connection: f8.  The *note connection: 2c. class is
usually sub-classed only to provide an easy way to create customized
cursors but other uses are possible.  *note cursor: 2d. is much more
interesting, because it is the class where query building, execution and
result type-casting into Python variables happens.

The *note extras: 4. module contains several examples of *note
connection and cursor subclasses: f9.

     Note: If you only need a customized cursor class, since Psycopg 2.5
     you can use the *note cursor_factory: 87. parameter of a regular
     connection instead of creating a new ‘connection’ subclass.

An example of cursor subclass performing logging is:

     import psycopg2
     import psycopg2.extensions
     import logging

     class LoggingCursor(psycopg2.extensions.cursor):
         def execute(self, sql, args=None):
             logger = logging.getLogger('sql_debug')
             logger.info(self.mogrify(sql, args))

             try:
                 psycopg2.extensions.cursor.execute(self, sql, args)
             except Exception, exc:
                 logger.error("%s: %s" % (exc.__class__.__name__, exc))
                 raise

     conn = psycopg2.connect(DSN)
     cur = conn.cursor(cursor_factory=LoggingCursor)
     cur.execute("INSERT INTO mytable VALUES (%s, %s, %s);",
                  (10, 20, 30))


File: psycopg.info,  Node: Adapting new Python types to SQL syntax,  Next: Type casting of SQL types into Python objects,  Prev: Connection and cursor factories,  Up: More advanced topics

6.2 Adapting new Python types to SQL syntax
===========================================

Any Python class or type can be adapted to an SQL string.  Adaptation
mechanism is similar to the Object Adaptation proposed in the PEP 246(1)
and is exposed by the *note psycopg2.extensions.adapt(): fb. function.

The *note execute(): 31. method adapts its arguments to the *note
ISQLQuote: fc. protocol.  Objects that conform to this protocol expose a
‘getquoted()’ method returning the SQL representation of the object as a
string (the method must return ‘bytes’ in Python 3).  Optionally the
conform object may expose a *note prepare(): fd. method.

There are two basic ways to have a Python object adapted to SQL:

   - the object itself is conform, or knows how to make itself conform.
     Such object must expose a ‘__conform__()’ method that will be
     called with the protocol object as argument.  The object can check
     that the protocol is ‘ISQLQuote’, in which case it can return
     ‘self’ (if the object also implements ‘getquoted()’) or a suitable
     wrapper object.  This option is viable if you are the author of the
     object and if the object is specifically designed for the database
     (i.e.  having Psycopg as a dependency and polluting its interface
     with the required methods doesn’t bother you).  For a simple
     example you can take a look at the source code for the
     ‘psycopg2.extras.Inet’ object.

   - If implementing the ‘ISQLQuote’ interface directly in the object is
     not an option (maybe because the object to adapt comes from a third
     party library), you can use an `adaptation function', taking the
     object to be adapted as argument and returning a conforming object.
     The adapter must be registered via the *note register_adapter():
     fe. function.  A simple example wrapper is
     ‘psycopg2.extras.UUID_adapter’ used by the ‘register_uuid()’
     function.

A convenient object to write adapters is the *note AsIs: ff. wrapper,
whose ‘getquoted()’ result is simply the ‘str()’ing conversion of the
wrapped object.

Example: mapping of a ‘Point’ class into the point(2) PostgreSQL
geometric type:

     >>> from psycopg2.extensions import adapt, register_adapter, AsIs

     >>> class Point(object):
     ...    def __init__(self, x, y):
     ...        self.x = x
     ...        self.y = y

     >>> def adapt_point(point):
     ...     x = adapt(point.x).getquoted()
     ...     y = adapt(point.y).getquoted()
     ...     return AsIs("'(%s, %s)'" % (x, y))

     >>> register_adapter(Point, adapt_point)

     >>> cur.execute("INSERT INTO atable (apoint) VALUES (%s)",
     ...             (Point(1.23, 4.56),))

The above function call results in the SQL command:

     INSERT INTO atable (apoint) VALUES ('(1.23, 4.56)');

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0246

   (2) 
https://www.postgresql.org/docs/current/static/datatype-geometric.html#DATATYPE-GEOMETRIC


File: psycopg.info,  Node: Type casting of SQL types into Python objects,  Next: Asynchronous notifications,  Prev: Adapting new Python types to SQL syntax,  Up: More advanced topics

6.3 Type casting of SQL types into Python objects
=================================================

PostgreSQL objects read from the database can be adapted to Python
objects through an user-defined adapting function.  An adapter function
takes two arguments: the object string representation as returned by
PostgreSQL and the cursor currently being read, and should return a new
Python object.  For example, the following function parses the
PostgreSQL ‘point’ representation into the previously defined ‘Point’
class:

     >>> def cast_point(value, cur):
     ...    if value is None:
     ...        return None
     ...
     ...    # Convert from (f1, f2) syntax using a regular expression.
     ...    m = re.match(r"\(([^)]+),([^)]+)\)", value)
     ...    if m:
     ...        return Point(float(m.group(1)), float(m.group(2)))
     ...    else:
     ...        raise InterfaceError("bad point representation: %r" % value)

In order to create a mapping from a PostgreSQL type (either standard or
user-defined), its OID must be known.  It can be retrieved either by the
second column of the *note cursor.description: d7.:

     >>> cur.execute("SELECT NULL::point")
     >>> point_oid = cur.description[0][1]
     >>> point_oid
     600

or by querying the system catalog for the type name and namespace (the
namespace for system objects is ‘pg_catalog’):

     >>> cur.execute("""
     ...    SELECT pg_type.oid
     ...      FROM pg_type JOIN pg_namespace
     ...             ON typnamespace = pg_namespace.oid
     ...     WHERE typname = %(typename)s
     ...       AND nspname = %(namespace)s""",
     ...    {'typename': 'point', 'namespace': 'pg_catalog'})
     >>> point_oid = cur.fetchone()[0]
     >>> point_oid
     600

After you know the object OID, you can create and register the new type:

     >>> POINT = psycopg2.extensions.new_type((point_oid,), "POINT", cast_point)
     >>> psycopg2.extensions.register_type(POINT)

The *note new_type(): 101. function binds the object OIDs (more than one
can be specified) to the adapter function.  *note register_type(): 4d.
completes the spell.  Conversion is automatically performed when a
column whose type is a registered OID is read:

     >>> cur.execute("SELECT '(10.2,20.3)'::point")
     >>> point = cur.fetchone()[0]
     >>> print type(point), point.x, point.y
     <class 'Point'> 10.2 20.3

A typecaster created by ‘new_type()’ can be also used with *note
new_array_type(): 102. to create a typecaster converting a PostgreSQL
array into a Python list.


File: psycopg.info,  Node: Asynchronous notifications,  Next: Asynchronous support,  Prev: Type casting of SQL types into Python objects,  Up: More advanced topics

6.4 Asynchronous notifications
==============================

Psycopg allows asynchronous interaction with other database sessions
using the facilities offered by PostgreSQL commands LISTEN(1) and
NOTIFY(2). Please refer to the PostgreSQL documentation for examples
about how to use this form of communication.

Notifications are instances of the ‘Notify’ object made available upon
reception in the *note connection.notifies: c2. list.  Notifications can
be sent from Python code simply executing a ‘NOTIFY’ command in an *note
execute(): 31. call.

Because of the way sessions interact with notifications (see NOTIFY(3)
documentation), you should keep the connection in *note autocommit: 62.
mode if you wish to receive or send notifications in a timely manner.

Notifications are received after every query execution.  If the user is
interested in receiving notifications but not in performing any query,
the *note poll(): c7. method can be used to check for new messages
without wasting resources.

A simple application could poll the connection from time to time to
check if something new has arrived.  A better strategy is to use some
I/O completion function such as select()(4) to sleep until awakened by
the kernel when there is some data to read on the connection, thereby
using no CPU unless there is something to read:

     import select
     import psycopg2
     import psycopg2.extensions

     conn = psycopg2.connect(DSN)
     conn.set_isolation_level(psycopg2.extensions.ISOLATION_LEVEL_AUTOCOMMIT)

     curs = conn.cursor()
     curs.execute("LISTEN test;")

     print "Waiting for notifications on channel 'test'"
     while True:
         if select.select([conn],[],[],5) == ([],[],[]):
             print "Timeout"
         else:
             conn.poll()
             while conn.notifies:
                 notify = conn.notifies.pop(0)
                 print "Got NOTIFY:", notify.pid, notify.channel, notify.payload

Running the script and executing a command such as ‘NOTIFY test,
'hello'’ in a separate ‘psql’ shell, the output may look similar to:

     Waiting for notifications on channel 'test'
     Timeout
     Timeout
     Got NOTIFY: 6535 test hello
     Timeout
     ...

Note that the payload is only available from PostgreSQL 9.0:
notifications received from a previous version server will have the
‘payload’ attribute set to the empty string.

Changed in version 2.3: Added ‘Notify’ object and handling notification
payload.

Changed in version 2.7: The *note notifies: c2. attribute is writable:
it is possible to replace it with any object exposing an ‘append()’
method.  An useful example would be to use a deque(5) object.

   ---------- Footnotes ----------

   (1) https://www.postgresql.org/docs/current/static/sql-listen.html

   (2) https://www.postgresql.org/docs/current/static/sql-notify.html

   (3) https://www.postgresql.org/docs/current/static/sql-notify.html

   (4) https://docs.python.org/3/library/select.html#select.select

   (5) 
https://docs.python.org/3/library/collections.html#collections.deque


File: psycopg.info,  Node: Asynchronous support,  Next: Support for coroutine libraries,  Prev: Asynchronous notifications,  Up: More advanced topics

6.5 Asynchronous support
========================

New in version 2.2.

Psycopg can issue asynchronous queries to a PostgreSQL database.  An
asynchronous communication style is established passing the parameter
`async'=1 to the *note connect(): 2b. function: the returned connection
will work in `asynchronous mode'.

In asynchronous mode, a Psycopg connection will rely on the caller to
poll the socket file descriptor, checking if it is ready to accept data
or if a query result has been transferred and is ready to be read on the
client.  The caller can use the method *note fileno(): ca. to get the
connection file descriptor and *note poll(): c7. to make communication
proceed according to the current connection state.

The following is an example loop using methods ‘fileno()’ and ‘poll()’
together with the Python select()(1) function in order to carry on
asynchronous operations with Psycopg:

     def wait(conn):
         while True:
             state = conn.poll()
             if state == psycopg2.extensions.POLL_OK:
                 break
             elif state == psycopg2.extensions.POLL_WRITE:
                 select.select([], [conn.fileno()], [])
             elif state == psycopg2.extensions.POLL_READ:
                 select.select([conn.fileno()], [], [])
             else:
                 raise psycopg2.OperationalError("poll() returned %s" % state)

The above loop of course would block an entire application: in a real
asynchronous framework, ‘select()’ would be called on many file
descriptors waiting for any of them to be ready.  Nonetheless the
function can be used to connect to a PostgreSQL server only using
nonblocking commands and the connection obtained can be used to perform
further nonblocking queries.  After ‘poll()’ has returned *note POLL_OK:
c9, and thus ‘wait()’ has returned, the connection can be safely used:

     >>> aconn = psycopg2.connect(database='test', async=1)
     >>> wait(aconn)
     >>> acurs = aconn.cursor()

Note that there are a few other requirements to be met in order to have
a completely non-blocking connection attempt: see the libpq
documentation for PQconnectStart()(2).

The same loop should be also used to perform nonblocking queries: after
sending a query via *note execute(): 31. or *note callproc(): e6, call
‘poll()’ on the connection available from *note cursor.connection: e2.
until it returns ‘POLL_OK’, at which point the query has been completely
sent to the server and, if it produced data, the results have been
transferred to the client and available using the regular cursor
methods:

     >>> acurs.execute("SELECT pg_sleep(5); SELECT 42;")
     >>> wait(acurs.connection)
     >>> acurs.fetchone()[0]
     42

When an asynchronous query is being executed, *note
connection.isexecuting(): cb. returns ‘True’.  Two cursors can’t execute
concurrent queries on the same asynchronous connection.

There are several limitations in using asynchronous connections: the
connection is always in *note autocommit: 62. mode and it is not
possible to change it.  So a transaction is not implicitly started at
the first query and is not possible to use methods *note commit(): 2f.
and *note rollback(): 30.: you can manually control transactions using
*note execute(): 31. to send database commands such as ‘BEGIN’, ‘COMMIT’
and ‘ROLLBACK’.  Similarly *note set_session(): 63. can’t be used but it
is still possible to invoke the ‘SET’ command with the proper
‘default_transaction_...’ parameter.

With asynchronous connections it is also not possible to use *note
set_client_encoding(): c0, *note executemany(): 32, *note large objects:
74, *note named cursors: 9.

*note COPY commands: c. are not supported either in asynchronous mode,
but this will be probably implemented in a future release.

   ---------- Footnotes ----------

   (1) https://docs.python.org/3/library/select.html#select.select

   (2) 
https://www.postgresql.org/docs/current/static/libpq-connect.html#LIBPQ-PQCONNECTSTARTPARAMS


File: psycopg.info,  Node: Support for coroutine libraries,  Next: Replication protocol support,  Prev: Asynchronous support,  Up: More advanced topics

6.6 Support for coroutine libraries
===================================

New in version 2.2.

Psycopg can be used together with coroutine(1)-based libraries and
participate in cooperative multithreading.

Coroutine-based libraries (such as Eventlet(2) or gevent(3)) can usually
patch the Python standard library in order to enable a coroutine switch
in the presence of blocking I/O: the process is usually referred as
making the system `green', in reference to the green threads(4).

Because Psycopg is a C extension module, it is not possible for
coroutine libraries to patch it: Psycopg instead enables cooperative
multithreading by allowing the registration of a `wait callback' using
the ‘psycopg2.extensions.set_wait_callback()’ function.  When a wait
callback is registered, Psycopg will use libpq non-blocking calls(5)
instead of the regular blocking ones, and will delegate to the callback
the responsibility to wait for the socket to become readable or
writable.

Working this way, the caller does not have the complete freedom to
schedule the socket check whenever they want as with an *note
asynchronous connection: a, but has the advantage of maintaining a
complete DB API 2.0 semantics: from the point of view of the end user,
all Psycopg functions and objects will work transparently in the
coroutine environment (blocking the calling green thread and giving
other green threads the possibility to be scheduled), allowing non
modified code and third party libraries (such as SQLAlchemy(6)) to be
used in coroutine-based programs.

     Warning: Psycopg connections are not `green thread safe' and can’t
     be used concurrently by different green threads.  Trying to execute
     more than one command at time using one cursor per thread will
     result in an error (or a deadlock on versions before 2.4.2).

     Therefore, programmers are advised to either avoid sharing
     connections between coroutines or to use a library-friendly lock to
     synchronize shared connections, e.g.  for pooling.

Coroutine libraries authors should provide a callback implementation
(and possibly a method to register it) to make Psycopg as green as they
want.  An example callback (using ‘select()’ to block) is provided as
‘psycopg2.extras.wait_select()’: it boils down to something similar to:

     def wait_select(conn):
         while True:
             state = conn.poll()
             if state == extensions.POLL_OK:
                 break
             elif state == extensions.POLL_READ:
                 select.select([conn.fileno()], [], [])
             elif state == extensions.POLL_WRITE:
                 select.select([], [conn.fileno()], [])
             else:
                 raise OperationalError("bad state from poll: %s" % state)

Providing callback functions for the single coroutine libraries is out
of psycopg2 scope, as the callback can be tied to the libraries’
implementation details.  You can check the psycogreen(7) project for
further informations and resources about the topic.

     Warning: *note COPY commands: c. are currently not supported when a
     wait callback is registered, but they will be probably implemented
     in a future release.

     *note Large objects: 74. are not supported either: they are not
     compatible with asynchronous connections.

   ---------- Footnotes ----------

   (1) https://en.wikipedia.org/wiki/Coroutine

   (2) https://eventlet.net/

   (3) http://www.gevent.org/

   (4) https://en.wikipedia.org/wiki/Green_threads

   (5) https://www.postgresql.org/docs/current/static/libpq-async.html

   (6) https://www.sqlalchemy.org/

   (7) https://github.com/psycopg/psycogreen/


File: psycopg.info,  Node: Replication protocol support,  Prev: Support for coroutine libraries,  Up: More advanced topics

6.7 Replication protocol support
================================

New in version 2.7.

Modern PostgreSQL servers (version 9.0 and above) support replication.
The replication protocol is built on top of the client-server protocol
and can be operated using ‘libpq’, as such it can be also operated by
‘psycopg2’.  The replication protocol can be operated on both
synchronous and *note asynchronous: a. connections.

Server version 9.4 adds a new feature called `Logical Replication'.

See also
........

   - PostgreSQL Streaming Replication Protocol(1)

* Menu:

* Logical replication Quick-Start::

   ---------- Footnotes ----------

   (1) 
https://www.postgresql.org/docs/current/static/protocol-replication.html


File: psycopg.info,  Node: Logical replication Quick-Start,  Up: Replication protocol support

6.7.1 Logical replication Quick-Start
-------------------------------------

You must be using PostgreSQL server version 9.4 or above to run this
quick start.

Make sure that replication connections are permitted for user ‘postgres’
in ‘pg_hba.conf’ and reload the server configuration.  You also need to
set ‘wal_level=logical’ and ‘max_wal_senders’, ‘max_replication_slots’
to value greater than zero in ‘postgresql.conf’ (these changes require a
server restart).  Create a database ‘psycopg2_test’.

Then run the following code to quickly try the replication support out.
This is not production code – it’s only intended as a simple demo of
logical replication:

     from __future__ import print_function
     import sys
     import psycopg2
     import psycopg2.extras

     conn = psycopg2.connect('dbname=psycopg2_test user=postgres',
        connection_factory=psycopg2.extras.LogicalReplicationConnection)
     cur = conn.cursor()
     try:
         # test_decoding produces textual output
         cur.start_replication(slot_name='pytest', decode=True)
     except psycopg2.ProgrammingError:
         cur.create_replication_slot('pytest', output_plugin='test_decoding')
         cur.start_replication(slot_name='pytest', decode=True)

     class DemoConsumer(object):
         def __call__(self, msg):
             print(msg.payload)
             msg.cursor.send_feedback(flush_lsn=msg.data_start)

     democonsumer = DemoConsumer()

     print("Starting streaming, press Control-C to end...", file=sys.stderr)
     try:
        cur.consume_stream(democonsumer)
     except KeyboardInterrupt:
        cur.close()
        conn.close()
        print("The slot 'pytest' still exists. Drop it with "
           "SELECT pg_drop_replication_slot('pytest'); if no longer needed.",
           file=sys.stderr)
        print("WARNING: Transaction logs will accumulate in pg_xlog "
           "until the slot is dropped.", file=sys.stderr)

You can now make changes to the ‘psycopg2_test’ database using a normal
psycopg2 session, ‘psql’, etc.  and see the logical decoding stream
printed by this demo client.

This will continue running until terminated with ‘Control-C’.

For the details see *note Replication support objects: 109.


File: psycopg.info,  Node: psycopg2 extensions – Extensions to the DB API,  Next: psycopg2 extras – Miscellaneous goodies for Psycopg 2,  Prev: More advanced topics,  Up: Top

7 ‘psycopg2.extensions’ – Extensions to the DB API
**************************************************

The module contains a few objects and function extending the minimum set
of functionalities defined by the DB API 2.0(1).

* Menu:

* Classes definitions::
* SQL adaptation protocol objects::
* Database types casting functions::
* Additional exceptions::
* Coroutines support functions::
* Other functions::
* Isolation level constants::
* Transaction status constants::
* Connection status constants::
* Poll constants::
* Additional database types::

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0249/


File: psycopg.info,  Node: Classes definitions,  Next: SQL adaptation protocol objects,  Up: psycopg2 extensions – Extensions to the DB API

7.1 Classes definitions
=======================

Instances of these classes are usually returned by factory functions or
attributes.  Their definitions are exposed here to allow subclassing,
introspection etc.

 -- Class: psycopg2.extensions.connection (dsn, async=False)

     Is the class usually returned by the *note connect(): 2b. function.
     It is exposed by the ‘extensions’ module in order to allow
     subclassing to extend its behaviour: the subclass should be passed
     to the ‘connect()’ function using the ‘connection_factory’
     parameter.  See also *note Connection and cursor factories: 86.

     For a complete description of the class, see *note connection: 2c.

     Changed in version 2.7: `async_' can be used as alias for `async'.

 -- Class: psycopg2.extensions.cursor (conn, name=None)

     It is the class usually returned by the *note connection.cursor():
     2e. method.  It is exposed by the ‘extensions’ module in order to
     allow subclassing to extend its behaviour: the subclass should be
     passed to the ‘cursor()’ method using the ‘cursor_factory’
     parameter.  See also *note Connection and cursor factories: af.

     For a complete description of the class, see *note cursor: 2d.

 -- Class: psycopg2.extensions.lobject (conn[, oid[, mode[, new_oid[,
          new_file]]]])

     Wrapper for a PostgreSQL large object.  See *note Access to
     PostgreSQL large objects: 74. for an overview.

     The class can be subclassed: see the *note connection.lobject():
     76. to know how to specify a ‘lobject’ subclass.

     New in version 2.0.8.

      -- Attribute: oid

          Database OID of the object.

      -- Attribute: mode

          The mode the database was open.  See *note
          connection.lobject(): 76. for a description of the available
          modes.

      -- Method: read (bytes=-1)

          Read a chunk of data from the current file position.  If -1
          (default) read all the remaining data.

          The result is an Unicode string (decoded according to *note
          connection.encoding: 48.) if the file was open in ‘t’ mode, a
          bytes string for ‘b’ mode.

          Changed in version 2.4: added Unicode support.

      -- Method: write (str)

          Write a string to the large object.  Return the number of
          bytes written.  Unicode strings are encoded in the *note
          connection.encoding: 48. before writing.

          Changed in version 2.4: added Unicode support.

      -- Method: export (file_name)

          Export the large object content to the file system.

          The method uses the efficient lo_export()(1) libpq function.

      -- Method: seek (offset, whence=0)

          Set the lobject current position.

          Changed in version 2.6: added support for `offset' > 2GB.

      -- Method: tell ()

          Return the lobject current position.

          New in version 2.2.

          Changed in version 2.6: added support for return value > 2GB.

      -- Method: truncate (len=0)

          Truncate the lobject to the given size.

          The method will only be available if Psycopg has been built
          against libpq from PostgreSQL 8.3 or later and can only be
          used with PostgreSQL servers running these versions.  It uses
          the lo_truncate()(2) libpq function.

          New in version 2.2.

          Changed in version 2.6: added support for `len' > 2GB.

          Warning: If Psycopg is built with ‘lo_truncate()’ support or
          with the 64 bits API support (resp.  from PostgreSQL versions
          8.3 and 9.3) but at runtime an older version of the dynamic
          library is found, the ‘psycopg2’ module will fail to import.
          See *note the lo_truncate FAQ: 116. about the problem.

      -- Method: close ()

          Close the object.

      -- Attribute: closed

          Boolean attribute specifying if the object is closed.

      -- Method: unlink ()

          Close the object and remove it from the database.

 -- Class: psycopg2.extensions.Column (*args, **kwargs)

     Description of one result column, exposed as items of the *note
     cursor.description: d7. sequence.

     New in version 2.8: in previous version the ‘description’ attribute
     was a sequence of simple tuples or namedtuples.

      -- Attribute: name

          The name of the column returned.

      -- Attribute: type_code

          The PostgreSQL OID of the column.  You can use the pg_type(3)
          system table to get more informations about the type.  This is
          the value used by Psycopg to decide what Python type use to
          represent the value.  See also *note Type casting of SQL types
          into Python objects: 40.

      -- Attribute: display_size

          Supposed to be the actual length of the column in bytes.
          Obtaining this value is computationally intensive, so it is
          always ‘None’.

          Changed in version 2.8: It was previously possible to obtain
          this value using a compiler flag at builtin.

      -- Attribute: internal_size

          The size in bytes of the column associated to this column on
          the server.  Set to a negative value for variable-size types
          See also PQfsize(4).

      -- Attribute: precision

          Total number of significant digits in columns of type
          NUMERIC(5). ‘None’ for other types.

      -- Attribute: scale

          Count of decimal digits in the fractional part in columns of
          type ‘NUMERIC’.  ‘None’ for other types.

      -- Attribute: null_ok

          Always ‘None’ as not easy to retrieve from the libpq.

      -- Attribute: table_oid

          The oid of the table from which the column was fetched
          (matching ‘pg_class.oid’).  ‘None’ if the column is not a
          simple reference to a table column.  See also PQftable(6).

          New in version 2.8.

      -- Attribute: table_column

          The number of the column (within its table) making up the
          result (matching ‘pg_attribute.attnum’, so it will start from
          1).  ‘None’ if the column is not a simple reference to a table
          column.  See also PQftablecol(7).

          New in version 2.8.

   ---------- Footnotes ----------

   (1) 
https://www.postgresql.org/docs/current/static/lo-interfaces.html#LO-EXPORT

   (2) 
https://www.postgresql.org/docs/current/static/lo-interfaces.html#LO-TRUNCATE

   (3) 
https://www.postgresql.org/docs/current/static/catalog-pg-type.html

   (4) 
https://www.postgresql.org/docs/current/static/libpq-exec.html#LIBPQ-PQFSIZE

   (5) 
https://www.postgresql.org/docs/current/static/datatype-numeric.html#DATATYPE-NUMERIC-DECIMAL

   (6) 
https://www.postgresql.org/docs/current/static/libpq-exec.html#LIBPQ-PQFTABLE

   (7) 
https://www.postgresql.org/docs/current/static/libpq-exec.html#LIBPQ-PQFTABLECOL


File: psycopg.info,  Node: SQL adaptation protocol objects,  Next: Database types casting functions,  Prev: Classes definitions,  Up: psycopg2 extensions – Extensions to the DB API

7.2 SQL adaptation protocol objects
===================================

Psycopg provides a flexible system to adapt Python objects to the SQL
syntax (inspired to the PEP 246(1)), allowing serialization in
PostgreSQL. See *note Adapting new Python types to SQL syntax: e. for a
detailed description.  The following objects deal with Python objects
adaptation:

 -- Function: psycopg2.extensions.adapt (obj)

     Return the SQL representation of `obj' as an *note ISQLQuote: fc.
     Raise a *note ProgrammingError: 9c. if how to adapt the object is
     unknown.  In order to allow new objects to be adapted, register a
     new adapter for it using the *note register_adapter(): fe.
     function.

     The function is the entry point of the adaptation mechanism: it can
     be used to write adapters for complex objects by recursively
     calling ‘adapt()’ on its components.

 -- Function: psycopg2.extensions.register_adapter (class, adapter)

     Register a new adapter for the objects of class `class'.

     `adapter' should be a function taking a single argument (the object
     to adapt) and returning an object conforming to the *note
     ISQLQuote: fc. protocol (e.g.  exposing a ‘getquoted()’ method).
     The *note AsIs: ff. is often useful for this task.

     Once an object is registered, it can be safely used in SQL queries
     and by the *note adapt(): fb. function.

 -- Class: psycopg2.extensions.ISQLQuote (wrapped_object)

     Represents the SQL adaptation protocol.  Objects conforming this
     protocol should implement a *note getquoted(): 11e. and optionally
     a *note prepare(): fd. method.

     Adapters may subclass ‘ISQLQuote’, but is not necessary: it is
     enough to expose a ‘getquoted()’ method to be conforming.

      -- Attribute: _wrapped

          The wrapped object passes to the constructor

      -- Method: getquoted ()

          Subclasses or other conforming objects should return a valid
          SQL string representing the wrapped object.  In Python 3 the
          SQL must be returned in a ‘bytes’ object.  The ‘ISQLQuote’
          implementation does nothing.

      -- Method: prepare (conn)

          Prepare the adapter for a connection.  The method is optional:
          if implemented, it will be invoked before ‘getquoted()’ with
          the connection to adapt for as argument.

          A conform object can implement this method if the SQL
          representation depends on any server parameter, such as the
          server version or the ‘standard_conforming_string’ setting.
          Container objects may store the connection and use it to
          recursively prepare contained objects: see the implementation
          for *note psycopg2.extensions.SQL_IN: 120. for a simple
          example.

 -- Class: psycopg2.extensions.AsIs (object)

     Adapter conform to the *note ISQLQuote: fc. protocol useful for
     objects whose string representation is already valid as SQL
     representation.

      -- Method: getquoted ()

          Return the ‘str()’ conversion of the wrapped object.

               >>> AsIs(42).getquoted()
               '42'

 -- Class: psycopg2.extensions.QuotedString (str)

     Adapter conform to the *note ISQLQuote: fc. protocol for
     string-like objects.

      -- Method: getquoted ()

          Return the string enclosed in single quotes.  Any single quote
          appearing in the string is escaped by doubling it according to
          SQL string constants syntax.  Backslashes are escaped too.

               >>> QuotedString(r"O'Reilly").getquoted()
               "'O''Reilly'"

 -- Class: psycopg2.extensions.Binary (str)

     Adapter conform to the *note ISQLQuote: fc. protocol for binary
     objects.

      -- Method: getquoted ()

          Return the string enclosed in single quotes.  It performs the
          same escaping of the *note QuotedString: 122. adapter, plus it
          knows how to escape non-printable chars.

               >>> Binary("\x00\x08\x0F").getquoted()
               "'\\\\000\\\\010\\\\017'"

     Changed in version 2.0.14: previously the adapter was not exposed
     by the ‘extensions’ module.  In older versions it can be imported
     from the implementation module ‘psycopg2._psycopg’.

 -- Class: psycopg2.extensions.Boolean
 -- Class: psycopg2.extensions.Float
 -- Class: psycopg2.extensions.SQL_IN

     Specialized adapters for builtin objects.

 -- Class: psycopg2.extensions.DateFromPy
 -- Class: psycopg2.extensions.TimeFromPy
 -- Class: psycopg2.extensions.TimestampFromPy
 -- Class: psycopg2.extensions.IntervalFromPy

     Specialized adapters for Python datetime objects.

 -- Class: psycopg2.extensions.DateFromMx
 -- Class: psycopg2.extensions.TimeFromMx
 -- Class: psycopg2.extensions.TimestampFromMx
 -- Class: psycopg2.extensions.IntervalFromMx

     Specialized adapters for mx.DateTime(2) objects.

 -- Data: psycopg2.extensions.adapters

     Dictionary of the currently registered object adapters.  Use *note
     register_adapter(): fe. to add an adapter for a new type.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0246

   (2) https://www.egenix.com/products/python/mxBase/mxDateTime/


File: psycopg.info,  Node: Database types casting functions,  Next: Additional exceptions,  Prev: SQL adaptation protocol objects,  Up: psycopg2 extensions – Extensions to the DB API

7.3 Database types casting functions
====================================

These functions are used to manipulate type casters to convert from
PostgreSQL types to Python objects.  See *note Type casting of SQL types
into Python objects: 40. for details.

 -- Function: psycopg2.extensions.new_type (oids, name, adapter)

     Create a new type caster to convert from a PostgreSQL type to a
     Python object.  The object created must be registered using *note
     register_type(): 4d. to be used.


     Parameters:

        * ‘oids’ – tuple of OIDs of the PostgreSQL type to convert.

        * ‘name’ – the name of the new type adapter.

        * ‘adapter’ – the adaptation function.

     The object OID can be read from the *note cursor.description: d7.
     attribute or by querying from the PostgreSQL catalog.

     `adapter' should have signature ‘fun(`value', `cur')’ where `value'
     is the string representation returned by PostgreSQL and `cur' is
     the cursor from which data are read.  In case of ‘NULL’, `value'
     will be ‘None’.  The adapter should return the converted object.

     See *note Type casting of SQL types into Python objects: 40. for an
     usage example.

 -- Function: psycopg2.extensions.new_array_type (oids, name,
          base_caster)

     Create a new type caster to convert from a PostgreSQL array type to
     a list of Python object.  The object created must be registered
     using *note register_type(): 4d. to be used.


     Parameters:

        * ‘oids’ – tuple of OIDs of the PostgreSQL type to convert.  It
          should probably contain the oid of the array type (e.g.  the
          ‘typarray’ field in the ‘pg_type’ table).

        * ‘name’ – the name of the new type adapter.

        * ‘base_caster’ – a Psycopg typecaster, e.g.  created using the
          *note new_type(): 101. function.  The caster should be able to
          parse a single item of the desired type.

     New in version 2.4.3.

          Note: The function can be used to create a generic array
          typecaster, returning a list of strings: just use *note
          psycopg2.STRING: a6. as base typecaster.  For instance, if you
          want to receive an array of ‘macaddr’ from the database, each
          address represented by string, you can use:

               # select typarray from pg_type where typname = 'macaddr' -> 1040
               psycopg2.extensions.register_type(
                   psycopg2.extensions.new_array_type(
                       (1040,), 'MACADDR[]', psycopg2.STRING))

 -- Function: psycopg2.extensions.register_type (obj[, scope])

     Register a type caster created using *note new_type(): 101.

     If `scope' is specified, it should be a *note connection: 2c. or a
     *note cursor: 2d.: the type caster will be effective only limited
     to the specified object.  Otherwise it will be globally registered.

 -- Data: psycopg2.extensions.string_types

     The global register of type casters.

 -- Data: psycopg2.extensions.encodings

     Mapping from PostgreSQL encoding(1) to Python encoding(2) names.
     Used by Psycopg when adapting or casting unicode strings.  See
     *note Unicode handling: 49.

   ---------- Footnotes ----------

   (1) https://www.postgresql.org/docs/current/static/multibyte.html

   (2) https://docs.python.org/library/codecs.html#standard-encodings


File: psycopg.info,  Node: Additional exceptions,  Next: Coroutines support functions,  Prev: Database types casting functions,  Up: psycopg2 extensions – Extensions to the DB API

7.4 Additional exceptions
=========================

The module exports a few exceptions in addition to the *note standard
ones: 8e. defined by the DB API 2.0(1).

     Note: From psycopg 2.8 these error classes are also exposed by the
     *note psycopg2.errors: 2. module.

 -- Exception: psycopg2.extensions.QueryCanceledError

     (subclasses *note OperationalError: 99.)

     Error related to SQL query cancellation.  It can be trapped
     specifically to detect a timeout.

     New in version 2.0.7.

 -- Exception: psycopg2.extensions.TransactionRollbackError

     (subclasses *note OperationalError: 99.)

     Error causing transaction rollback (deadlocks, serialization
     failures, etc).  It can be trapped specifically to detect a
     deadlock.

     New in version 2.0.7.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0249/


File: psycopg.info,  Node: Coroutines support functions,  Next: Other functions,  Prev: Additional exceptions,  Up: psycopg2 extensions – Extensions to the DB API

7.5 Coroutines support functions
================================

These functions are used to set and retrieve the callback function for
*note cooperation with coroutine libraries: 6d.

New in version 2.2.


File: psycopg.info,  Node: Other functions,  Next: Isolation level constants,  Prev: Coroutines support functions,  Up: psycopg2 extensions – Extensions to the DB API

7.6 Other functions
===================

 -- Function: psycopg2.extensions.libpq_version ()

     Return the version number of the ‘libpq’ dynamic library loaded as
     an integer, in the same format of *note server_version: 77.

     Raise *note NotSupportedError: 9d. if the ‘psycopg2’ module was
     compiled with a ‘libpq’ version lesser than 9.1 (which can be
     detected by the *note __libpq_version__: 8c. constant).

     New in version 2.7.

     See also
     ........

     libpq docs for PQlibVersion()(1).

 -- Function: psycopg2.extensions.make_dsn (dsn=None, **kwargs)

     Create a valid connection string from arguments.

     Put together the arguments in `kwargs' into a connection string.
     If `dsn' is specified too, merge the arguments coming from both the
     sources.  If the same argument name is specified in both the
     sources, the `kwargs' value overrides the `dsn' value.

     The input arguments are validated: the output should always be a
     valid connection string (as far as *note parse_dsn(): 88. is
     concerned).  If not raise *note ProgrammingError: 9c.

     Example:

          >>> from psycopg2.extensions import make_dsn
          >>> make_dsn('dbname=foo host=example.com', password="s3cr3t")
          'host=example.com password=s3cr3t dbname=foo'

     New in version 2.7.

 -- Function: psycopg2.extensions.parse_dsn (dsn)

     Parse connection string into a dictionary of keywords and values.

     Parsing is delegated to the libpq: different versions of the client
     library may support different formats or parameters (for example,
     connection URIs(2) are only supported from libpq 9.2).  Raise *note
     ProgrammingError: 9c. if the `dsn' is not valid.

     Example:

          >>> from psycopg2.extensions import parse_dsn
          >>> parse_dsn('dbname=test user=postgres password=secret')
          {'password': 'secret', 'user': 'postgres', 'dbname': 'test'}
          >>> parse_dsn("postgresql://someone@example.com/somedb?connect_timeout=10")
          {'host': 'example.com', 'user': 'someone', 'dbname': 'somedb', 'connect_timeout': '10'}

     New in version 2.7.

     See also
     ........

     libpq docs for PQconninfoParse()(3).

 -- Function: psycopg2.extensions.quote_ident (str, scope)

     Return quoted identifier according to PostgreSQL quoting rules.

     The `scope' must be a *note connection: 2c. or a *note cursor: 2d,
     the underlying connection encoding is used for any necessary
     character conversion.

     New in version 2.7.

     See also
     ........

     libpq docs for PQescapeIdentifier()(4)

 -- Method: psycopg2.extensions.encrypt_password (password, user,
          scope=None, algorithm=None)

     Return the encrypted form of a PostgreSQL password.


     Parameters:

        * ‘password’ – the cleartext password to encrypt

        * ‘user’ – the name of the user to use the password for

        * ‘scope’ (*note connection: 2c. or *note cursor: 2d.) – the
          scope to encrypt the password into; if `algorithm' is ‘md5’ it
          can be ‘None’

        * ‘algorithm’ – the password encryption algorithm to use

     The `algorithm' ‘md5’ is always supported.  Other algorithms are
     only supported if the client libpq version is at least 10 and may
     require a compatible server version: check the PostgreSQL
     encryption documentation(5) to know the algorithms supported by
     your server.

     Using ‘None’ as `algorithm' will result in querying the server to
     know the current server password encryption setting, which is a
     blocking operation: query the server separately and specify a value
     for `algorithm' if you want to maintain a non-blocking behaviour.

     New in version 2.8.

     See also
     ........

     PostgreSQL docs for the password_encryption(6) setting, libpq
     PQencryptPasswordConn()(7), PQencryptPassword()(8) functions.

   ---------- Footnotes ----------

   (1) 
https://www.postgresql.org/docs/current/static/libpq-misc.html#LIBPQ-PQLIBVERSION

   (2) 
https://www.postgresql.org/docs/current/static/libpq-connect.html#LIBPQ-CONNSTRING

   (3) 
https://www.postgresql.org/docs/current/static/libpq-connect.html#LIBPQ-PQCONNINFOPARSE

   (4) 
https://www.postgresql.org/docs/current/static/libpq-exec.html#LIBPQ-PQESCAPEIDENTIFIER

   (5) 
https://www.postgresql.org/docs/current/static/encryption-options.html

   (6) 
https://www.postgresql.org/docs/current/static/runtime-config-connection.html#GUC-PASSWORD-ENCRYPTION

   (7) 
https://www.postgresql.org/docs/current/static/libpq-misc.html#LIBPQ-PQENCRYPTPASSWORDCONN

   (8) 
https://www.postgresql.org/docs/current/static/libpq-misc.html#LIBPQ-PQENCRYPTPASSWORD


File: psycopg.info,  Node: Isolation level constants,  Next: Transaction status constants,  Prev: Other functions,  Up: psycopg2 extensions – Extensions to the DB API

7.7 Isolation level constants
=============================

Psycopg2 *note connection: 2c. objects hold informations about the
PostgreSQL transaction isolation level(1).  By default Psycopg doesn’t
change the default configuration of the server (*note
ISOLATION_LEVEL_DEFAULT: bc.); the default for PostgreSQL servers is
typically ‘READ COMMITTED’, but this may be changed in the server
configuration files.  A different isolation level can be set through the
*note set_isolation_level(): b0. or *note set_session(): 63. methods.
The level can be set to one of the following constants:

 -- Data: psycopg2.extensions.ISOLATION_LEVEL_AUTOCOMMIT

     No transaction is started when commands are executed and no *note
     commit(): 2f. or *note rollback(): 30. is required.  Some
     PostgreSQL command such as ‘CREATE DATABASE’ or ‘VACUUM’ can’t run
     into a transaction: to run such command use:

          >>> conn.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)

     See also *note Transactions control: 60.

 -- Data: psycopg2.extensions.ISOLATION_LEVEL_READ_UNCOMMITTED

     The ‘READ UNCOMMITTED’ isolation level is defined in the SQL
     standard but not available in the MVCC (Multiversion concurrency
     control) model of PostgreSQL: it is replaced by the stricter ‘READ
     COMMITTED’.

 -- Data: psycopg2.extensions.ISOLATION_LEVEL_READ_COMMITTED

     This is usually the default PostgreSQL value, but a different
     default may be set in the database configuration.

     A new transaction is started at the first *note execute(): 31.
     command on a cursor and at each new ‘execute()’ after a *note
     commit(): 2f. or a *note rollback(): 30.  The transaction runs in
     the PostgreSQL ‘READ COMMITTED’ isolation level: a ‘SELECT’ query
     sees only data committed before the query began; it never sees
     either uncommitted data or changes committed during query execution
     by concurrent transactions.

     See also
     ........

     Read Committed Isolation Level(2) in PostgreSQL documentation.

 -- Data: psycopg2.extensions.ISOLATION_LEVEL_REPEATABLE_READ

     As in ‘ISOLATION_LEVEL_READ_COMMITTED’, a new transaction is
     started at the first *note execute(): 31. command.  Transactions
     run at a ‘REPEATABLE READ’ isolation level: all the queries in a
     transaction see a snapshot as of the start of the transaction, not
     as of the start of the current query within the transaction.
     However applications using this level must be prepared to retry
     transactions due to serialization failures.

     While this level provides a guarantee that each transaction sees a
     completely stable view of the database, this view will not
     necessarily always be consistent with some serial (one at a time)
     execution of concurrent transactions of the same level.

     Changed in version 2.4.2: The value was an alias for
     ‘ISOLATION_LEVEL_SERIALIZABLE’ before.  The two levels are distinct
     since PostgreSQL 9.1

     See also
     ........

     Repeatable Read Isolation Level(3) in PostgreSQL documentation.

 -- Data: psycopg2.extensions.ISOLATION_LEVEL_SERIALIZABLE

     As in ‘ISOLATION_LEVEL_READ_COMMITTED’, a new transaction is
     started at the first *note execute(): 31. command.  Transactions
     run at a ‘SERIALIZABLE’ isolation level.  This is the strictest
     transactions isolation level, equivalent to having the transactions
     executed serially rather than concurrently.  However applications
     using this level must be prepared to retry transactions due to
     serialization failures.

     Starting from PostgreSQL 9.1, this mode monitors for conditions
     which could make execution of a concurrent set of serializable
     transactions behave in a manner inconsistent with all possible
     serial (one at a time) executions of those transaction.  In
     previous version the behaviour was the same of the ‘REPEATABLE
     READ’ isolation level.

     See also
     ........

     Serializable Isolation Level(4) in PostgreSQL documentation.

 -- Data: psycopg2.extensions.ISOLATION_LEVEL_DEFAULT

     A new transaction is started at the first *note execute(): 31.
     command, but the isolation level is not explicitly selected by
     Psycopg: the server will use whatever level is defined in its
     configuration or by statements executed within the session outside
     Pyscopg control.  If you want to know what the value is you can use
     a query such as ‘show transaction_isolation’.

     New in version 2.7.

   ---------- Footnotes ----------

   (1) 
https://www.postgresql.org/docs/current/static/transaction-iso.html

   (2) 
https://www.postgresql.org/docs/current/static/transaction-iso.html#XACT-READ-COMMITTED

   (3) 
https://www.postgresql.org/docs/current/static/transaction-iso.html#XACT-REPEATABLE-READ

   (4) 
https://www.postgresql.org/docs/current/static/transaction-iso.html#XACT-SERIALIZABLE


File: psycopg.info,  Node: Transaction status constants,  Next: Connection status constants,  Prev: Isolation level constants,  Up: psycopg2 extensions – Extensions to the DB API

7.8 Transaction status constants
================================

These values represent the possible status of a transaction: the current
value can be read using the ‘connection.info.transaction_status’
property.

 -- Data: psycopg2.extensions.TRANSACTION_STATUS_IDLE

     The session is idle and there is no current transaction.

 -- Data: psycopg2.extensions.TRANSACTION_STATUS_ACTIVE

     A command is currently in progress.

 -- Data: psycopg2.extensions.TRANSACTION_STATUS_INTRANS

     The session is idle in a valid transaction block.

 -- Data: psycopg2.extensions.TRANSACTION_STATUS_INERROR

     The session is idle in a failed transaction block.

 -- Data: psycopg2.extensions.TRANSACTION_STATUS_UNKNOWN

     Reported if the connection with the server is bad.


File: psycopg.info,  Node: Connection status constants,  Next: Poll constants,  Prev: Transaction status constants,  Up: psycopg2 extensions – Extensions to the DB API

7.9 Connection status constants
===============================

These values represent the possible status of a connection: the current
value can be read from the *note status: b1. attribute.

It is possible to find the connection in other status than the one shown
below.  Those are the only states in which a working connection is
expected to be found during the execution of regular Python client code:
other states are for internal usage and Python code should not rely on
them.

 -- Data: psycopg2.extensions.STATUS_READY

     Connection established.  No transaction in progress.

 -- Data: psycopg2.extensions.STATUS_BEGIN

     Connection established.  A transaction is currently in progress.

 -- Data: psycopg2.extensions.STATUS_IN_TRANSACTION

     An alias for *note STATUS_BEGIN: 148.

 -- Data: psycopg2.extensions.STATUS_PREPARED

     The connection has been prepared for the second phase in a *note
     two-phase commit: 78. transaction.  The connection can’t be used to
     send commands to the database until the transaction is finished
     with *note tpc_commit(): 7d. or *note tpc_rollback(): 7e.

     New in version 2.3.


File: psycopg.info,  Node: Poll constants,  Next: Additional database types,  Prev: Connection status constants,  Up: psycopg2 extensions – Extensions to the DB API

7.10 Poll constants
===================

New in version 2.2.

These values can be returned by *note connection.poll(): c7. during
asynchronous connection and communication.  They match the values in the
libpq enum ‘PostgresPollingStatusType’.  See *note Asynchronous support:
a. and *note Support for coroutine libraries: 6d.

 -- Data: psycopg2.extensions.POLL_OK

     The data being read is available, or the file descriptor is ready
     for writing: reading or writing will not block.

 -- Data: psycopg2.extensions.POLL_READ

     Some data is being read from the backend, but it is not available
     yet on the client and reading would block.  Upon receiving this
     value, the client should wait for the connection file descriptor to
     be ready `for reading'.  For example:

          select.select([conn.fileno()], [], [])

 -- Data: psycopg2.extensions.POLL_WRITE

     Some data is being sent to the backend but the connection file
     descriptor can’t currently accept new data.  Upon receiving this
     value, the client should wait for the connection file descriptor to
     be ready `for writing'.  For example:

          select.select([], [conn.fileno()], [])

 -- Data: psycopg2.extensions.POLL_ERROR

     There was a problem during connection polling.  This value should
     actually never be returned: in case of poll error usually an
     exception containing the relevant details is raised.


File: psycopg.info,  Node: Additional database types,  Prev: Poll constants,  Up: psycopg2 extensions – Extensions to the DB API

7.11 Additional database types
==============================

The ‘extensions’ module includes typecasters for many standard
PostgreSQL types.  These objects allow the conversion of returned data
into Python objects.  All the typecasters are automatically registered,
except *note UNICODE: 4c. and *note UNICODEARRAY: 14f.: you can register
them using *note register_type(): 4d. in order to receive Unicode
objects instead of strings from the database.  See *note Unicode
handling: 49. for details.

 -- Data: psycopg2.extensions.BOOLEAN
 -- Data: psycopg2.extensions.BYTES
 -- Data: psycopg2.extensions.DATE
 -- Data: psycopg2.extensions.DECIMAL
 -- Data: psycopg2.extensions.FLOAT
 -- Data: psycopg2.extensions.INTEGER
 -- Data: psycopg2.extensions.INTERVAL
 -- Data: psycopg2.extensions.LONGINTEGER
 -- Data: psycopg2.extensions.TIME
 -- Data: psycopg2.extensions.UNICODE

     Typecasters for basic types.  Note that a few other ones (*note
     BINARY: a7, *note DATETIME: a9, *note NUMBER: a8, *note ROWID: aa,
     *note STRING: a6.) are exposed by the *note psycopg2: 0. module for
     DB API 2.0(1) compliance.

 -- Data: psycopg2.extensions.BINARYARRAY
 -- Data: psycopg2.extensions.BOOLEANARRAY
 -- Data: psycopg2.extensions.BYTESARRAY
 -- Data: psycopg2.extensions.DATEARRAY
 -- Data: psycopg2.extensions.DATETIMEARRAY
 -- Data: psycopg2.extensions.DECIMALARRAY
 -- Data: psycopg2.extensions.FLOATARRAY
 -- Data: psycopg2.extensions.INTEGERARRAY
 -- Data: psycopg2.extensions.INTERVALARRAY
 -- Data: psycopg2.extensions.LONGINTEGERARRAY
 -- Data: psycopg2.extensions.ROWIDARRAY
 -- Data: psycopg2.extensions.STRINGARRAY
 -- Data: psycopg2.extensions.TIMEARRAY
 -- Data: psycopg2.extensions.UNICODEARRAY

     Typecasters to convert arrays of sql types into Python lists.

 -- Data: psycopg2.extensions.PYDATE
 -- Data: psycopg2.extensions.PYDATETIME
 -- Data: psycopg2.extensions.PYDATETIMETZ
 -- Data: psycopg2.extensions.PYINTERVAL
 -- Data: psycopg2.extensions.PYTIME
 -- Data: psycopg2.extensions.PYDATEARRAY
 -- Data: psycopg2.extensions.PYDATETIMEARRAY
 -- Data: psycopg2.extensions.PYDATETIMETZARRAY
 -- Data: psycopg2.extensions.PYINTERVALARRAY
 -- Data: psycopg2.extensions.PYTIMEARRAY

     Typecasters to convert time-related data types to Python ‘datetime’
     objects.

 -- Data: psycopg2.extensions.MXDATE
 -- Data: psycopg2.extensions.MXDATETIME
 -- Data: psycopg2.extensions.MXDATETIMETZ
 -- Data: psycopg2.extensions.MXINTERVAL
 -- Data: psycopg2.extensions.MXTIME
 -- Data: psycopg2.extensions.MXDATEARRAY
 -- Data: psycopg2.extensions.MXDATETIMEARRAY
 -- Data: psycopg2.extensions.MXDATETIMETZARRAY
 -- Data: psycopg2.extensions.MXINTERVALARRAY
 -- Data: psycopg2.extensions.MXTIMEARRAY

     Typecasters to convert time-related data types to mx.DateTime(2)
     objects.  Only available if Psycopg was compiled with ‘mx’ support.

Changed in version 2.2: previously the *note DECIMAL: 152. typecaster
and the specific time-related typecasters (‘PY*’ and ‘MX*’) were not
exposed by the ‘extensions’ module.  In older versions they can be
imported from the implementation module ‘psycopg2._psycopg’.

New in version 2.7.2: the ‘*DATETIMETZ*’ objects.

New in version 2.8: the ‘BYTES’ and *note BYTESARRAY: 15a. objects.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0249/

   (2) https://www.egenix.com/products/python/mxBase/mxDateTime/


File: psycopg.info,  Node: psycopg2 extras – Miscellaneous goodies for Psycopg 2,  Next: psycopg2 errors – Exception classes mapping PostgreSQL errors,  Prev: psycopg2 extensions – Extensions to the DB API,  Up: Top

8 ‘psycopg2.extras’ – Miscellaneous goodies for Psycopg 2
*********************************************************

This module is a generic place used to hold little helper functions and
classes until a better place in the distribution is found.

* Menu:

* Connection and cursor subclasses::
* Replication support objects::
* Additional data types::
* Fast execution helpers::
* Coroutine support::


File: psycopg.info,  Node: Connection and cursor subclasses,  Next: Replication support objects,  Up: psycopg2 extras – Miscellaneous goodies for Psycopg 2

8.1 Connection and cursor subclasses
====================================

A few objects that change the way the results are returned by the cursor
or modify the object behavior in some other way.  Typically ‘cursor’
subclasses are passed as `cursor_factory' argument to *note connect():
2b. so that the connection’s *note cursor(): 2e. method will generate
objects of this class.  Alternatively a ‘cursor’ subclass can be used
one-off by passing it as the `cursor_factory' argument to the ‘cursor()’
method.

If you want to use a ‘connection’ subclass you can pass it as the
`connection_factory' argument of the ‘connect()’ function.

* Menu:

* Dictionary-like cursor::
* Real dictionary cursor::
* namedtuple cursor::
* Logging cursor::


File: psycopg.info,  Node: Dictionary-like cursor,  Next: Real dictionary cursor,  Up: Connection and cursor subclasses

8.1.1 Dictionary-like cursor
----------------------------

The dict cursors allow to access to the attributes of retrieved records
using an interface similar to the Python dictionaries instead of the
tuples.

     >>> dict_cur = conn.cursor(cursor_factory=psycopg2.extras.DictCursor)
     >>> dict_cur.execute("INSERT INTO test (num, data) VALUES(%s, %s)",
     ...                  (100, "abc'def"))
     >>> dict_cur.execute("SELECT * FROM test")
     >>> rec = dict_cur.fetchone()
     >>> rec['id']
     1
     >>> rec['num']
     100
     >>> rec['data']
     "abc'def"

The records still support indexing as the original tuple:

     >>> rec[2]
     "abc'def"


File: psycopg.info,  Node: Real dictionary cursor,  Next: namedtuple cursor,  Prev: Dictionary-like cursor,  Up: Connection and cursor subclasses

8.1.2 Real dictionary cursor
----------------------------


File: psycopg.info,  Node: namedtuple cursor,  Next: Logging cursor,  Prev: Real dictionary cursor,  Up: Connection and cursor subclasses

8.1.3 ‘namedtuple’ cursor
-------------------------

New in version 2.3.


File: psycopg.info,  Node: Logging cursor,  Prev: namedtuple cursor,  Up: Connection and cursor subclasses

8.1.4 Logging cursor
--------------------

     Note: Queries that are executed with *note cursor.executemany():
     32. are not logged.


File: psycopg.info,  Node: Replication support objects,  Next: Additional data types,  Prev: Connection and cursor subclasses,  Up: psycopg2 extras – Miscellaneous goodies for Psycopg 2

8.2 Replication support objects
===============================

See *note Replication protocol support: 107. for an introduction to the
topic.

The following replication types are defined:

 -- Data: psycopg2.extras.REPLICATION_LOGICAL

 -- Data: psycopg2.extras.REPLICATION_PHYSICAL

The individual messages in the replication stream are represented by
‘ReplicationMessage’ objects (both logical and physical type):


File: psycopg.info,  Node: Additional data types,  Next: Fast execution helpers,  Prev: Replication support objects,  Up: psycopg2 extras – Miscellaneous goodies for Psycopg 2

8.3 Additional data types
=========================

* Menu:

* JSON adaptation::
* Hstore data type::
* Composite types casting::
* Range data types::
* UUID data type::
* Networking data types::


File: psycopg.info,  Node: JSON adaptation,  Next: Hstore data type,  Up: Additional data types

8.3.1 JSON adaptation
---------------------

New in version 2.5.

Changed in version 2.5.4: added ‘jsonb’ support.  In previous versions
‘jsonb’ values are returned as strings.  See *note the FAQ: 188. for a
workaround.

Psycopg can adapt Python objects to and from the PostgreSQL json and
jsonb(1) types.  With PostgreSQL 9.2 and following versions adaptation
is available out-of-the-box.  To use JSON data with previous database
versions (either with the 9.1 json extension(2), but even if you want to
convert text fields to JSON) you can use the ‘register_json()’ function.

The Python json(3) module is used by default to convert Python objects
to JSON and to parse data from the database.

In order to pass a Python object to the database as query argument you
can use the ‘Json’ adapter:

     curs.execute("insert into mytable (jsondata) values (%s)",
         [Json({'a': 100})])

Reading from the database, ‘json’ and ‘jsonb’ values will be
automatically converted to Python objects.

     Note: If you are using the PostgreSQL ‘json’ data type but you want
     to read it as string in Python instead of having it parsed, your
     can either cast the column to ‘text’ in the query (it is an
     efficient operation, that doesn’t involve a copy):

          cur.execute("select jsondata::text from mytable")

     or you can register a no-op ‘loads()’ function with
     ‘register_default_json()’:

          psycopg2.extras.register_default_json(loads=lambda x: x)

     Note: You can use *note register_adapter(): fe. to adapt any Python
     dictionary to JSON, either registering ‘Json’ or any subclass or
     factory creating a compatible adapter:

          psycopg2.extensions.register_adapter(dict, psycopg2.extras.Json)

     This setting is global though, so it is not compatible with similar
     adapters such as the one registered by ‘register_hstore()’.  Any
     other object supported by JSON can be registered the same way, but
     this will clobber the default adaptation rule, so be careful to
     unwanted side effects.

If you want to customize the adaptation from Python to PostgreSQL you
can either provide a custom ‘dumps()’ function to ‘Json’:

     curs.execute("insert into mytable (jsondata) values (%s)",
         [Json({'a': 100}, dumps=simplejson.dumps)])

or you can subclass it overriding the ‘dumps()’ method:

     class MyJson(Json):
         def dumps(self, obj):
             return simplejson.dumps(obj)

     curs.execute("insert into mytable (jsondata) values (%s)",
         [MyJson({'a': 100})])

Customizing the conversion from PostgreSQL to Python can be done passing
a custom ‘loads()’ function to ‘register_json()’.  For the builtin data
types (‘json’ from PostgreSQL 9.2, ‘jsonb’ from PostgreSQL 9.4) use
‘register_default_json()’ and ‘register_default_jsonb()’.  For example,
if you want to convert the float values from ‘json’ into Decimal(4) you
can use:

     loads = lambda x: json.loads(x, parse_float=Decimal)
     psycopg2.extras.register_json(conn, loads=loads)

Or, if you want to use an alternative JSON module implementation, such
as the faster UltraJSON(5), you can use:

     psycopg2.extras.register_default_json(loads=ujson.loads, globally=True)
     psycopg2.extras.register_default_jsonb(loads=ujson.loads, globally=True)

   ---------- Footnotes ----------

   (1) https://www.postgresql.org/docs/current/static/datatype-json.html

   (2) 
http://people.planetpostgresql.org/andrew/index.php?/archives/255-JSON-for-PG-9.2-...-and-now-for-9.1!.html

   (3) https://docs.python.org/3/library/json.html#module-json

   (4) https://docs.python.org/3/library/decimal.html#decimal.Decimal

   (5) https://pypi.org/project/ujson/


File: psycopg.info,  Node: Hstore data type,  Next: Composite types casting,  Prev: JSON adaptation,  Up: Additional data types

8.3.2 Hstore data type
----------------------

New in version 2.3.

The hstore(1) data type is a key-value store embedded in PostgreSQL. It
has been available for several server versions but with the release 9.0
it has been greatly improved in capacity and usefulness with the
addition of many functions.  It supports GiST or GIN indexes allowing
search by keys or key/value pairs as well as regular BTree indexes for
equality, uniqueness etc.

Psycopg can convert Python ‘dict’ objects to and from ‘hstore’
structures.  Only dictionaries with string/unicode keys and values are
supported.  ‘None’ is also allowed as value but not as a key.  Psycopg
uses a more efficient ‘hstore’ representation when dealing with
PostgreSQL 9.0 but previous server versions are supported as well.  By
default the adapter/typecaster are disabled: they can be enabled using
the ‘register_hstore()’ function.

   ---------- Footnotes ----------

   (1) https://www.postgresql.org/docs/current/static/hstore.html


File: psycopg.info,  Node: Composite types casting,  Next: Range data types,  Prev: Hstore data type,  Up: Additional data types

8.3.3 Composite types casting
-----------------------------

New in version 2.4.

Using ‘register_composite()’ it is possible to cast a PostgreSQL
composite type (either created with the CREATE TYPE(1) command or
implicitly defined after a table row type) into a Python named tuple, or
into a regular tuple if collections.namedtuple()(2) is not found.

     >>> cur.execute("CREATE TYPE card AS (value int, suit text);")
     >>> psycopg2.extras.register_composite('card', cur)
     <psycopg2.extras.CompositeCaster object at 0x...>

     >>> cur.execute("select (8, 'hearts')::card")
     >>> cur.fetchone()[0]
     card(value=8, suit='hearts')

Nested composite types are handled as expected, provided that the type
of the composite components are registered as well.

     >>> cur.execute("CREATE TYPE card_back AS (face card, back text);")
     >>> psycopg2.extras.register_composite('card_back', cur)
     <psycopg2.extras.CompositeCaster object at 0x...>

     >>> cur.execute("select ((8, 'hearts'), 'blue')::card_back")
     >>> cur.fetchone()[0]
     card_back(face=card(value=8, suit='hearts'), back='blue')

Adaptation from Python tuples to composite types is automatic instead
and requires no adapter registration.
     Note: If you want to convert PostgreSQL composite types into
     something different than a ‘namedtuple’ you can subclass the
     ‘CompositeCaster’ overriding ‘make()’.  For example, if you want to
     convert your type into a Python dictionary you can use:

          >>> class DictComposite(psycopg2.extras.CompositeCaster):
          ...     def make(self, values):
          ...         return dict(zip(self.attnames, values))

          >>> psycopg2.extras.register_composite('card', cur,
          ...     factory=DictComposite)

          >>> cur.execute("select (8, 'hearts')::card")
          >>> cur.fetchone()[0]
          {'suit': 'hearts', 'value': 8}

   ---------- Footnotes ----------

   (1) 
https://www.postgresql.org/docs/current/static/sql-createtype.html

   (2) 
https://docs.python.org/3/library/collections.html#collections.namedtuple


File: psycopg.info,  Node: Range data types,  Next: UUID data type,  Prev: Composite types casting,  Up: Additional data types

8.3.4 Range data types
----------------------

New in version 2.5.

Psycopg offers a ‘Range’ Python type and supports adaptation between
them and PostgreSQL range(1) types.  Builtin ‘range’ types are supported
out-of-the-box; user-defined ‘range’ types can be adapted using
‘register_range()’.

The following ‘Range’ subclasses map builtin PostgreSQL ‘range’ types to
Python objects: they have an adapter registered so their instances can
be passed as query arguments.  ‘range’ values read from database queries
are automatically casted into instances of these classes.

     Note: Python lacks a representation for ‘infinity’ date so Psycopg
     converts the value to ‘date.max’ and such.  When written into the
     database these dates will assume their literal value (e.g.
     ‘9999-12-31’ instead of ‘infinity’).  Check *note Infinite dates
     handling: 57. for an example of an alternative adapter to map
     ‘date.max’ to ‘infinity’.  An alternative dates adapter will be
     used automatically by the ‘DateRange’ adapter and so on.

Custom ‘range’ types (created with CREATE TYPE(2) ‘... AS RANGE’) can be
adapted to a custom ‘Range’ subclass:

   ---------- Footnotes ----------

   (1) https://www.postgresql.org/docs/current/static/rangetypes.html

   (2) 
https://www.postgresql.org/docs/current/static/sql-createtype.html


File: psycopg.info,  Node: UUID data type,  Next: Networking data types,  Prev: Range data types,  Up: Additional data types

8.3.5 UUID data type
--------------------

New in version 2.0.9.

Changed in version 2.0.13: added UUID array support.

     >>> psycopg2.extras.register_uuid()
     <psycopg2._psycopg.type object at 0x...>

     >>> # Python UUID can be used in SQL queries
     >>> import uuid
     >>> my_uuid = uuid.UUID('{12345678-1234-5678-1234-567812345678}')
     >>> psycopg2.extensions.adapt(my_uuid).getquoted()
     "'12345678-1234-5678-1234-567812345678'::uuid"

     >>> # PostgreSQL UUID are transformed into Python UUID objects.
     >>> cur.execute("SELECT 'a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11'::uuid")
     >>> cur.fetchone()[0]
     UUID('a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11')


File: psycopg.info,  Node: Networking data types,  Prev: UUID data type,  Up: Additional data types

8.3.6 Networking data types
---------------------------

By default Psycopg casts the PostgreSQL networking data types (‘inet’,
‘cidr’, ‘macaddr’) into ordinary strings; array of such types are
converted into lists of strings.

Changed in version 2.7: in previous version array of networking types
were not treated as arrays.

     >>> psycopg2.extras.register_inet()
     <psycopg2._psycopg.type object at 0x...>

     >>> cur.mogrify("SELECT %s", (Inet('127.0.0.1/32'),))
     "SELECT E'127.0.0.1/32'::inet"

     >>> cur.execute("SELECT '192.168.0.1/24'::inet")
     >>> cur.fetchone()[0].addr
     '192.168.0.1/24'


File: psycopg.info,  Node: Fast execution helpers,  Next: Coroutine support,  Prev: Additional data types,  Up: psycopg2 extras – Miscellaneous goodies for Psycopg 2

8.4 Fast execution helpers
==========================

The current implementation of *note executemany(): 32. is (using an
extremely charitable understatement) not particularly performing.  These
functions can be used to speed up the repeated execution of a statement
against a set of parameters.  By reducing the number of server
roundtrips the performance can be orders of magnitude better(1) than
using ‘executemany()’.

     Note: ‘execute_batch()’ can be also used in conjunction with
     PostgreSQL prepared statements using PREPARE(2), EXECUTE(3),
     DEALLOCATE(4). Instead of executing:

          execute_batch(cur,
              "big and complex SQL with %s %s params",
              params_list)

     it is possible to execute something like:

          cur.execute("PREPARE stmt AS big and complex SQL with $1 $2 params")
          execute_batch(cur, "EXECUTE stmt (%s, %s)", params_list)
          cur.execute("DEALLOCATE stmt")

     which may bring further performance benefits: if the operation to
     perform is complex, every single execution will be faster as the
     query plan is already cached; furthermore the amount of data to
     send on the server will be lesser (one ‘EXECUTE’ per param set
     instead of the whole, likely longer, statement).

   ---------- Footnotes ----------

   (1) 
https://github.com/psycopg/psycopg2/issues/491#issuecomment-276551038

   (2) https://www.postgresql.org/docs/current/static/sql-prepare.html

   (3) https://www.postgresql.org/docs/current/static/sql-execute.html

   (4) 
https://www.postgresql.org/docs/current/static/sql-deallocate.html


File: psycopg.info,  Node: Coroutine support,  Prev: Fast execution helpers,  Up: psycopg2 extras – Miscellaneous goodies for Psycopg 2

8.5 Coroutine support
=====================


File: psycopg.info,  Node: psycopg2 errors – Exception classes mapping PostgreSQL errors,  Next: psycopg2 sql – SQL string composition,  Prev: psycopg2 extras – Miscellaneous goodies for Psycopg 2,  Up: Top

9 ‘psycopg2.errors’ – Exception classes mapping PostgreSQL errors
*****************************************************************

New in version 2.8.

Changed in version 2.8.4: added errors introduced in PostgreSQL 12

Changed in version 2.8.6: added errors introduced in PostgreSQL 13

This module exposes the classes psycopg raises upon receiving an error
from the database with a ‘SQLSTATE’ value attached (available in the
*note pgcode: 93. attribute).  The content of the module is generated
from the PostgreSQL source code and includes classes for every error
defined by PostgreSQL in versions between 9.1 and 13.

Every class in the module is named after what referred as “condition
name” in the documentation(1), converted to CamelCase: e.g.  the error
22012, ‘division_by_zero’ is exposed by this module as the class
‘DivisionByZero’.

Every exception class is a subclass of one of the *note standard DB-API
exception: 8e. and expose the *note Error: 91. interface.  Each class’
superclass is what used to be raised by psycopg in versions before the
introduction of this module, so everything should be compatible with
previously written code catching one the DB-API class: if your code used
to catch ‘IntegrityError’ to detect a duplicate entry, it will keep on
working even if a more specialised subclass such as ‘UniqueViolation’ is
raised.

The new classes allow a more idiomatic way to check and process a
specific error among the many the database may return.  For instance, in
order to check that a table is locked, the following code could have
been used previously:

     try:
         cur.execute("LOCK TABLE mytable IN ACCESS EXCLUSIVE MODE NOWAIT")
     except psycopg2.OperationalError as e:
         if e.pgcode == psycopg2.errorcodes.LOCK_NOT_AVAILABLE:
             locked = True
         else:
             raise

While this method is still available, the specialised class allows for a
more idiomatic error handler:

     try:
         cur.execute("LOCK TABLE mytable IN ACCESS EXCLUSIVE MODE NOWAIT")
     except psycopg2.errors.LockNotAvailable:
         locked = True

* Menu:

* SQLSTATE exception classes::

   ---------- Footnotes ----------

   (1) 
https://www.postgresql.org/docs/current/static/errcodes-appendix.html#ERRCODES-TABLE


File: psycopg.info,  Node: SQLSTATE exception classes,  Up: psycopg2 errors – Exception classes mapping PostgreSQL errors

9.1 SQLSTATE exception classes
==============================

The following table contains the list of all the SQLSTATE classes
exposed by the module.

Note that, for completeness, the module also exposes all the *note
DB-API-defined exceptions: 8e. and *note a few psycopg-specific ones:
134. exposed by the ‘extensions’ module, which are not listed here.


File: psycopg.info,  Node: psycopg2 sql – SQL string composition,  Next: psycopg2 tz – tzinfo implementations for Psycopg 2,  Prev: psycopg2 errors – Exception classes mapping PostgreSQL errors,  Up: Top

10 ‘psycopg2.sql’ – SQL string composition
******************************************

New in version 2.7.

The module contains objects and functions useful to generate SQL
dynamically, in a convenient and safe way.  SQL identifiers (e.g.  names
of tables and fields) cannot be passed to the *note execute(): 31.
method like query arguments:

     # This will not work
     table_name = 'my_table'
     cur.execute("insert into %s values (%s, %s)", [table_name, 10, 20])

The SQL query should be composed before the arguments are merged, for
instance:

     # This works, but it is not optimal
     table_name = 'my_table'
     cur.execute(
         "insert into %s values (%%s, %%s)" % table_name,
         [10, 20])

This sort of works, but it is an accident waiting to happen: the table
name may be an invalid SQL literal and need quoting; even more serious
is the security problem in case the table name comes from an untrusted
source.  The name should be escaped using *note quote_ident(): 13a.:

     # This works, but it is not optimal
     table_name = 'my_table'
     cur.execute(
         "insert into %s values (%%s, %%s)" % ext.quote_ident(table_name),
         [10, 20])

This is now safe, but it somewhat ad-hoc.  In case, for some reason, it
is necessary to include a value in the query string (as opposite as in a
value) the merging rule is still different (*note adapt(): fb. should be
used…).  It is also still relatively dangerous: if ‘quote_ident()’ is
forgotten somewhere, the program will usually work, but will eventually
crash in the presence of a table or field name with containing
characters to escape, or will present a potentially exploitable
weakness.

The objects exposed by the ‘psycopg2.sql’ module allow generating SQL
statements on the fly, separating clearly the variable parts of the
statement from the query parameters:

     from psycopg2 import sql

     cur.execute(
         sql.SQL("insert into {} values (%s, %s)")
             .format(sql.Identifier('my_table')),
         [10, 20])

* Menu:

* Module usage::
* sql objects::


File: psycopg.info,  Node: Module usage,  Next: sql objects,  Up: psycopg2 sql – SQL string composition

10.1 Module usage
=================

Usually you should express the template of your query as an ‘SQL’
instance with ‘{}’-style placeholders and use ‘format()’ to merge the
variable parts into them, all of which must be ‘Composable’ subclasses.
You can still have ‘%s’-style placeholders in your query and pass values
to *note execute(): 31.: such value placeholders will be untouched by
‘format()’:

     query = sql.SQL("select {field} from {table} where {pkey} = %s").format(
         field=sql.Identifier('my_name'),
         table=sql.Identifier('some_table'),
         pkey=sql.Identifier('id'))

The resulting object is meant to be passed directly to cursor methods
such as *note execute(): 31, *note executemany(): 32, *note
copy_expert(): 72, but can also be used to compose a query as a Python
string, using the ‘as_string()’ method:

     cur.execute(query, (42,))

If part of your query is a variable sequence of arguments, such as a
comma-separated list of field names, you can use the ‘SQL.join()’ method
to pass them to the query:

     query = sql.SQL("select {fields} from {table}").format(
         fields=sql.SQL(',').join([
             sql.Identifier('field1'),
             sql.Identifier('field2'),
             sql.Identifier('field3'),
         ]),
         table=sql.Identifier('some_table'))


File: psycopg.info,  Node: sql objects,  Prev: Module usage,  Up: psycopg2 sql – SQL string composition

10.2 ‘sql’ objects
==================

The ‘sql’ objects are in the following inheritance hierarchy:

     ‘Composable’: the base class exposing the common interface 
     ‘|__’ ‘SQL’: a literal snippet of an SQL query 
     ‘|__’ ‘Identifier’: a PostgreSQL identifier or dot-separated sequence of identifiers 
     ‘|__’ ‘Literal’: a value hardcoded into a query 
     ‘|__’ ‘Placeholder’: a ‘%s’-style placeholder whose value will be added later e.g. by *note execute(): 31. 
     ‘|__’ ‘Composed’: a sequence of ‘Composable’ instances. 


File: psycopg.info,  Node: psycopg2 tz – tzinfo implementations for Psycopg 2,  Next: psycopg2 pool – Connections pooling,  Prev: psycopg2 sql – SQL string composition,  Up: Top

11 ‘psycopg2.tz’ – ‘tzinfo’ implementations for Psycopg 2
*********************************************************

This module holds two different tzinfo implementations that can be used
as the ‘tzinfo’ argument to datetime(1) constructors, directly passed to
Psycopg functions or used to set the *note cursor.tzinfo_factory: f0.
attribute in cursors.

   ---------- Footnotes ----------

   (1) https://docs.python.org/3/library/datetime.html#datetime.datetime


File: psycopg.info,  Node: psycopg2 pool – Connections pooling,  Next: psycopg2 errorcodes – Error codes defined by PostgreSQL,  Prev: psycopg2 tz – tzinfo implementations for Psycopg 2,  Up: Top

12 ‘psycopg2.pool’ – Connections pooling
****************************************

Creating new PostgreSQL connections can be an expensive operation.  This
module offers a few pure Python classes implementing simple connection
pooling directly in the client application.

 -- Class: psycopg2.pool.AbstractConnectionPool (minconn, maxconn,
          *args, **kwargs)

     Base class implementing generic key-based pooling code.

     New `minconn' connections are created automatically.  The pool will
     support a maximum of about `maxconn' connections.  `*args' and
     `**kwargs' are passed to the *note connect(): 2b. function.

     The following methods are expected to be implemented by subclasses:

      -- Method: getconn (key=None)

          Get a free connection from the pool.

          The `key' parameter is optional: if used, the connection will
          be associated to the key and calling ‘getconn()’ with the same
          key again will return the same connection.

      -- Method: putconn (conn, key=None, close=False)

          Put away a connection.

          If `close' is ‘True’, discard the connection from the pool.
          `key' should be used consistently with *note getconn(): 1a6.

      -- Method: closeall ()

          Close all the connections handled by the pool.

          Note that all the connections are closed, including ones
          eventually in use by the application.

The following classes are *note AbstractConnectionPool: 1a5. subclasses
ready to be used.


File: psycopg.info,  Node: psycopg2 errorcodes – Error codes defined by PostgreSQL,  Next: Frequently Asked Questions,  Prev: psycopg2 pool – Connections pooling,  Up: Top

13 ‘psycopg2.errorcodes’ – Error codes defined by PostgreSQL
************************************************************

New in version 2.0.6.

This module contains symbolic names for all PostgreSQL error codes and
error classes codes.  Subclasses of *note Error: 91. make the PostgreSQL
error code available in the *note pgcode: 93. attribute.

From PostgreSQL documentation:

     All messages emitted by the PostgreSQL server are assigned
     five-character error codes that follow the SQL standard’s
     conventions for ‘SQLSTATE’ codes.  Applications that need to know
     which error condition has occurred should usually test the error
     code, rather than looking at the textual error message.  The error
     codes are less likely to change across PostgreSQL releases, and
     also are not subject to change due to localization of error
     messages.  Note that some, but not all, of the error codes produced
     by PostgreSQL are defined by the SQL standard; some additional
     error codes for conditions not defined by the standard have been
     invented or borrowed from other databases.

     According to the standard, the first two characters of an error
     code denote a class of errors, while the last three characters
     indicate a specific condition within that class.  Thus, an
     application that does not recognize the specific error code can
     still be able to infer what to do from the error class.

See also
........

PostgreSQL Error Codes table(1)

An example of the available constants defined in the module:

     >>> errorcodes.CLASS_SYNTAX_ERROR_OR_ACCESS_RULE_VIOLATION
     '42'
     >>> errorcodes.UNDEFINED_TABLE
     '42P01'

Constants representing all the error values defined by PostgreSQL
versions between 8.1 and 13 are included in the module.

   ---------- Footnotes ----------

   (1) 
https://www.postgresql.org/docs/current/static/errcodes-appendix.html#ERRCODES-TABLE


File: psycopg.info,  Node: Frequently Asked Questions,  Next: Release notes,  Prev: psycopg2 errorcodes – Error codes defined by PostgreSQL,  Up: Top

14 Frequently Asked Questions
*****************************

Here are a few gotchas you may encounter using *note psycopg2: 0.  Feel
free to suggest new entries!

* Menu:

* Meta::
* Problems with transactions handling::
* Problems with type conversions::
* Best practices::
* Problems compiling and installing psycopg2::


File: psycopg.info,  Node: Meta,  Next: Problems with transactions handling,  Up: Frequently Asked Questions

14.1 Meta
=========

How do I ask a question?

        - Have you first checked if your question is answered already in
          the documentation?

        - If your question is about installing psycopg, have you checked
          the *note install FAQ: 26. and the *note install docs: 11.?

        - Have you googled for your error message?

        - If you haven’t found an answer yet, please write to the
          Mailing List(1).

        - If you haven’t found a bug, DO NOT write to the bug tracker to
          ask questions.  You will only get piro grumpy.

   ---------- Footnotes ----------

   (1) https://www.postgresql.org/list/psycopg/


File: psycopg.info,  Node: Problems with transactions handling,  Next: Problems with type conversions,  Prev: Meta,  Up: Frequently Asked Questions

14.2 Problems with transactions handling
========================================

Why does ‘psycopg2’ leave database sessions “idle in transaction”?

     Psycopg normally starts a new transaction the first time a query is
     executed, e.g.  calling *note cursor.execute(): 31, even if the
     command is a ‘SELECT’.  The transaction is not closed until an
     explicit *note commit(): 2f. or *note rollback(): 30.

     If you are writing a long-living program, you should probably make
     sure to call one of the transaction closing methods before leaving
     the connection unused for a long time (which may also be a few
     seconds, depending on the concurrency level in your database).
     Alternatively you can use a connection in *note autocommit: 62.
     mode to avoid a new transaction to be started at the first command.

I receive the error `current transaction is aborted, commands ignored until end of transaction block' and can’t do anything else!

     There was a problem `in the previous' command to the database,
     which resulted in an error.  The database will not recover
     automatically from this condition: you must run a *note rollback():
     30. before sending new commands to the session (if this seems too
     harsh, remember that PostgreSQL supports nested transactions using
     the SAVEPOINT(1) command).

Why do I get the error `current transaction is aborted, commands ignored until end of transaction block' when I use ‘multiprocessing’ (or any other forking system) and not when use ‘threading’?

     Psycopg’s connections can’t be shared across processes (but are
     thread safe).  If you are forking the Python process make sure to
     create a new connection in each forked child.  See *note Thread and
     process safety: 6c. for further informations.

   ---------- Footnotes ----------

   (1) https://www.postgresql.org/docs/current/static/sql-savepoint.html


File: psycopg.info,  Node: Problems with type conversions,  Next: Best practices,  Prev: Problems with transactions handling,  Up: Frequently Asked Questions

14.3 Problems with type conversions
===================================

Why does ‘cursor.execute()’ raise the exception `can’t adapt'?

     Psycopg converts Python objects in a SQL string representation by
     looking at the object class.  The exception is raised when you are
     trying to pass as query parameter an object for which there is no
     adapter registered for its class.  See *note Adapting new Python
     types to SQL syntax: e. for informations.

I can’t pass an integer or a float parameter to my query: it says `a number is required', but `it is' a number!

     In your query string, you always have to use ‘%s’ placeholders,
     even when passing a number.  All Python objects are converted by
     Psycopg in their SQL representation, so they get passed to the
     query as strings.  See *note Passing parameters to SQL queries: 38.

          >>> cur.execute("INSERT INTO numbers VALUES (%d)", (42,)) # WRONG
          >>> cur.execute("INSERT INTO numbers VALUES (%s)", (42,)) # correct

I try to execute a query but it fails with the error `not all arguments converted during string formatting' (or `object does not support indexing'). Why?

     Psycopg always require positional arguments to be passed as a
     sequence, even when the query takes a single parameter.  And
     remember that to make a single item tuple in Python you need a
     comma!  See *note Passing parameters to SQL queries: 38.

          >>> cur.execute("INSERT INTO foo VALUES (%s)", "bar")    # WRONG
          >>> cur.execute("INSERT INTO foo VALUES (%s)", ("bar"))  # WRONG
          >>> cur.execute("INSERT INTO foo VALUES (%s)", ("bar",)) # correct
          >>> cur.execute("INSERT INTO foo VALUES (%s)", ["bar"])  # correct

My database is Unicode, but I receive all the strings as UTF-8 ‘str’. Can I receive ‘unicode’ objects instead?

     The following magic formula will do the trick:

          psycopg2.extensions.register_type(psycopg2.extensions.UNICODE)
          psycopg2.extensions.register_type(psycopg2.extensions.UNICODEARRAY)

     See *note Unicode handling: 49. for the gory details.

My database is in mixed encoding. My program was working on Python 2 but Python 3 fails decoding the strings. How do I avoid decoding?

     From psycopg 2.8 you can use the following adapters to always
     return bytes from strings:

          psycopg2.extensions.register_type(psycopg2.extensions.BYTES)
          psycopg2.extensions.register_type(psycopg2.extensions.BYTESARRAY)

     See *note Unicode handling: 49. for an example.

Psycopg converts ‘decimal’/‘numeric’ database types into Python ‘Decimal’ objects. Can I have ‘float’ instead?

     You can register a customized adapter for PostgreSQL decimal type:

          DEC2FLOAT = psycopg2.extensions.new_type(
              psycopg2.extensions.DECIMAL.values,
              'DEC2FLOAT',
              lambda value, curs: float(value) if value is not None else None)
          psycopg2.extensions.register_type(DEC2FLOAT)

     See *note Type casting of SQL types into Python objects: 40. to
     read the relevant documentation.  If you find
     ‘psycopg2.extensions.DECIMAL’ not available, use
     ‘psycopg2._psycopg.DECIMAL’ instead.

Psycopg automatically converts PostgreSQL ‘json’ data into Python objects. How can I receive strings instead?

     The easiest way to avoid JSON parsing is to register a no-op
     function with ‘register_default_json()’:

          psycopg2.extras.register_default_json(loads=lambda x: x)

     See *note JSON adaptation: 186. for further details.

Psycopg converts ‘json’ values into Python objects but ‘jsonb’ values are returned as strings. Can ‘jsonb’ be converted automatically?

     Automatic conversion of ‘jsonb’ values is supported from Psycopg
     release 2.5.4.  For previous versions you can register the ‘json’
     typecaster on the ‘jsonb’ oids (which are known and not suppsed to
     change in future PostgreSQL versions):

          psycopg2.extras.register_json(oid=3802, array_oid=3807, globally=True)

     See *note JSON adaptation: 186. for further details.

How can I pass field/table names to a query?

     The arguments in the *note execute(): 31. methods can only
     represent data to pass to the query: they cannot represent a table
     or field name:

          # This doesn't work
          cur.execute("insert into %s values (%s)", ["my_table", 42])

     If you want to build a query dynamically you can use the objects
     exposed by the *note psycopg2.sql: 6. module:

          cur.execute(
              sql.SQL("insert into %s values (%%s)") % [sql.Identifier("my_table")],
              [42])

Transferring binary data from PostgreSQL 9.0 doesn’t work.

     PostgreSQL 9.0 uses by default the "hex" format(1) to transfer
     ‘bytea’ data: the format can’t be parsed by the libpq 8.4 and
     earlier.  The problem is solved in Psycopg 2.4.1, that uses its own
     parser for the ‘bytea’ format.  For previous Psycopg releases,
     three options to solve the problem are:

        - set the bytea_output(2) parameter to ‘escape’ in the server;

        - execute the database command ‘SET bytea_output TO escape;’ in
          the session before reading binary data;

        - upgrade the libpq library on the client to at least 9.0.

Arrays of `TYPE' are not casted to list.

     Arrays are only casted to list when their oid is known, and an
     array typecaster is registered for them.  If there is no
     typecaster, the array is returned unparsed from PostgreSQL (e.g.
     ‘{a,b,c}’).  It is easy to create a generic arrays typecaster,
     returning a list of array: an example is provided in the *note
     new_array_type(): 102. documentation.

   ---------- Footnotes ----------

   (1) 
https://www.postgresql.org/docs/current/static/datatype-binary.html

   (2) 
https://www.postgresql.org/docs/current/static/runtime-config-client.html#GUC-BYTEA-OUTPUT


File: psycopg.info,  Node: Best practices,  Next: Problems compiling and installing psycopg2,  Prev: Problems with type conversions,  Up: Frequently Asked Questions

14.4 Best practices
===================

When should I save and re-use a cursor as opposed to creating a new one as needed?

     Cursors are lightweight objects and creating lots of them should
     not pose any kind of problem.  But note that cursors used to fetch
     result sets will cache the data and use memory in proportion to the
     result set size.  Our suggestion is to almost always create a new
     cursor and dispose old ones as soon as the data is not required
     anymore (call *note close(): 6a. on them.)  The only exception are
     tight loops where one usually use the same cursor for a whole bunch
     of ‘INSERT’s or ‘UPDATE’s.

When should I save and re-use a connection as opposed to creating a new one as needed?

     Creating a connection can be slow (think of SSL over TCP) so the
     best practice is to create a single connection and keep it open as
     long as required.  It is also good practice to rollback or commit
     frequently (even after a single ‘SELECT’ statement) to make sure
     the backend is never left “idle in transaction”.  See also *note
     psycopg2.pool: 5. for lightweight connection pooling.

What are the advantages or disadvantages of using named cursors?

     The only disadvantages is that they use up resources on the server
     and that there is a little overhead because at least two queries
     (one to create the cursor and one to fetch the initial result set)
     are issued to the backend.  The advantage is that data is fetched
     one chunk at a time: using small *note fetchmany(): 35. values it
     is possible to use very little memory on the client and to skip or
     discard parts of the result set.

How do I interrupt a long-running query in an interactive shell?

     Normally the interactive shell becomes unresponsive to ‘Ctrl-C’
     when running a query.  Using a connection in green mode allows
     Python to receive and handle the interrupt, although it may leave
     the connection broken, if the async callback doesn’t handle the
     ‘KeyboardInterrupt’ correctly.

     Starting from psycopg 2.6.2, the ‘wait_select’ callback can handle
     a ‘Ctrl-C’ correctly.  For previous versions, you can use this
     implementation(1).

          >>> psycopg2.extensions.set_wait_callback(psycopg2.extras.wait_select)
          >>> cnn = psycopg2.connect('')
          >>> cur = cnn.cursor()
          >>> cur.execute("select pg_sleep(10)")
          ^C
          Traceback (most recent call last):
            File "<stdin>", line 1, in <module>
            QueryCanceledError: canceling statement due to user request

          >>> cnn.rollback()
          >>> # You can use the connection and cursor again from here

   ---------- Footnotes ----------

   (1) 
https://www.psycopg.org/articles/2014/07/20/cancelling-postgresql-statements-python/


File: psycopg.info,  Node: Problems compiling and installing psycopg2,  Prev: Best practices,  Up: Frequently Asked Questions

14.5 Problems compiling and installing psycopg2
===============================================

Psycopg 2.8 fails to install, Psycopg 2.7 was working fine.

     With Psycopg 2.7 you were installing binary packages, but they have
     proven unreliable so now you have to install them explicitly using
     the ‘psycopg2-binary’ package.  See *note Quick Install: 13. for
     all the details.

I can’t compile ‘psycopg2’: the compiler says `error: Python.h: No such file or directory'. What am I missing?

     You need to install a Python development package: it is usually
     called ‘python-dev’ or ‘python3-dev’ according to your Python
     version.

I can’t compile ‘psycopg2’: the compiler says `error: libpq-fe.h: No such file or directory'. What am I missing?

     You need to install the development version of the libpq: the
     package is usually called ‘libpq-dev’.

‘psycopg2’ raises ‘ImportError’ with message `_psycopg.so: undefined symbol: lo_truncate' when imported.

     This means that Psycopg was compiled with lo_truncate()(1) support
     (`i.e.'  the libpq used at compile time was version >= 8.3) but at
     runtime an older libpq dynamic library is found.

     Fast-forward several years, if the message reports `undefined
     symbol: lo_truncate64' it means that Psycopg was built with large
     objects 64 bits API support (`i.e.'  the libpq used at compile time
     was at least 9.3) but at runtime an older libpq dynamic library is
     found.

     You can use:

          $ ldd /path/to/packages/psycopg2/_psycopg.so | grep libpq

     to find what is the libpq dynamic library used at runtime.

     You can avoid the problem by using the same version of the
     ‘pg_config’ at install time and the libpq at runtime.

Psycopg raises `ImportError: cannot import name tz' on import in mod_wsgi / ASP, but it works fine otherwise.

     If ‘psycopg2’ is installed in an egg(2) (e.g.  because installed by
     ‘easy_install’), the user running the program may be unable to
     write in the eggs cache(3).  Set the env variable
     ‘PYTHON_EGG_CACHE’ to a writable directory.  With modwsgi you can
     use the WSGIPythonEggs(4) directive.

   ---------- Footnotes ----------

   (1) 
https://www.postgresql.org/docs/current/static/lo-interfaces.html#LO-TRUNCATE

   (2) http://peak.telecommunity.com/DevCenter/PythonEggs

   (3) 
https://stackoverflow.com/questions/2192323/what-is-the-python-egg-cache-python-egg-cache

   (4) 
https://modwsgi.readthedocs.io/en/develop/configuration-directives/WSGIPythonEggs.html


File: psycopg.info,  Node: Release notes,  Next: License,  Prev: Frequently Asked Questions,  Up: Top

15 Release notes
****************

* Menu:

* Current release::
* What’s new in psycopg 2.9: What’s new in psycopg 2 9.
* What’s new in psycopg 2.8: What’s new in psycopg 2 8.
* What’s new in psycopg 2.7: What’s new in psycopg 2 7.
* What’s new in psycopg 2.6: What’s new in psycopg 2 6.
* What’s new in psycopg 2.5: What’s new in psycopg 2 5.
* What’s new in psycopg 2.4: What’s new in psycopg 2 4.
* What’s new in psycopg 2.3: What’s new in psycopg 2 3.
* What’s new in psycopg 2.2: What’s new in psycopg 2 2.
* What’s new in psycopg 2.0: What’s new in psycopg 2 0.


File: psycopg.info,  Node: Current release,  Next: What’s new in psycopg 2 9,  Up: Release notes

15.1 Current release
====================


File: psycopg.info,  Node: What’s new in psycopg 2 9,  Next: What’s new in psycopg 2 8,  Prev: Current release,  Up: Release notes

15.2 What’s new in psycopg 2.9
==============================

   - Dropped support for Python 3.4, 3.5 (:tickets:#1000, #1197).

   - Reclassified SQLSTATE connection exceptions (08XXX) as
     ‘OperationalError’ (subclass of previously used ‘DatabaseError’)
     (ticket #1148(1)).

* Menu:

* What’s new in psycopg 2.8.6: What’s new in psycopg 2 8 6.
* What’s new in psycopg 2.8.5: What’s new in psycopg 2 8 5.
* What’s new in psycopg 2.8.4: What’s new in psycopg 2 8 4.
* What’s new in psycopg 2.8.3: What’s new in psycopg 2 8 3.
* What’s new in psycopg 2.8.2: What’s new in psycopg 2 8 2.
* What’s new in psycopg 2.8.1: What’s new in psycopg 2 8 1.

   ---------- Footnotes ----------

   (1) https://github.com/psycopg/psycopg2/issues/1148


File: psycopg.info,  Node: What’s new in psycopg 2 8 6,  Next: What’s new in psycopg 2 8 5,  Up: What’s new in psycopg 2 9

15.2.1 What’s new in psycopg 2.8.6
----------------------------------

   - Fixed memory leak changing connection encoding to the current one
     (ticket #1101(1)).

   - Fixed search of mxDateTime headers in virtualenvs (ticket #996(2)).

   - Added missing values from errorcodes (ticket #1133(3)).

   - *note cursor.query: ed. reports the query of the last ‘COPY’
     opearation too (ticket #1141(4)).

   - *note errorcodes: 1. map and *note errors: 2. classes updated to
     PostgreSQL 13.

   - Added wheel packages for ARM architecture (ticket #1125(5)).

   - Wheel package compiled against OpenSSL 1.1.1g.

   ---------- Footnotes ----------

   (1) https://github.com/psycopg/psycopg2/issues/1101

   (2) https://github.com/psycopg/psycopg2/issues/996

   (3) https://github.com/psycopg/psycopg2/issues/1133

   (4) https://github.com/psycopg/psycopg2/issues/1141

   (5) https://github.com/psycopg/psycopg2/issues/1125


File: psycopg.info,  Node: What’s new in psycopg 2 8 5,  Next: What’s new in psycopg 2 8 4,  Prev: What’s new in psycopg 2 8 6,  Up: What’s new in psycopg 2 9

15.2.2 What’s new in psycopg 2.8.5
----------------------------------

   - Fixed use of ‘connection_factory’ and ‘cursor_factory’ together
     (ticket #1019(1)).

   - Added support for LoggerAdapter(2) in ‘LoggingConnection’ (ticket
     #1026(3)).

   - *note Column: d8. objects in *note cursor.description: d7. can be
     sliced (ticket #1034(4)).

   - Added AIX support (ticket #1061(5)).

   - Fixed ‘copy()’ of ‘DictCursor’ rows (ticket #1073(6)).

   ---------- Footnotes ----------

   (1) https://github.com/psycopg/psycopg2/issues/1019

   (2) 
https://docs.python.org/3/library/logging.html#logging.LoggerAdapter

   (3) https://github.com/psycopg/psycopg2/issues/1026

   (4) https://github.com/psycopg/psycopg2/issues/1034

   (5) https://github.com/psycopg/psycopg2/issues/1061

   (6) https://github.com/psycopg/psycopg2/issues/1073


File: psycopg.info,  Node: What’s new in psycopg 2 8 4,  Next: What’s new in psycopg 2 8 3,  Prev: What’s new in psycopg 2 8 5,  Up: What’s new in psycopg 2 9

15.2.3 What’s new in psycopg 2.8.4
----------------------------------

   - Fixed building with Python 3.8 (ticket #854(1)).

   - Don’t swallow keyboard interrupts on connect when a password is
     specified in the connection string (ticket #898(2)).

   - Don’t advance replication cursor when the message wasn’t confirmed
     (ticket #940(3)).

   - Fixed inclusion of ‘time.h’ on linux (ticket #951(4)).

   - Fixed int overflow for large values in *note table_oid: 11a. and
     *note type_code: db. (ticket #961(5)).

   - *note errorcodes: 1. map and *note errors: 2. classes updated to
     PostgreSQL 12.

   - Wheel package compiled against OpenSSL 1.1.1d and PostgreSQL at
     least 11.4.

   ---------- Footnotes ----------

   (1) https://github.com/psycopg/psycopg2/issues/854

   (2) https://github.com/psycopg/psycopg2/issues/898

   (3) https://github.com/psycopg/psycopg2/issues/940

   (4) https://github.com/psycopg/psycopg2/issues/951

   (5) https://github.com/psycopg/psycopg2/issues/961


File: psycopg.info,  Node: What’s new in psycopg 2 8 3,  Next: What’s new in psycopg 2 8 2,  Prev: What’s new in psycopg 2 8 4,  Up: What’s new in psycopg 2 9

15.2.4 What’s new in psycopg 2.8.3
----------------------------------

   - Added `interval_status' parameter to ‘start_replication()’ method
     and other facilities to send automatic replication keepalives at
     periodic intervals (ticket #913(1)).

   - Fixed namedtuples caching introduced in 2.8 (ticket #928(2)).

   ---------- Footnotes ----------

   (1) https://github.com/psycopg/psycopg2/issues/913

   (2) https://github.com/psycopg/psycopg2/issues/928


File: psycopg.info,  Node: What’s new in psycopg 2 8 2,  Next: What’s new in psycopg 2 8 1,  Prev: What’s new in psycopg 2 8 3,  Up: What’s new in psycopg 2 9

15.2.5 What’s new in psycopg 2.8.2
----------------------------------

   - Fixed ‘RealDictCursor’ when there are repeated columns (ticket
     #884(1)).

   - Binary packages built with openssl 1.1.1b.  Should fix concurrency
     problems (tickets #543(2), #836(3)).

   ---------- Footnotes ----------

   (1) https://github.com/psycopg/psycopg2/issues/884

   (2) https://github.com/psycopg/psycopg2/issues/543

   (3) https://github.com/psycopg/psycopg2/issues/836


File: psycopg.info,  Node: What’s new in psycopg 2 8 1,  Prev: What’s new in psycopg 2 8 2,  Up: What’s new in psycopg 2 9

15.2.6 What’s new in psycopg 2.8.1
----------------------------------

   - Fixed ‘RealDictRow’ modifiability (ticket #886(1)).

   - Fixed “there’s no async cursor” error polling a connection with no
     cursor (ticket #887(2)).

   ---------- Footnotes ----------

   (1) https://github.com/psycopg/psycopg2/issues/886

   (2) https://github.com/psycopg/psycopg2/issues/887


File: psycopg.info,  Node: What’s new in psycopg 2 8,  Next: What’s new in psycopg 2 7,  Prev: What’s new in psycopg 2 9,  Up: Release notes

15.3 What’s new in psycopg 2.8
==============================

New features:

   - Added *note errors: 2. module.  Every PostgreSQL error is converted
     into a specific exception class (ticket #682(1)).

   - Added *note encrypt_password(): 13b. function (ticket #576(2)).

   - Added *note BYTES: 4e. adapter to manage databases with mixed
     encodings on Python 3 (ticket #835(3)).

   - Added *note table_oid: 11a. and *note table_column: 11b. attributes
     on *note cursor.description: d7. items (ticket #661(4)).

   - Added *note connection.info: c3. object to retrieve various
     PostgreSQL connection information (ticket #726(5)).

   - Added *note get_native_connection(): cd. to expose the raw ‘PGconn’
     structure to C extensions via Capsule (ticket #782(6)).

   - Added *note pgconn_ptr: cc. and *note pgresult_ptr: f3. to expose
     raw C structures to Python and interact with libpq via ctypes
     (ticket #782(7)).

   - ‘Identifier’ can represent qualified names in SQL composition
     (ticket #732(8)).

   - Added ‘ReplicationCursor’.‘wal_end’ attribute (ticket #800(9)).

   - Added `fetch' parameter to ‘execute_values()’ function (ticket
     #813(10)).

   - ‘str()’ on ‘Range’ produces a human-readable representation (ticket
     #773(11)).

   - ‘DictCursor’ and ‘RealDictCursor’ rows maintain columns order
     (ticket #177(12)).

   - Added ‘severity_nonlocalized’ attribute on the ‘Diagnostics’ object
     (ticket #783(13)).

   - More efficient ‘NamedTupleCursor’ (ticket #838(14)).

Bug fixes:

   - Fixed connections occasionally broken by the unrelated use of the
     multiprocessing module (ticket #829(15)).

   - Fixed async communication blocking if results are returned in
     different chunks, e.g.  with notices interspersed to the results
     (ticket #856(16)).

   - Fixed adaptation of numeric subclasses such as IntEnum(17) (ticket
     #591(18)).

Other changes:

   - Dropped support for Python 2.6, 3.2, 3.3.

   - Dropped ‘psycopg1’ module.

   - Dropped deprecated ‘register_tstz_w_secs()’ (was previously a
     no-op).

   - Dropped deprecated ‘PersistentConnectionPool’.  This pool class was
     mostly designed to interact with Zope.  Use ‘ZPsycopgDA.pool’
     instead.

   - Binary packages no longer installed by default.  The
     ‘psycopg2-binary’ package must be used explicitly.

   - Dropped ‘PSYCOPG_DISPLAY_SIZE’ build parameter.

   - Dropped support for mxDateTime as the default date and time
     adapter.  mxDatetime support continues to be available as an
     alternative to Python’s builtin datetime.

   - No longer use 2to3 during installation for Python 2 & 3
     compatibility.  All source files are now compatible with Python 2 &
     3 as is.

   - The ‘psycopg2.test’ package is no longer installed by ‘python
     setup.py install’.

   - Wheel package compiled against OpenSSL 1.0.2r and PostgreSQL 11.2
     libpq.

* Menu:

* What’s new in psycopg 2.7.7: What’s new in psycopg 2 7 7.
* What’s new in psycopg 2.7.6.1: What’s new in psycopg 2 7 6 1.
* What’s new in psycopg 2.7.6: What’s new in psycopg 2 7 6.
* What’s new in psycopg 2.7.5: What’s new in psycopg 2 7 5.
* What’s new in psycopg 2.7.4: What’s new in psycopg 2 7 4.
* What’s new in psycopg 2.7.3.2: What’s new in psycopg 2 7 3 2.
* What’s new in psycopg 2.7.3.1: What’s new in psycopg 2 7 3 1.
* What’s new in psycopg 2.7.3: What’s new in psycopg 2 7 3.
* What’s new in psycopg 2.7.2: What’s new in psycopg 2 7 2.
* What’s new in psycopg 2.7.1: What’s new in psycopg 2 7 1.

   ---------- Footnotes ----------

   (1) https://github.com/psycopg/psycopg2/issues/682

   (2) https://github.com/psycopg/psycopg2/issues/576

   (3) https://github.com/psycopg/psycopg2/issues/835

   (4) https://github.com/psycopg/psycopg2/issues/661

   (5) https://github.com/psycopg/psycopg2/issues/726

   (6) https://github.com/psycopg/psycopg2/issues/782

   (7) https://github.com/psycopg/psycopg2/issues/782

   (8) https://github.com/psycopg/psycopg2/issues/732

   (9) https://github.com/psycopg/psycopg2/issues/800

   (10) https://github.com/psycopg/psycopg2/issues/813

   (11) https://github.com/psycopg/psycopg2/issues/773

   (12) https://github.com/psycopg/psycopg2/issues/177

   (13) https://github.com/psycopg/psycopg2/issues/783

   (14) https://github.com/psycopg/psycopg2/issues/838

   (15) https://github.com/psycopg/psycopg2/issues/829

   (16) https://github.com/psycopg/psycopg2/issues/856

   (17) https://docs.python.org/3/library/enum.html#enum.IntEnum

   (18) https://github.com/psycopg/psycopg2/issues/591


File: psycopg.info,  Node: What’s new in psycopg 2 7 7,  Next: What’s new in psycopg 2 7 6 1,  Up: What’s new in psycopg 2 8

15.3.1 What’s new in psycopg 2.7.7
----------------------------------

   - Cleanup of the cursor results assignment code, which might have
     solved double free and inconsistencies in concurrent usage (tickets
     #346(1), #384(2)).

   - Wheel package compiled against OpenSSL 1.0.2q.

   ---------- Footnotes ----------

   (1) https://github.com/psycopg/psycopg2/issues/346

   (2) https://github.com/psycopg/psycopg2/issues/384


File: psycopg.info,  Node: What’s new in psycopg 2 7 6 1,  Next: What’s new in psycopg 2 7 6,  Prev: What’s new in psycopg 2 7 7,  Up: What’s new in psycopg 2 8

15.3.2 What’s new in psycopg 2.7.6.1
------------------------------------

   - Fixed binary package broken on OS X 10.12 (ticket #807(1)).

   - Wheel package compiled against PostgreSQL 11.1 libpq.

   ---------- Footnotes ----------

   (1) https://github.com/psycopg/psycopg2/issues/807


File: psycopg.info,  Node: What’s new in psycopg 2 7 6,  Next: What’s new in psycopg 2 7 5,  Prev: What’s new in psycopg 2 7 6 1,  Up: What’s new in psycopg 2 8

15.3.3 What’s new in psycopg 2.7.6
----------------------------------

   - Close named cursors if exist, even if *note execute(): 31. wasn’t
     called (ticket #746(1)).

   - Fixed building on modern FreeBSD versions with Python 3.7 (ticket
     #755(2)).

   - Fixed hang trying to ‘COPY’ via *note execute(): 31. in
     asynchronous connections (ticket #781(3)).

   - Fixed adaptation of arrays of empty arrays (ticket #788(4)).

   - Fixed segfault accessing the connection’s *note readonly: be. and
     *note deferrable: bf. attributes repeatedly (ticket #790(5)).

   - ‘execute_values()’ accepts ‘Composable’ objects (ticket #794(6)).

   - *note errorcodes: 1. map updated to PostgreSQL 11.

   - Wheel package compiled against PostgreSQL 10.5 libpq and OpenSSL
     1.0.2p.

   ---------- Footnotes ----------

   (1) https://github.com/psycopg/psycopg2/issues/746

   (2) https://github.com/psycopg/psycopg2/issues/755

   (3) https://github.com/psycopg/psycopg2/issues/781

   (4) https://github.com/psycopg/psycopg2/issues/788

   (5) https://github.com/psycopg/psycopg2/issues/790

   (6) https://github.com/psycopg/psycopg2/issues/794


File: psycopg.info,  Node: What’s new in psycopg 2 7 5,  Next: What’s new in psycopg 2 7 4,  Prev: What’s new in psycopg 2 7 6,  Up: What’s new in psycopg 2 8

15.3.4 What’s new in psycopg 2.7.5
----------------------------------

   - Allow non-ascii chars in namedtuple fields (regression introduced
     fixing ticket #211(1)).

   - Fixed adaptation of arrays of arrays of nulls (ticket #325(2)).

   - Fixed building on Solaris 11 and derivatives such as SmartOS and
     illumos (ticket #677(3)).

   - Maybe fixed building on MSYS2 (as reported in ticket #658(4)).

   - Allow string subclasses in connection and other places (ticket
     #679(5)).

   - Don’t raise an exception closing an unused named cursor (ticket
     #716(6)).

   - Wheel package compiled against PostgreSQL 10.4 libpq and OpenSSL
     1.0.2o.

   ---------- Footnotes ----------

   (1) https://github.com/psycopg/psycopg2/issues/211

   (2) https://github.com/psycopg/psycopg2/issues/325

   (3) https://github.com/psycopg/psycopg2/issues/677

   (4) https://github.com/psycopg/psycopg2/issues/658

   (5) https://github.com/psycopg/psycopg2/issues/679

   (6) https://github.com/psycopg/psycopg2/issues/716


File: psycopg.info,  Node: What’s new in psycopg 2 7 4,  Next: What’s new in psycopg 2 7 3 2,  Prev: What’s new in psycopg 2 7 5,  Up: What’s new in psycopg 2 8

15.3.5 What’s new in psycopg 2.7.4
----------------------------------

   - Moving away from installing the wheel package by default.  Packages
     installed from wheel raise a warning on import.  Added package
     ‘psycopg2-binary’ to install from wheel instead (ticket #543(1)).

   - Convert fields names into valid Python identifiers in
     ‘NamedTupleCursor’ (ticket #211(2)).

   - Fixed Solaris 10 support (ticket #532(3)).

   - *note cursor.mogrify(): e7. can be called on closed cursors (ticket
     #579(4)).

   - Fixed setting session characteristics in corner cases on autocommit
     connections (ticket #580(5)).

   - Fixed ‘MinTimeLoggingCursor’ on Python 3 (ticket #609(6)).

   - Fixed parsing of array of points as floats (ticket #613(7)).

   - Fixed *note __libpq_version__: 8c. building with libpq >= 10.1
     (ticket #632(8)).

   - Fixed *note rowcount: ea. after *note executemany(): 32. with
     ‘RETURNING’ statements (ticket #633(9)).

   - Fixed compatibility problem with pypy3 (ticket #649(10)).

   - Wheel packages compiled against PostgreSQL 10.1 libpq and OpenSSL
     1.0.2n.

   - Wheel packages for Python 2.6 no more available (support dropped
     from wheel building infrastructure).

   ---------- Footnotes ----------

   (1) https://github.com/psycopg/psycopg2/issues/543

   (2) https://github.com/psycopg/psycopg2/issues/211

   (3) https://github.com/psycopg/psycopg2/issues/532

   (4) https://github.com/psycopg/psycopg2/issues/579

   (5) https://github.com/psycopg/psycopg2/issues/580

   (6) https://github.com/psycopg/psycopg2/issues/609

   (7) https://github.com/psycopg/psycopg2/issues/613

   (8) https://github.com/psycopg/psycopg2/issues/632

   (9) https://github.com/psycopg/psycopg2/issues/633

   (10) https://github.com/psycopg/psycopg2/issues/649


File: psycopg.info,  Node: What’s new in psycopg 2 7 3 2,  Next: What’s new in psycopg 2 7 3 1,  Prev: What’s new in psycopg 2 7 4,  Up: What’s new in psycopg 2 8

15.3.6 What’s new in psycopg 2.7.3.2
------------------------------------

   - Wheel package compiled against PostgreSQL 10.0 libpq and OpenSSL
     1.0.2l (tickets #601(1), #602(2)).

   ---------- Footnotes ----------

   (1) https://github.com/psycopg/psycopg2/issues/601

   (2) https://github.com/psycopg/psycopg2/issues/602


File: psycopg.info,  Node: What’s new in psycopg 2 7 3 1,  Next: What’s new in psycopg 2 7 3,  Prev: What’s new in psycopg 2 7 3 2,  Up: What’s new in psycopg 2 8

15.3.7 What’s new in psycopg 2.7.3.1
------------------------------------

   - Dropped libresolv from wheel package to avoid incompatibility with
     glibc 2.26 (wheels ticket #2).


File: psycopg.info,  Node: What’s new in psycopg 2 7 3,  Next: What’s new in psycopg 2 7 2,  Prev: What’s new in psycopg 2 7 3 1,  Up: What’s new in psycopg 2 8

15.3.8 What’s new in psycopg 2.7.3
----------------------------------

   - Restored default ‘timestamptz[]’ typecasting to Python ‘datetime’.
     Regression introduced in Psycopg 2.7.2 (ticket #578(1)).

   ---------- Footnotes ----------

   (1) https://github.com/psycopg/psycopg2/issues/578


File: psycopg.info,  Node: What’s new in psycopg 2 7 2,  Next: What’s new in psycopg 2 7 1,  Prev: What’s new in psycopg 2 7 3,  Up: What’s new in psycopg 2 8

15.3.9 What’s new in psycopg 2.7.2
----------------------------------

   - Fixed inconsistent state in externally closed connections (tickets
     #263(1), #311(2), #443(3)).  Was fixed in 2.6.2 but not included in
     2.7 by mistake.

   - Fixed Python exceptions propagation in green callback (ticket
     #410(4)).

   - Don’t display the password in *note connection.dsn: b9. when the
     connection string is specified as an URI (ticket #528(5)).

   - Return objects with timezone parsing “infinity” ‘timestamptz’
     (ticket #536(6)).

   - Dropped dependency on VC9 runtime on Windows binary packages
     (ticket #541(7)).

   - Fixed segfault in *note lobject(): 76. when `mode'=‘None’ (ticket
     #544(8)).

   - Fixed *note lobject(): 76. keyword argument `lobject_factory'
     (ticket #545(9)).

   - Fixed ‘consume_stream()’ `keepalive_interval' argument (ticket
     #547(10)).

   - Maybe fixed random import error on Python 3.6 in multiprocess
     environment (ticket #550(11)).

   - Fixed random ‘SystemError’ upon receiving abort signal (ticket
     #551(12)).

   - Accept ‘Composable’ objects in ‘start_replication_expert()’ (ticket
     #554(13)).

   - Parse intervals returned as microseconds from Redshift (ticket
     #558(14)).

   - Added ‘Json’ ‘prepare()’ method to consider connection params when
     adapting (ticket #562(15)).

   - *note errorcodes: 1. map updated to PostgreSQL 10 beta 1.

   ---------- Footnotes ----------

   (1) https://github.com/psycopg/psycopg2/issues/263

   (2) https://github.com/psycopg/psycopg2/issues/311

   (3) https://github.com/psycopg/psycopg2/issues/443

   (4) https://github.com/psycopg/psycopg2/issues/410

   (5) https://github.com/psycopg/psycopg2/issues/528

   (6) https://github.com/psycopg/psycopg2/issues/536

   (7) https://github.com/psycopg/psycopg2/issues/541

   (8) https://github.com/psycopg/psycopg2/issues/544

   (9) https://github.com/psycopg/psycopg2/issues/545

   (10) https://github.com/psycopg/psycopg2/issues/547

   (11) https://github.com/psycopg/psycopg2/issues/550

   (12) https://github.com/psycopg/psycopg2/issues/551

   (13) https://github.com/psycopg/psycopg2/issues/554

   (14) https://github.com/psycopg/psycopg2/issues/558

   (15) https://github.com/psycopg/psycopg2/issues/562


File: psycopg.info,  Node: What’s new in psycopg 2 7 1,  Prev: What’s new in psycopg 2 7 2,  Up: What’s new in psycopg 2 8

15.3.10 What’s new in psycopg 2.7.1
-----------------------------------

   - Ignore ‘None’ arguments passed to *note connect(): 2b. and *note
     make_dsn(): 139. (ticket #517(1)).

   - OpenSSL upgraded from major version 0.9.8 to 1.0.2 in the Linux
     wheel packages (ticket #518(2)).

   - Fixed build with libpq versions < 9.3 (ticket #520(3)).

   ---------- Footnotes ----------

   (1) https://github.com/psycopg/psycopg2/issues/517

   (2) https://github.com/psycopg/psycopg2/issues/518

   (3) https://github.com/psycopg/psycopg2/issues/520


File: psycopg.info,  Node: What’s new in psycopg 2 7,  Next: What’s new in psycopg 2 6,  Prev: What’s new in psycopg 2 8,  Up: Release notes

15.4 What’s new in psycopg 2.7
==============================

New features:

   - Added *note sql: 6. module to generate SQL dynamically (ticket
     #308(1)).

   - Added *note Replication protocol support: 107. (ticket #322(2)).
     Main authors are Oleksandr Shulgin and Craig Ringer, who deserve a
     huge thank you.

   - Added *note parse_dsn(): 88. and *note make_dsn(): 139. functions
     (tickets #321(3), #363(4)).  *note connect(): 2b. now can take both
     `dsn' and keyword arguments, merging them together.

   - Added *note __libpq_version__: 8c. and *note libpq_version(): 8d.
     to inspect the version of the ‘libpq’ library the module was
     compiled/loaded with (tickets #35(5), #323(6)).

   - The attributes *note notices: c1. and *note notifies: c2. can be
     customized replacing them with any object exposing an ‘append()’
     method (ticket #326(7)).

   - Adapt network types to ipaddress(8) objects when available.  When
     not enabled, convert arrays of network types to lists by default.
     The old ‘Inet’ adapter is deprecated (tickets #317(9), #343(10),
     #387(11)).

   - Added *note quote_ident(): 13a. function (ticket #359(12)).

   - Added *note get_dsn_parameters(): d3. connection method (ticket
     #364(13)).

   - *note callproc(): e6. now accepts a dictionary of parameters
     (ticket #381(14)).

   - Give precedence to ‘__conform__()’ over superclasses to choose an
     object adapter (ticket #456(15)).

   - Using Python C API decoding functions and codecs caching for faster
     unicode encoding/decoding (ticket #473(16)).

   - *note executemany(): 32. slowness addressed by ‘execute_batch()’
     and ‘execute_values()’ (ticket #491(17)).

   - Added ‘async_’ as an alias for ‘async’ to support Python 3.7 where
     ‘async’ will become a keyword (ticket #495(18)).

   - Unless in autocommit, do not use ‘default_transaction_*’ settings
     to control the session characteristics as it may create problems
     with external connection pools such as pgbouncer; use ‘BEGIN’
     options instead (ticket #503(19)).

   - *note isolation_level: bb. is now writable and entirely separated
     from *note autocommit: 62.; added *note readonly: be, *note
     deferrable: bf. writable attributes.

Bug fixes:

   - Throw an exception trying to pass ‘NULL’ chars as parameters
     (ticket #420(20)).

   - Fixed error caused by missing decoding ‘LoggingConnection’ (ticket
     #483(21)).

   - Fixed integer overflow in ‘interval’ seconds (ticket #512(22)).

   - Make ‘Range’ objects picklable (ticket #462(23)).

   - Fixed version parsing and building with PostgreSQL 10 (ticket
     #489(24)).

Other changes:

   - Dropped support for Python 2.5 and 3.1.

   - Dropped support for client library older than PostgreSQL 9.1 (but
     older server versions are still supported).

   - *note isolation_level: bb. doesn’t read from the database but will
     return *note ISOLATION_LEVEL_DEFAULT: bc. if no value was set on
     the connection.

   - Empty arrays no more converted into lists if they don’t have a type
     attached (ticket #506(25))

* Menu:

* What’s new in psycopg 2.6.2: What’s new in psycopg 2 6 2.
* What’s new in psycopg 2.6.1: What’s new in psycopg 2 6 1.

   ---------- Footnotes ----------

   (1) https://github.com/psycopg/psycopg2/issues/308

   (2) https://github.com/psycopg/psycopg2/issues/322

   (3) https://github.com/psycopg/psycopg2/issues/321

   (4) https://github.com/psycopg/psycopg2/issues/363

   (5) https://github.com/psycopg/psycopg2/issues/35

   (6) https://github.com/psycopg/psycopg2/issues/323

   (7) https://github.com/psycopg/psycopg2/issues/326

   (8) https://docs.python.org/3/library/ipaddress.html#module-ipaddress

   (9) https://github.com/psycopg/psycopg2/issues/317

   (10) https://github.com/psycopg/psycopg2/issues/343

   (11) https://github.com/psycopg/psycopg2/issues/387

   (12) https://github.com/psycopg/psycopg2/issues/359

   (13) https://github.com/psycopg/psycopg2/issues/364

   (14) https://github.com/psycopg/psycopg2/issues/381

   (15) https://github.com/psycopg/psycopg2/issues/456

   (16) https://github.com/psycopg/psycopg2/issues/473

   (17) https://github.com/psycopg/psycopg2/issues/491

   (18) https://github.com/psycopg/psycopg2/issues/495

   (19) https://github.com/psycopg/psycopg2/issues/503

   (20) https://github.com/psycopg/psycopg2/issues/420

   (21) https://github.com/psycopg/psycopg2/issues/483

   (22) https://github.com/psycopg/psycopg2/issues/512

   (23) https://github.com/psycopg/psycopg2/issues/462

   (24) https://github.com/psycopg/psycopg2/issues/489

   (25) https://github.com/psycopg/psycopg2/issues/506


File: psycopg.info,  Node: What’s new in psycopg 2 6 2,  Next: What’s new in psycopg 2 6 1,  Up: What’s new in psycopg 2 7

15.4.1 What’s new in psycopg 2.6.2
----------------------------------

   - Fixed inconsistent state in externally closed connections (tickets
     #263(1), #311(2), #443(3)).

   - Report the server response status on errors (such as ticket
     #281(4)).

   - Raise ‘NotSupportedError’ on unhandled server response status
     (ticket #352(5)).

   - Allow overriding string adapter encoding with no connection (ticket
     #331(6)).

   - The ‘wait_select’ callback allows interrupting a long-running query
     in an interactive shell using ‘Ctrl-C’ (ticket #333(7)).

   - Fixed ‘PersistentConnectionPool’ on Python 3 (ticket #348(8)).

   - Fixed segfault on ‘repr()’ of an unitialized connection (ticket
     #361(9)).

   - Allow adapting bytes using *note QuotedString: 122. on Python 3
     (ticket #365(10)).

   - Added support for setuptools/wheel (ticket #370(11)).

   - Fix build on Windows with Python 3.5, VS 2015 (ticket #380(12)).

   - Fixed ‘errorcodes.lookup’ initialization thread-safety (ticket
     #382(13)).

   - Fixed ‘read()’ exception propagation in copy_from (ticket
     #412(14)).

   - Fixed possible NULL TZ decref (ticket #424(15)).

   - *note errorcodes: 1. map updated to PostgreSQL 9.5.

   ---------- Footnotes ----------

   (1) https://github.com/psycopg/psycopg2/issues/263

   (2) https://github.com/psycopg/psycopg2/issues/311

   (3) https://github.com/psycopg/psycopg2/issues/443

   (4) https://github.com/psycopg/psycopg2/issues/281

   (5) https://github.com/psycopg/psycopg2/issues/352

   (6) https://github.com/psycopg/psycopg2/issues/331

   (7) https://github.com/psycopg/psycopg2/issues/333

   (8) https://github.com/psycopg/psycopg2/issues/348

   (9) https://github.com/psycopg/psycopg2/issues/361

   (10) https://github.com/psycopg/psycopg2/issues/365

   (11) https://github.com/psycopg/psycopg2/issues/370

   (12) https://github.com/psycopg/psycopg2/issues/380

   (13) https://github.com/psycopg/psycopg2/issues/382

   (14) https://github.com/psycopg/psycopg2/issues/412

   (15) https://github.com/psycopg/psycopg2/issues/424


File: psycopg.info,  Node: What’s new in psycopg 2 6 1,  Prev: What’s new in psycopg 2 6 2,  Up: What’s new in psycopg 2 7

15.4.2 What’s new in psycopg 2.6.1
----------------------------------

   - Lists consisting of only None(1) are escaped correctly (ticket
     #285(2)).

   - Fixed deadlock in multithread programs using OpenSSL (ticket
     #290(3)).

   - Correctly unlock the connection after error in flush (ticket
     #294(4)).

   - Fixed ‘MinTimeLoggingCursor.callproc()’ (ticket #309(5)).

   - Added support for MSVC 2015 compiler (ticket #350(6)).

   ---------- Footnotes ----------

   (1) https://docs.python.org/3/library/constants.html#None

   (2) https://github.com/psycopg/psycopg2/issues/285

   (3) https://github.com/psycopg/psycopg2/issues/290

   (4) https://github.com/psycopg/psycopg2/issues/294

   (5) https://github.com/psycopg/psycopg2/issues/309

   (6) https://github.com/psycopg/psycopg2/issues/350


File: psycopg.info,  Node: What’s new in psycopg 2 6,  Next: What’s new in psycopg 2 5,  Prev: What’s new in psycopg 2 7,  Up: Release notes

15.5 What’s new in psycopg 2.6
==============================

New features:

   - Added support for large objects larger than 2GB. Many thanks to
     Blake Rouse and the MAAS Team for the feature development.

   - Python time(1) objects with a tzinfo specified and PostgreSQL
     ‘timetz’ data are converted into each other (ticket #272(2)).

Bug fixes:

   - Json adapter’s ‘str()’ returns the adapted content instead of the
     ‘repr()’ (ticket #191(3)).

* Menu:

* What’s new in psycopg 2.5.5: What’s new in psycopg 2 5 5.
* What’s new in psycopg 2.5.4: What’s new in psycopg 2 5 4.
* What’s new in psycopg 2.5.3: What’s new in psycopg 2 5 3.
* What’s new in psycopg 2.5.2: What’s new in psycopg 2 5 2.
* What’s new in psycopg 2.5.1: What’s new in psycopg 2 5 1.

   ---------- Footnotes ----------

   (1) https://docs.python.org/3/library/time.html#module-time

   (2) https://github.com/psycopg/psycopg2/issues/272

   (3) https://github.com/psycopg/psycopg2/issues/191


File: psycopg.info,  Node: What’s new in psycopg 2 5 5,  Next: What’s new in psycopg 2 5 4,  Up: What’s new in psycopg 2 6

15.5.1 What’s new in psycopg 2.5.5
----------------------------------

   - Named cursors used as context manager don’t swallow the exception
     on exit (ticket #262(1)).

   - *note cursor.description: d7. can be pickled (ticket #265(2)).

   - Propagate read error messages in COPY FROM (ticket #270(3)).

   - PostgreSQL time 24:00 is converted to Python 00:00 (ticket
     #278(4)).

   ---------- Footnotes ----------

   (1) https://github.com/psycopg/psycopg2/issues/262

   (2) https://github.com/psycopg/psycopg2/issues/265

   (3) https://github.com/psycopg/psycopg2/issues/270

   (4) https://github.com/psycopg/psycopg2/issues/278


File: psycopg.info,  Node: What’s new in psycopg 2 5 4,  Next: What’s new in psycopg 2 5 3,  Prev: What’s new in psycopg 2 5 5,  Up: What’s new in psycopg 2 6

15.5.2 What’s new in psycopg 2.5.4
----------------------------------

   - Added ‘jsonb’ support for PostgreSQL 9.4 (ticket #226(1)).

   - Fixed segfault if COPY statements are passed to *note execute():
     31. instead of using the proper methods (ticket #219(2)).

   - Force conversion of pool arguments to integer to avoid potentially
     unbounded pools (ticket #220(3)).

   - Cursors ‘WITH HOLD’ don’t begin a new transaction upon
     move/fetch/close (ticket #228(4)).

   - Cursors ‘WITH HOLD’ can be used in autocommit (ticket #229(5)).

   - *note callproc(): e6. doesn’t silently ignore an argument without a
     length.

   - Fixed memory leak with large objects (ticket #256(6)).

   - Make sure the internal ‘_psycopg.so’ module can be imported
     stand-alone (to allow modules juggling such as the one described in
     ticket #201(7)).

   ---------- Footnotes ----------

   (1) https://github.com/psycopg/psycopg2/issues/226

   (2) https://github.com/psycopg/psycopg2/issues/219

   (3) https://github.com/psycopg/psycopg2/issues/220

   (4) https://github.com/psycopg/psycopg2/issues/228

   (5) https://github.com/psycopg/psycopg2/issues/229

   (6) https://github.com/psycopg/psycopg2/issues/256

   (7) https://github.com/psycopg/psycopg2/issues/201


File: psycopg.info,  Node: What’s new in psycopg 2 5 3,  Next: What’s new in psycopg 2 5 2,  Prev: What’s new in psycopg 2 5 4,  Up: What’s new in psycopg 2 6

15.5.3 What’s new in psycopg 2.5.3
----------------------------------

   - Work around pip issue #1630(1) making installation via ‘pip -e
     git+url’ impossible (ticket #18(2)).

   - Copy operations correctly set the *note cursor.rowcount: ea.
     attribute (ticket #180(3)).

   - It is now possible to call ‘get_transaction_status()’ on closed
     connections.

   - Fixed unsafe access to object names causing assertion failures in
     Python 3 debug builds (ticket #188(4)).

   - Mark the connection closed if found broken on ‘poll()’ (from ticket
     #192(5) discussion)

   - Fixed handling of dsn and closed attributes in connection
     subclasses failing to connect (from ticket #192(6) discussion).

   - Added arbitrary but stable order to ‘Range’ objects, thanks to
     Chris Withers (ticket #193(7)).

   - Avoid blocking async connections on connect (ticket #194(8)).
     Thanks to Adam Petrovich for the bug report and diagnosis.

   - Don’t segfault using poorly defined cursor subclasses which forgot
     to call the superclass init (ticket #195(9)).

   - Mark the connection closed when a Socket connection is broken, as
     it happens for TCP connections instead (ticket #196(10)).

   - Fixed overflow opening a lobject with an oid not fitting in a
     signed int (ticket #203(11)).

   - Fixed handling of explicit default ‘cursor_factory=None’ in *note
     connection.cursor(): 2e. (ticket #210(12)).

   - Fixed possible segfault in named cursors creation.

   - Fixed debug build on Windows, thanks to James Emerton.

   ---------- Footnotes ----------

   (1) https://github.com/pypa/pip/issues/1630

   (2) https://github.com/psycopg/psycopg2/issues/248

   (3) https://github.com/psycopg/psycopg2/issues/180

   (4) https://github.com/psycopg/psycopg2/issues/188

   (5) https://github.com/psycopg/psycopg2/issues/192

   (6) https://github.com/psycopg/psycopg2/issues/192

   (7) https://github.com/psycopg/psycopg2/issues/193

   (8) https://github.com/psycopg/psycopg2/issues/194

   (9) https://github.com/psycopg/psycopg2/issues/195

   (10) https://github.com/psycopg/psycopg2/issues/196

   (11) https://github.com/psycopg/psycopg2/issues/203

   (12) https://github.com/psycopg/psycopg2/issues/210


File: psycopg.info,  Node: What’s new in psycopg 2 5 2,  Next: What’s new in psycopg 2 5 1,  Prev: What’s new in psycopg 2 5 3,  Up: What’s new in psycopg 2 6

15.5.4 What’s new in psycopg 2.5.2
----------------------------------

   - Fixed segfault pickling the exception raised on connection error
     (ticket #170(1)).

   - Meaningful connection errors report a meaningful message, thanks to
     Alexey Borzenkov (ticket #173(2)).

   - Manually creating ‘lobject’ with the wrong parameter doesn’t
     segfault (ticket #187(3)).

   ---------- Footnotes ----------

   (1) https://github.com/psycopg/psycopg2/issues/170

   (2) https://github.com/psycopg/psycopg2/issues/173

   (3) https://github.com/psycopg/psycopg2/issues/187


File: psycopg.info,  Node: What’s new in psycopg 2 5 1,  Prev: What’s new in psycopg 2 5 2,  Up: What’s new in psycopg 2 6

15.5.5 What’s new in psycopg 2.5.1
----------------------------------

   - Fixed build on Solaris 10 and 11 where the round() function is
     already declared (ticket #146(1)).

   - Fixed comparison of ‘Range’ with non-range objects (ticket
     #164(2)).  Thanks to Chris Withers for the patch.

   - Fixed double-free on connection dealloc (ticket #166(3)).  Thanks
     to Gangadharan S.A. for the report and fix suggestion.

   ---------- Footnotes ----------

   (1) https://github.com/psycopg/psycopg2/issues/146

   (2) https://github.com/psycopg/psycopg2/issues/164

   (3) https://github.com/psycopg/psycopg2/issues/166


File: psycopg.info,  Node: What’s new in psycopg 2 5,  Next: What’s new in psycopg 2 4,  Prev: What’s new in psycopg 2 6,  Up: Release notes

15.6 What’s new in psycopg 2.5
==============================

New features:

   - Added *note JSON adaptation: 186.

   - Added *note support for PostgreSQL 9.2 range types: 18e.

   - *note connection: 2c. and *note cursor: 2d. objects can be used in
     ‘with’ statements as context managers as specified by recent DB API
     2.0(1) extension.

   - Added ‘Diagnostics’ object to get extended info from a database
     error.  Many thanks to Matthew Woodcraft for the implementation
     (ticket #149(2)).

   - Added *note connection.cursor_factory: 87. attribute to customize
     the default object returned by *note cursor(): 2e.

   - Added support for backward scrollable cursors.  Thanks to Jon
     Nelson for the initial patch (ticket #108(3)).

   - Added a simple way to *note customize casting of composite types:
     18b. into Python objects other than namedtuples.  Many thanks to
     Ronan Dunklau and Tobias Oberstein for the feature development.

   - *note connection.reset(): b5. implemented using ‘DISCARD ALL’ on
     server versions supporting it.

Bug fixes:

   - Properly cleanup memory of broken connections (ticket #148(4)).

   - Fixed bad interaction of ‘setup.py’ with other dependencies in
     Distribute projects on Python 3 (ticket #153(5)).

Other changes:

   - Added support for Python 3.3.

   - Dropped support for Python 2.4.  Please use Psycopg 2.4.x if you
     need it.

   - *note errorcodes: 1. map updated to PostgreSQL 9.2.

   - Dropped Zope adapter from source repository.  ZPsycopgDA now has
     its own project at <‘https://github.com/psycopg/ZPsycopgDA’>.

* Menu:

* What’s new in psycopg 2.4.6: What’s new in psycopg 2 4 6.
* What’s new in psycopg 2.4.5: What’s new in psycopg 2 4 5.
* What’s new in psycopg 2.4.4: What’s new in psycopg 2 4 4.
* What’s new in psycopg 2.4.3: What’s new in psycopg 2 4 3.
* What’s new in psycopg 2.4.2: What’s new in psycopg 2 4 2.
* What’s new in psycopg 2.4.1: What’s new in psycopg 2 4 1.

   ---------- Footnotes ----------

   (1) https://www.python.org/dev/peps/pep-0249/

   (2) https://github.com/psycopg/psycopg2/issues/149

   (3) https://github.com/psycopg/psycopg2/issues/108

   (4) https://github.com/psycopg/psycopg2/issues/148

   (5) https://github.com/psycopg/psycopg2/issues/153


File: psycopg.info,  Node: What’s new in psycopg 2 4 6,  Next: What’s new in psycopg 2 4 5,  Up: What’s new in psycopg 2 5

15.6.1 What’s new in psycopg 2.4.6
----------------------------------

   - Fixed ‘cursor()’ arguments propagation in connection subclasses and
     overriding of the ‘cursor_factory’ argument.  Thanks to Corry
     Haines for the report and the initial patch (ticket #105(1)).

   - Dropped GIL release during string adaptation around a function call
     invoking a Python API function, which could cause interpreter
     crash.  Thanks to Manu Cupcic for the report (ticket #110(2)).

   - Close a green connection if there is an error in the callback.
     Maybe a harsh solution but it leaves the program responsive (ticket
     #113(3)).

   - ‘register_hstore()’, ‘register_composite()’, ‘tpc_recover()’ work
     with RealDictConnection and Cursor (ticket #114(4)).

   - Fixed broken pool for Zope and connections re-init across ZSQL
     methods in the same request (tickets #123(5), #125(6), #142(7)).

   - connect() raises an exception instead of swallowing keyword
     arguments when a connection string is specified as well (ticket
     #131(8)).

   - Discard any result produced by ‘executemany()’ (ticket #133(9)).

   - Fixed pickling of FixedOffsetTimezone objects (ticket #135(10)).

   - Release the GIL around PQgetResult calls after COPY (ticket
     #140(11)).

   - Fixed empty strings handling in composite caster (ticket #141(12)).

   - Fixed pickling of DictRow and RealDictRow objects.

   ---------- Footnotes ----------

   (1) https://github.com/psycopg/psycopg2/issues/105

   (2) https://github.com/psycopg/psycopg2/issues/110

   (3) https://github.com/psycopg/psycopg2/issues/113

   (4) https://github.com/psycopg/psycopg2/issues/114

   (5) https://github.com/psycopg/psycopg2/issues/123

   (6) https://github.com/psycopg/psycopg2/issues/125

   (7) https://github.com/psycopg/psycopg2/issues/142

   (8) https://github.com/psycopg/psycopg2/issues/131

   (9) https://github.com/psycopg/psycopg2/issues/133

   (10) https://github.com/psycopg/psycopg2/issues/135

   (11) https://github.com/psycopg/psycopg2/issues/140

   (12) https://github.com/psycopg/psycopg2/issues/141


File: psycopg.info,  Node: What’s new in psycopg 2 4 5,  Next: What’s new in psycopg 2 4 4,  Prev: What’s new in psycopg 2 4 6,  Up: What’s new in psycopg 2 5

15.6.2 What’s new in psycopg 2.4.5
----------------------------------

   - The close() methods on connections and cursors don’t raise
     exceptions if called on already closed objects.

   - Fixed fetchmany() with no argument in cursor subclasses (ticket
     #84(1)).

   - Use lo_creat() instead of lo_create() when possible for better
     interaction with pgpool-II (ticket #88(2)).

   - Error and its subclasses are picklable, useful for multiprocessing
     interaction (ticket #90(3)).

   - Better efficiency and formatting of timezone offset objects thanks
     to Menno Smits (tickets #94(4), #95(5)).

   - Fixed ‘rownumber’ during iteration on cursor subclasses.
     Regression introduced in 2.4.4 (ticket #100(6)).

   - Added support for ‘inet’ arrays.

   - Fixed ‘commit()’ concurrency problem (ticket #103(7)).

   - Codebase cleaned up using the GCC Python plugin’s static analysis
     tool, which has revealed several unchecked return values, possible
     NULL dereferences, reference counting problems.  Many thanks to
     David Malcolm for the useful tool and the assistance provided using
     it.

   ---------- Footnotes ----------

   (1) https://github.com/psycopg/psycopg2/issues/84

   (2) https://github.com/psycopg/psycopg2/issues/88

   (3) https://github.com/psycopg/psycopg2/issues/90

   (4) https://github.com/psycopg/psycopg2/issues/94

   (5) https://github.com/psycopg/psycopg2/issues/95

   (6) https://github.com/psycopg/psycopg2/issues/100

   (7) https://github.com/psycopg/psycopg2/issues/103


File: psycopg.info,  Node: What’s new in psycopg 2 4 4,  Next: What’s new in psycopg 2 4 3,  Prev: What’s new in psycopg 2 4 5,  Up: What’s new in psycopg 2 5

15.6.3 What’s new in psycopg 2.4.4
----------------------------------

   - ‘register_composite()’ also works with the types implicitly defined
     after a table row, not only with the ones created by ‘CREATE TYPE’.

   - Values for the isolation level symbolic constants restored to what
     they were before release 2.4.2 to avoid breaking apps using the
     values instead of the constants.

   - Named DictCursor/RealDictCursor honour itersize (ticket #80(1)).

   - Fixed rollback on error on Zope (ticket #73(2)).

   - Raise ‘DatabaseError’ instead of ‘Error’ with empty libpq errors,
     consistently with other disconnection-related errors: regression
     introduced in release 2.4.1 (ticket #82(3)).

   ---------- Footnotes ----------

   (1) https://github.com/psycopg/psycopg2/issues/80

   (2) https://github.com/psycopg/psycopg2/issues/73

   (3) https://github.com/psycopg/psycopg2/issues/82


File: psycopg.info,  Node: What’s new in psycopg 2 4 3,  Next: What’s new in psycopg 2 4 2,  Prev: What’s new in psycopg 2 4 4,  Up: What’s new in psycopg 2 5

15.6.4 What’s new in psycopg 2.4.3
----------------------------------

   - connect() supports all the keyword arguments supported by the
     database

   - Added ‘new_array_type()’ function for easy creation of array
     typecasters.

   - Added support for arrays of hstores and composite types (ticket
     #66(1)).

   - Fixed segfault in case of transaction started with connection lost
     (and possibly other events).

   - Fixed adaptation of Decimal type in sub-interpreters, such as in
     certain mod_wsgi configurations (ticket #52(2)).

   - Rollback connections in transaction or in error before putting them
     back into a pool.  Also discard broken connections (ticket #62(3)).

   - Lazy import of the slow uuid module, thanks to Marko Kreen.

   - Fixed NamedTupleCursor.executemany() (ticket #65(4)).

   - Fixed –static-libpq setup option (ticket #64(5)).

   - Fixed interaction between RealDictCursor and named cursors (ticket
     #67(6)).

   - Dropped limit on the columns length in COPY operations (ticket
     #68(7)).

   - Fixed reference leak with arguments referenced more than once in
     queries (ticket #81(8)).

   - Fixed typecasting of arrays containing consecutive backslashes.

   - ‘errorcodes’ map updated to PostgreSQL 9.1.

   ---------- Footnotes ----------

   (1) https://github.com/psycopg/psycopg2/issues/66

   (2) https://github.com/psycopg/psycopg2/issues/52

   (3) https://github.com/psycopg/psycopg2/issues/62

   (4) https://github.com/psycopg/psycopg2/issues/65

   (5) https://github.com/psycopg/psycopg2/issues/64

   (6) https://github.com/psycopg/psycopg2/issues/67

   (7) https://github.com/psycopg/psycopg2/issues/68

   (8) https://github.com/psycopg/psycopg2/issues/81


File: psycopg.info,  Node: What’s new in psycopg 2 4 2,  Next: What’s new in psycopg 2 4 1,  Prev: What’s new in psycopg 2 4 3,  Up: What’s new in psycopg 2 5

15.6.5 What’s new in psycopg 2.4.2
----------------------------------

   - Added ‘set_session()’ method and ‘autocommit’ property to the
     connection.  Added support for read-only sessions and, for
     PostgreSQL 9.1, for the “repeatable read” isolation level and the
     “deferrable” transaction property.

   - Psycopg doesn’t execute queries at connection time to find the
     default isolation level.

   - Fixed bug with multithread code potentially causing loss of sync
     with the server communication or lock of the client (ticket
     #55(1)).

   - Don’t fail import if mx.DateTime module can’t be found, even if its
     support was built (ticket #53(2)).

   - Fixed escape for negative numbers prefixed by minus operator
     (ticket #57(3)).

   - Fixed refcount issue during copy.  Reported and fixed by Dave
     Malcolm (ticket #58(4), Red Hat Bug 711095).

   - Trying to execute concurrent operations on the same connection
     through concurrent green thread results in an error instead of a
     deadlock.

   - Fixed detection of pg_config on Window.  Report and fix, plus some
     long needed setup.py cleanup by Steve Lacy: thanks!

   ---------- Footnotes ----------

   (1) https://github.com/psycopg/psycopg2/issues/55

   (2) https://github.com/psycopg/psycopg2/issues/53

   (3) https://github.com/psycopg/psycopg2/issues/57

   (4) https://github.com/psycopg/psycopg2/issues/58


File: psycopg.info,  Node: What’s new in psycopg 2 4 1,  Prev: What’s new in psycopg 2 4 2,  Up: What’s new in psycopg 2 5

15.6.6 What’s new in psycopg 2.4.1
----------------------------------

   - Use own parser for bytea output, not requiring anymore the libpq
     9.0 to parse the hex format.

   - Don’t fail connection if the client encoding is a non-normalized
     variant.  Issue reported by Peter Eisentraut.

   - Correctly detect an empty query sent to the backend (ticket
     #46(1)).

   - Fixed a SystemError clobbering libpq errors raised without
     SQLSTATE. Bug vivisectioned by Eric Snow.

   - Fixed interaction between NamedTuple and server-side cursors.

   - Allow to specify –static-libpq on setup.py command line instead of
     just in ‘setup.cfg’.  Patch provided by Matthew Ryan (ticket
     #48(2)).

   ---------- Footnotes ----------

   (1) https://github.com/psycopg/psycopg2/issues/46

   (2) https://github.com/psycopg/psycopg2/issues/48


File: psycopg.info,  Node: What’s new in psycopg 2 4,  Next: What’s new in psycopg 2 3,  Prev: What’s new in psycopg 2 5,  Up: Release notes

15.7 What’s new in psycopg 2.4
==============================

New features and changes:

   - Added support for Python 3.1 and 3.2.  The conversion has also
     brought several improvements:

        - Added ‘b’ and ‘t’ mode to large objects: write can deal with
          both bytes strings and unicode; read can return either bytes
          strings or decoded unicode.

        - COPY sends Unicode data to files implementing ‘io.TextIOBase’.

        - Improved PostgreSQL-Python encodings mapping.

        - Added a few missing encodings: EUC_CN, EUC_JIS_2004,
          ISO885910, ISO885916, LATIN10, SHIFT_JIS_2004.

        - Dropped repeated dictionary lookups with unicode
          query/parameters.

   - Improvements to the named cursors:

        - More efficient iteration on named cursors, fetching ‘itersize’
          records at time from the backend.

        - The named cursors name can be an invalid identifier.

   - Improvements in data handling:

        - Added ‘register_composite()’ function to cast PostgreSQL
          composite types into Python tuples/namedtuples.

        - Adapt types ‘bytearray’ (from Python 2.6), ‘memoryview’ (from
          Python 2.7) and other objects implementing the “Revised Buffer
          Protocol” to ‘bytea’ data type.

        - The ‘hstore’ adapter can work even when the data type is not
          installed in the ‘public’ namespace.

        - Raise a clean exception instead of returning bad data when
          receiving bytea in ‘hex’ format and the client libpq can’t
          parse them.

        - Empty lists correctly roundtrip Python -> PostgreSQL ->
          Python.

   - Other changes:

        - ‘cursor.description’ is provided as named tuples if available.

        - The build script refuses to guess values if ‘pg_config’ is not
          found.

        - Connections and cursors are weakly referenceable.

Bug fixes:

   - Fixed adaptation of None in composite types (ticket #26(1)).  Bug
     report by Karsten Hilbert.

   - Fixed several reference leaks in less common code paths.

   - Fixed segfault when a large object is closed and its connection no
     more available.

   - Added missing icon to ZPsycopgDA package, not available in Zope
     2.12.9 (ticket #30(2)).  Bug report and patch by Pumukel.

   - Fixed conversion of negative infinity (ticket #40(3)).  Bug report
     and patch by Marti Raudsepp.

* Menu:

* What’s new in psycopg 2.3.2: What’s new in psycopg 2 3 2.
* What’s new in psycopg 2.3.1: What’s new in psycopg 2 3 1.

   ---------- Footnotes ----------

   (1) https://github.com/psycopg/psycopg2/issues/26

   (2) https://github.com/psycopg/psycopg2/issues/30

   (3) https://github.com/psycopg/psycopg2/issues/40


File: psycopg.info,  Node: What’s new in psycopg 2 3 2,  Next: What’s new in psycopg 2 3 1,  Up: What’s new in psycopg 2 4

15.7.1 What’s new in psycopg 2.3.2
----------------------------------

   - Fixed segfault with middleware not passing DateStyle to the client
     (ticket #24(1)).  Bug report and patch by Marti Raudsepp.

   ---------- Footnotes ----------

   (1) https://github.com/psycopg/psycopg2/issues/254


File: psycopg.info,  Node: What’s new in psycopg 2 3 1,  Prev: What’s new in psycopg 2 3 2,  Up: What’s new in psycopg 2 4

15.7.2 What’s new in psycopg 2.3.1
----------------------------------

   - Fixed build problem on CentOS 5.5 x86_64 (ticket #23(1)).

   ---------- Footnotes ----------

   (1) https://github.com/psycopg/psycopg2/issues/253


File: psycopg.info,  Node: What’s new in psycopg 2 3,  Next: What’s new in psycopg 2 2,  Prev: What’s new in psycopg 2 4,  Up: Release notes

15.8 What’s new in psycopg 2.3
==============================

psycopg 2.3 aims to expose some new features introduced in PostgreSQL
9.0.

Main new features:

   - dict(1) to ‘hstore’ adapter and ‘hstore’ to dict(2) typecaster,
     using both 9.0 and pre-9.0 syntax.

   - Two-phase commit protocol support as per DBAPI specification.

   - Support for payload in notifications received from the backend.

   - ‘namedtuple’-returning cursor.

   - Query execution cancel.

Other features and changes:

   - Dropped support for protocol 2: Psycopg 2.3 can only connect to
     PostgreSQL servers with version at least 7.4.

   - Don’t issue a query at every connection to detect the client
     encoding and to set the datestyle to ISO if it is already
     compatible with what expected.

   - ‘mogrify()’ now supports unicode queries.

   - Subclasses of a type that can be adapted are adapted as the
     superclass.

   - ‘errorcodes’ knows a couple of new codes introduced in PostgreSQL
     9.0.

   - Dropped deprecated Psycopg “own quoting”.

   - Never issue a ROLLBACK on close/GC. This behaviour was introduced
     as a bug in release 2.2, but trying to send a command while being
     destroyed has been considered not safe.

Bug fixes:

   - Fixed use of ‘PQfreemem’ instead of ‘free’ in binary typecaster.

   - Fixed access to freed memory in ‘conn_get_isolation_level()’.

   - Fixed crash during Decimal adaptation with a few 2.5.x Python
     versions (ticket #7(3)).

   - Fixed notices order (ticket #9(4)).

* Menu:

* What’s new in psycopg 2.2.2: What’s new in psycopg 2 2 2.
* What’s new in psycopg 2.2.1: What’s new in psycopg 2 2 1.

   ---------- Footnotes ----------

   (1) https://docs.python.org/3/library/stdtypes.html#dict

   (2) https://docs.python.org/3/library/stdtypes.html#dict

   (3) https://github.com/psycopg/psycopg2/issues/237

   (4) https://github.com/psycopg/psycopg2/issues/239


File: psycopg.info,  Node: What’s new in psycopg 2 2 2,  Next: What’s new in psycopg 2 2 1,  Up: What’s new in psycopg 2 3

15.8.1 What’s new in psycopg 2.2.2
----------------------------------

Bux fixes:

   - the call to logging.basicConfig() in pool.py has been dropped: it
     was messing with some projects using logging (and a library should
     not initialize the logging system anyway.)

   - psycopg now correctly handles time zones with seconds in the UTC
     offset.  The old register_tstz_w_secs() function is deprecated and
     will raise a warning if called.

   - Exceptions raised by the column iterator are propagated.

   - Exceptions raised by executemany() iterators are propagated.


File: psycopg.info,  Node: What’s new in psycopg 2 2 1,  Prev: What’s new in psycopg 2 2 2,  Up: What’s new in psycopg 2 3

15.8.2 What’s new in psycopg 2.2.1
----------------------------------

Bux fixes:

   - psycopg now builds again on MS Windows.


File: psycopg.info,  Node: What’s new in psycopg 2 2,  Next: What’s new in psycopg 2 0,  Prev: What’s new in psycopg 2 3,  Up: Release notes

15.9 What’s new in psycopg 2.2
==============================

This is the first release of the new 2.2 series, supporting not just one
but two different ways of executing asynchronous queries, thanks to Jan
and Daniele (with a little help from me and others, but they did 99% of
the work so they deserve their names here in the news.)

psycopg now supports both classic select() loops and “green” coroutine
libraries.  It is all in the documentation, so just point your browser
to doc/html/advanced.html.

Other new features:

   - truncate() method for lobjects.

   - COPY functions are now a little bit faster.

   - All builtin PostgreSQL to Python typecasters are now available from
     the psycopg2.extensions module.

   - Notifications from the backend are now available right after the
     execute() call (before client code needed to call isbusy() to
     ensure NOTIFY reception.)

   - Better timezone support.

   - Lots of documentation updates.

Bug fixes:

   - Fixed some gc/refcounting problems.

   - Fixed reference leak in NOTIFY reception.

   - Fixed problem with PostgreSQL not casting string literals to the
     correct types in some situations: psycopg now add an explicit cast
     to dates, times and bytea representations.

   - Fixed TimestampFromTicks() and TimeFromTicks() for seconds >= 59.5.

   - Fixed spurious exception raised when calling C typecasters from
     Python ones.

* Menu:

* What’s new in psycopg 2.0.14: What’s new in psycopg 2 0 14.
* What’s new in psycopg 2.0.13: What’s new in psycopg 2 0 13.
* What’s new in psycopg 2.0.12: What’s new in psycopg 2 0 12.
* What’s new in psycopg 2.0.11: What’s new in psycopg 2 0 11.
* What’s new in psycopg 2.0.10: What’s new in psycopg 2 0 10.
* What’s new in psycopg 2.0.9: What’s new in psycopg 2 0 9.
* What’s new in psycopg 2.0.9: What’s new in psycopg 2 0 9<2>.
* What’s new in psycopg 2.0.8: What’s new in psycopg 2 0 8.
* What’s new in psycopg 2.0.7: What’s new in psycopg 2 0 7.
* What’s new in psycopg 2.0.6: What’s new in psycopg 2 0 6.
* What’s new in psycopg 2.0.5.1: What’s new in psycopg 2 0 5 1.
* What’s new in psycopg 2.0.5: What’s new in psycopg 2 0 5.
* What’s new in psycopg 2.0.4: What’s new in psycopg 2 0 4.
* What’s new in psycopg 2.0.3: What’s new in psycopg 2 0 3.
* What’s new in psycopg 2.0.2: What’s new in psycopg 2 0 2.
* What’s new in psycopg 2.0.1: What’s new in psycopg 2 0 1.


File: psycopg.info,  Node: What’s new in psycopg 2 0 14,  Next: What’s new in psycopg 2 0 13,  Up: What’s new in psycopg 2 2

15.9.1 What’s new in psycopg 2.0.14
-----------------------------------

New features:

   - Support for adapting tuples to PostgreSQL arrays is now enabled by
     default and does not require importing psycopg2.extensions anymore.

   - “can’t adapt” error message now includes full type information.

   - Thank to Daniele Varrazzo (piro) psycopg2’s source package now
     includes full documentation in HTML and plain text format.

Bug fixes:

   - No loss of precision when using floats anymore.

   - decimal.Decimal “nan” and “infinity” correctly converted to
     PostgreSQL numeric NaN values (note that PostgreSQL numeric type
     does not support infinity but just NaNs.)

   - psycopg2.extensions now includes Binary.

It seems we’re good citizens of the free software ecosystem and that big
big big companies and people ranting on the pgsql-hackers mailing list
we’ll now not dislike us.  `g' (See LICENSE file for the details.)


File: psycopg.info,  Node: What’s new in psycopg 2 0 13,  Next: What’s new in psycopg 2 0 12,  Prev: What’s new in psycopg 2 0 14,  Up: What’s new in psycopg 2 2

15.9.2 What’s new in psycopg 2.0.13
-----------------------------------

New features:

   - Support for UUID arrays.

   - It is now possible to build psycopg linking to a static libpq
     library.

Bug fixes:

   - Fixed a deadlock related to using the same connection with multiple
     cursors from different threads.

   - Builds again with MSVC.


File: psycopg.info,  Node: What’s new in psycopg 2 0 12,  Next: What’s new in psycopg 2 0 11,  Prev: What’s new in psycopg 2 0 13,  Up: What’s new in psycopg 2 2

15.9.3 What’s new in psycopg 2.0.12
-----------------------------------

New features:

   - The connection object now has a reset() method that can be used to
     reset the connection to its default state.

Bug fixes:

   - copy_to() and copy_from() now accept a much larger number of
     columns.

   - Fixed PostgreSQL version detection.

   - Fixed ZPsycopgDA version check.

   - Fixed regression in ZPsycopgDA that made it behave wrongly when
     receiving serialization errors: now the query is re-issued as it
     should be by propagating the correct exception to Zope.

   - Writing “large” large objects should now work.


File: psycopg.info,  Node: What’s new in psycopg 2 0 11,  Next: What’s new in psycopg 2 0 10,  Prev: What’s new in psycopg 2 0 12,  Up: What’s new in psycopg 2 2

15.9.4 What’s new in psycopg 2.0.11
-----------------------------------

New features:

   - DictRow and RealDictRow now use less memory.  If you inherit on
     them remember to set __slots__ for your new attributes or be
     prepare to go back to old memory usage.

Bug fixes:

   - Fixed exception in setup.py.

   - More robust detection of PostgreSQL development versions.

   - Fixed exception in RealDictCursor, introduced in 2.0.10.


File: psycopg.info,  Node: What’s new in psycopg 2 0 10,  Next: What’s new in psycopg 2 0 9,  Prev: What’s new in psycopg 2 0 11,  Up: What’s new in psycopg 2 2

15.9.5 What’s new in psycopg 2.0.10
-----------------------------------

New features:

   - A specialized type-caster that can parse time zones with seconds is
     now available.  Note that after enabling it (see extras.py) “wrong”
     time zones will be parsed without raising an exception but the
     result will be rounded.

   - DictCursor can be used as a named cursor.

   - DictRow now implements more dict methods.

   - The connection object now expose PostgreSQL server version as the
     .server_version attribute and the protocol version used as
     .protocol_version.

   - The connection object has a .get_parameter_status() methods that
     can be used to obtain useful information from the server.

Bug fixes:

   - None is now correctly always adapted to NULL.

   - Two double memory free errors provoked by multithreading and
     garbage collection are now fixed.

   - Fixed usage of internal Python code in the notice processor; this
     should fix segfaults when receiving a lot of notices in
     multithreaded programs.

   - Should build again on MSVC and Solaris.

   - Should build with development versions of PostgreSQL (ones with
     -devel version string.)

   - Fixed some tests that failed even when psycopg was right.


File: psycopg.info,  Node: What’s new in psycopg 2 0 9,  Next: What’s new in psycopg 2 0 9<2>,  Prev: What’s new in psycopg 2 0 10,  Up: What’s new in psycopg 2 2

15.9.6 What’s new in psycopg 2.0.9
----------------------------------

New features:

   - “import psycopg2.extras” to get some support for handling times and
     timestamps with seconds in the time zone offset.

   - DictCursors can now be used as named cursors.

Bug fixes:

   - register_type() now accept an explicit None as its second
     parameter.

   - psycopg2 should build again on MSVC and Solaris.


File: psycopg.info,  Node: What’s new in psycopg 2 0 9<2>,  Next: What’s new in psycopg 2 0 8,  Prev: What’s new in psycopg 2 0 9,  Up: What’s new in psycopg 2 2

15.9.7 What’s new in psycopg 2.0.9
----------------------------------

New features:

   - COPY TO/COPY FROM queries now can be of any size and psycopg will
     correctly quote separators.

   - float values Inf and NaN are now correctly handled and can
     round-trip to the database.

   - executemany() now return the numer of total INSERTed or UPDATEd
     rows.  Note that, as it has always been, executemany() should not
     be used to execute multiple SELECT statements and while it will
     execute the statements without any problem, it will return the
     wrong value.

   - copy_from() and copy_to() can now use quoted separators.

   - “import psycopg2.extras” to get UUID support.

Bug fixes:

   - register_type() now works on connection and cursor subclasses.

   - fixed a memory leak when using lobjects.


File: psycopg.info,  Node: What’s new in psycopg 2 0 8,  Next: What’s new in psycopg 2 0 7,  Prev: What’s new in psycopg 2 0 9<2>,  Up: What’s new in psycopg 2 2

15.9.8 What’s new in psycopg 2.0.8
----------------------------------

New features:

   - The connection object now has a get_backend_pid() method that
     returns the current PostgreSQL connection backend process PID.

   - The PostgreSQL large object API has been exposed through the
     Cursor.lobject() method.

Bug fixes:

   - Some fixes to ZPsycopgDA have been merged from the Debian package.

   - A memory leak was fixed in Cursor.executemany().

   - A double free was fixed in pq_complete_error(), that caused crashes
     under some error conditions.


File: psycopg.info,  Node: What’s new in psycopg 2 0 7,  Next: What’s new in psycopg 2 0 6,  Prev: What’s new in psycopg 2 0 8,  Up: What’s new in psycopg 2 2

15.9.9 What’s new in psycopg 2.0.7
----------------------------------

Improved error handling:

   - All instances of psycopg2.Error subclasses now have pgerror, pgcode
     and cursor attributes.  They will be set to None if no value is
     available.

   - Exception classes are now chosen based on the SQLSTATE value from
     the result.  (#184)

   - The commit() and rollback() methods now set the pgerror and pgcode
     attributes on exceptions.  (#152)

   - errors from commit() and rollback() are no longer considered fatal.
     (#194)

   - If a disconnect is detected during execute(), an exception will be
     raised at that point rather than resulting in “ProgrammingError: no
     results to fetch” later on.  (#186)

Better PostgreSQL compatibility:

   - If the server uses standard_conforming_strings, perform appropriate
     quoting.

   - BC dates are now handled if psycopg is compiled with mxDateTime
     support.  If using datetime, an appropriate ValueError is raised.
     (#203)

Other bug fixes:

   - If multiple sub-interpreters are in use, do not share the Decimal
     type between them.  (#192)

   - Buffer objects obtained from psycopg are now accepted by psycopg
     too, without segfaulting.  (#209)

   - A few small changes were made to improve DB-API compatibility.  All
     the dbapi20 tests now pass.

Miscellaneous:

   - The PSYCOPG_DISPLAY_SIZE option is now off by default.  This means
     that display size will always be set to “None” in
     cursor.description.  Calculating the display size was expensive,
     and infrequently used so this should improve performance.

   - New QueryCanceledError and TransactionRollbackError exceptions have
     been added to the psycopg2.extensions module.  They can be used to
     detect statement timeouts and deadlocks respectively.

   - Cursor objects now have a “closed” attribute.  (#164)

   - If psycopg has been built with debug support, it is now necessary
     to set the PSYCOPG_DEBUG environment variable to turn on debug
     spew.


File: psycopg.info,  Node: What’s new in psycopg 2 0 6,  Next: What’s new in psycopg 2 0 5 1,  Prev: What’s new in psycopg 2 0 7,  Up: What’s new in psycopg 2 2

15.9.10 What’s new in psycopg 2.0.6
-----------------------------------

Better support for PostgreSQL, Python and win32:

   - full support for PostgreSQL 8.2, including NULLs in arrays

   - support for almost all existing PostgreSQL encodings

   - full list of PostgreSQL error codes available by importing the
     psycopg2.errorcodes module

   - full support for Python 2.5 and 64 bit architectures

   - better build support on win32 platform

Support for per-connection type-casters (used by ZPsycopgDA too, this
fixes a long standing bug that made different connections use a random
set of date/time type-casters instead of the configured one.)

Better management of times and dates both from Python and in Zope.

copy_to and copy_from now take an extra “columns” parameter.

Python tuples are now adapted to SQL sequences that can be used with the
“IN” operator by default if the psycopg2.extensions module is imported
(i.e., the SQL_IN adapter was moved from extras to extensions.)

Fixed some small buglets and build glitches:

   - removed double mutex destroy

   - removed all non-constant initializers

   - fixed PyObject_HEAD declarations to avoid memory corruption on 64
     bit architectures

   - fixed several Python API calls to work on 64 bit architectures

   - applied compatibility macros from PEP 353

   - now using more than one argument format raise an error instead of a
     segfault


File: psycopg.info,  Node: What’s new in psycopg 2 0 5 1,  Next: What’s new in psycopg 2 0 5,  Prev: What’s new in psycopg 2 0 6,  Up: What’s new in psycopg 2 2

15.9.11 What’s new in psycopg 2.0.5.1
-------------------------------------

   * Now it really, really builds on MSVC and older gcc versions.


File: psycopg.info,  Node: What’s new in psycopg 2 0 5,  Next: What’s new in psycopg 2 0 4,  Prev: What’s new in psycopg 2 0 5 1,  Up: What’s new in psycopg 2 2

15.9.12 What’s new in psycopg 2.0.5
-----------------------------------

   * Fixed various buglets such as:

        - segfault when passing an empty string to Binary()

        - segfault on null queries

        - segfault and bad keyword naming in .executemany()

        - OperationalError in connection objects was always None

   * Various changes to ZPsycopgDA to make it more zope2.9-ish.

   * connect() now accept both integers and strings as port parameter


File: psycopg.info,  Node: What’s new in psycopg 2 0 4,  Next: What’s new in psycopg 2 0 3,  Prev: What’s new in psycopg 2 0 5,  Up: What’s new in psycopg 2 2

15.9.13 What’s new in psycopg 2.0.4
-----------------------------------

   * Fixed float conversion bug introduced in 2.0.3.


File: psycopg.info,  Node: What’s new in psycopg 2 0 3,  Next: What’s new in psycopg 2 0 2,  Prev: What’s new in psycopg 2 0 4,  Up: What’s new in psycopg 2 2

15.9.14 What’s new in psycopg 2.0.3
-----------------------------------

   * Fixed various buglets and a memory leak (see ChangeLog for details)


File: psycopg.info,  Node: What’s new in psycopg 2 0 2,  Next: What’s new in psycopg 2 0 1,  Prev: What’s new in psycopg 2 0 3,  Up: What’s new in psycopg 2 2

15.9.15 What’s new in psycopg 2.0.2
-----------------------------------

   * Fixed a bug in array typecasting that sometimes made psycopg forget
     about the last element in the array.

   * Fixed some minor buglets in string memory allocations.

   * Builds again with compilers different from gcc (#warning about
     PostgreSQL version is issued only if __GCC__ is defined.)


File: psycopg.info,  Node: What’s new in psycopg 2 0 1,  Prev: What’s new in psycopg 2 0 2,  Up: What’s new in psycopg 2 2

15.9.16 What’s new in psycopg 2.0.1
-----------------------------------

   * ZPsycopgDA now actually loads.


File: psycopg.info,  Node: What’s new in psycopg 2 0,  Prev: What’s new in psycopg 2 2,  Up: Release notes

15.10 What’s new in psycopg 2.0
===============================

   * Fixed handle leak on win32.

   * If available the new “safe” encoding functions of libpq are used.

   * django and tinyerp people, please switch to psycopg 2 _without_
     using a psycopg 1 compatibility layer (this release was anticipated
     so that you all stop grumbling about psycopg 2 is still in beta..
     :)

* Menu:

* What’s new in psycopg 2.0 beta 7: What’s new in psycopg 2 0 beta 7.
* What’s new in psycopg 2.0 beta 6: What’s new in psycopg 2 0 beta 6.
* What’s new in psycopg 2.0 beta 5: What’s new in psycopg 2 0 beta 5.
* What’s new in psycopg 2.0 beta 4: What’s new in psycopg 2 0 beta 4.
* What’s new in psycopg 2.0 beta 3: What’s new in psycopg 2 0 beta 3.
* What’s new in psycopg 2.0 beta 2: What’s new in psycopg 2 0 beta 2.
* What’s new in psycopg 2.0 beta 1: What’s new in psycopg 2 0 beta 1.
* What’s new in psycopg 1.99.13: What’s new in psycopg 1 99 13.
* What’s new in psycopg 1.99.12: What’s new in psycopg 1 99 12.
* What’s new in psycopg 1.99.11: What’s new in psycopg 1 99 11.
* What’s new in psycopg 1.99.10: What’s new in psycopg 1 99 10.
* What’s new in psycopg 1.99.9: What’s new in psycopg 1 99 9.
* What’s new in psycopg 1.99.8: What’s new in psycopg 1 99 8.
* What’s new in psycopg 1.99.7: What’s new in psycopg 1 99 7.
* What’s new in psycopg 1.99.6: What’s new in psycopg 1 99 6.
* What’s new in psycopg 1.99.3: What’s new in psycopg 1 99 3.
* What’s new in psycopg 1.99.3: What’s new in psycopg 1 99 3<2>.
* What’s new in psycopg 1.99.2: What’s new in psycopg 1 99 2.
* What’s new in psycopg 1.99.1: What’s new in psycopg 1 99 1.
* What’s new in psycopg 1.99.0: What’s new in psycopg 1 99 0.


File: psycopg.info,  Node: What’s new in psycopg 2 0 beta 7,  Next: What’s new in psycopg 2 0 beta 6,  Up: What’s new in psycopg 2 0

15.10.1 What’s new in psycopg 2.0 beta 7
----------------------------------------

   * Ironed out last problems with times and date (should be quite solid
     now.)

   * Fixed problems with some arrays.

   * Slightly better ZPsycopgDA (no more double connection objects in
     the menu and other minor fixes.)

   * ProgrammingError exceptions now have three extra attributes:
     .cursor (it is possible to access the query that caused the
     exception using error.cursor.query), .pgerror and .pgcode
     (PostgreSQL original error text and code.)

   * The build system uses pg_config when available.

   * Documentation in the doc/ directory!  (With many kudos to piro.)


File: psycopg.info,  Node: What’s new in psycopg 2 0 beta 6,  Next: What’s new in psycopg 2 0 beta 5,  Prev: What’s new in psycopg 2 0 beta 7,  Up: What’s new in psycopg 2 0

15.10.2 What’s new in psycopg 2.0 beta 6
----------------------------------------

   * Support for named cursors.

   * Safer parsing of time intervals.

   * Better parsing of times and dates, no more locale problems.

   * Should now play well with py2exe and similar tools.

   * The “decimal” module is now used if available under Python 2.3.


File: psycopg.info,  Node: What’s new in psycopg 2 0 beta 5,  Next: What’s new in psycopg 2 0 beta 4,  Prev: What’s new in psycopg 2 0 beta 6,  Up: What’s new in psycopg 2 0

15.10.3 What’s new in psycopg 2.0 beta 5
----------------------------------------

   * Fixed all known bugs.

   * The initial isolation level is now read from the server and
     .set_isolation_level() now takes values defined in
     psycopg2.extensions.

   * .callproc() implemented as a SELECT of the given procedure.

   * Better docstrings for a few functions/methods.

   * Some time-related functions like psycopg2.TimeFromTicks() now take
     the local timezone into account.  Also a tzinfo object (as per
     datetime module specifications) can be passed to the psycopg2.Time
     and psycopg2.Datetime constructors.

   * All classes have been renamed to exist in the psycopg2._psycopg
     module, to fix problems with automatic documentation generators
     like epydoc.

   * NOTIFY is correctly trapped.


File: psycopg.info,  Node: What’s new in psycopg 2 0 beta 4,  Next: What’s new in psycopg 2 0 beta 3,  Prev: What’s new in psycopg 2 0 beta 5,  Up: What’s new in psycopg 2 0

15.10.4 What’s new in psycopg 2.0 beta 4
----------------------------------------

   * psycopg module is now named psycopg2.

   * No more segfaults when a UNICODE query can’t be converted to the
     backend encoding.

   * No more segfaults on empty queries.

   * psycopg2.connect() now takes an integer for the port keyword
     parameter.

   * “python setup.py bdist_rpm” now works.

   * Fixed lots of small bugs, see ChangeLog for details.


File: psycopg.info,  Node: What’s new in psycopg 2 0 beta 3,  Next: What’s new in psycopg 2 0 beta 2,  Prev: What’s new in psycopg 2 0 beta 4,  Up: What’s new in psycopg 2 0

15.10.5 What’s new in psycopg 2.0 beta 3
----------------------------------------

   * ZPsycopgDA now works (except table browsing.)

   * psycopg build again on Python 2.2.


File: psycopg.info,  Node: What’s new in psycopg 2 0 beta 2,  Next: What’s new in psycopg 2 0 beta 1,  Prev: What’s new in psycopg 2 0 beta 3,  Up: What’s new in psycopg 2 0

15.10.6 What’s new in psycopg 2.0 beta 2
----------------------------------------

   * Fixed ZPsycopgDA version check (ZPsycopgDA can now be imported in
     Zope.)

   * psycopg.extras.DictRow works even after a new query on the
     generating cursor.

   * Better setup.py for win32 (should build with MSCV or mingw.)

   * Generic fixed and memory leaks plugs.


File: psycopg.info,  Node: What’s new in psycopg 2 0 beta 1,  Next: What’s new in psycopg 1 99 13,  Prev: What’s new in psycopg 2 0 beta 2,  Up: What’s new in psycopg 2 0

15.10.7 What’s new in psycopg 2.0 beta 1
----------------------------------------

   * Officially in beta (i.e., no new features will be added.)

   * Array support: list objects can be passed as bound variables and
     are correctly returned for array columns.

   * Added the psycopg.psycopg1 compatibility module (if you want
     instant psycopg 1 compatibility just “from psycopg import psycopg1
     as psycopg”.)

   * Complete support for BYTEA columns and buffer objects.

   * Added error codes to error messages.

   * The AsIs adapter is now exported by default (also Decimal objects
     are adapted using the AsIs adapter (when str() is called on them
     they already format themselves using the right precision and
     scale.)

   * The connect() function now takes “connection_factory” instead of
     “factory” as keyword argument.

   * New setup.py code to build on win32 using mingw and better error
     messages on missing datetime headers,

   * Internal changes that allow much better user-defined type casters.

   * A lot of bugfixes (binary, datetime, 64 bit arches, GIL,
     .executemany())


File: psycopg.info,  Node: What’s new in psycopg 1 99 13,  Next: What’s new in psycopg 1 99 12,  Prev: What’s new in psycopg 2 0 beta 1,  Up: What’s new in psycopg 2 0

15.10.8 What’s new in psycopg 1.99.13
-------------------------------------

   * Added missing .executemany() method.

   * Optimized type cast from PostgreSQL to Python (psycopg should be
     even faster than before.)


File: psycopg.info,  Node: What’s new in psycopg 1 99 12,  Next: What’s new in psycopg 1 99 11,  Prev: What’s new in psycopg 1 99 13,  Up: What’s new in psycopg 2 0

15.10.9 What’s new in psycopg 1.99.12
-------------------------------------

   * .rowcount should be ok and in sync with psycopg 1.

   * Implemented the new COPY FROM/COPY TO code when connection to the
     backend using libpq protocol 3 (this also removes all asprintf
     calls: build on win32 works again.)  A protocol 3-enabled psycopg
     `can' connect to an old protocol 2 database and will detect it and
     use the right code.

   * getquoted() called for real by the mogrification code.


File: psycopg.info,  Node: What’s new in psycopg 1 99 11,  Next: What’s new in psycopg 1 99 10,  Prev: What’s new in psycopg 1 99 12,  Up: What’s new in psycopg 2 0

15.10.10 What’s new in psycopg 1.99.11
--------------------------------------

   * ‘cursor’ argument in .cursor() connection method renamed to
     ‘cursor_factory’.

   * changed ‘tuple_factory’ cursor attribute name to ‘row_factory’.

   * the .cursor attribute is gone and connections and cursors are
     properly gc-managed.

   * fixes to the async core.


File: psycopg.info,  Node: What’s new in psycopg 1 99 10,  Next: What’s new in psycopg 1 99 9,  Prev: What’s new in psycopg 1 99 11,  Up: What’s new in psycopg 2 0

15.10.11 What’s new in psycopg 1.99.10
--------------------------------------

   * The adapt() function now fully supports the adaptation protocol
     described in PEP 246.  Note that the adapters registry now is
     indexed by (type, protocol) and not by type alone.  Change your
     adapters accordingly.

   * More configuration options moved from setup.py to setup.cfg.

   * Fixed two memory leaks: one in cursor deallocation and one in row
     fetching (.fetchXXX() methods.)


File: psycopg.info,  Node: What’s new in psycopg 1 99 9,  Next: What’s new in psycopg 1 99 8,  Prev: What’s new in psycopg 1 99 10,  Up: What’s new in psycopg 2 0

15.10.12 What’s new in psycopg 1.99.9
-------------------------------------

   * Added simple pooling code (psycopg.pool module).

   * Added DECIMAL typecaster to convert postgresql DECIMAL and NUMERIC
     types (i.e, all types with an OID of NUMERICOID.) Note that the
     DECIMAL typecaster does not set scale and precision on the created
     objects but uses Python defaults.

   * ZPsycopgDA back in and working using the new pooling code.

   * Isn’t that enough?  :)


File: psycopg.info,  Node: What’s new in psycopg 1 99 8,  Next: What’s new in psycopg 1 99 7,  Prev: What’s new in psycopg 1 99 9,  Up: What’s new in psycopg 2 0

15.10.13 What’s new in psycopg 1.99.8
-------------------------------------

   * added support for UNICODE queries.

   * added UNICODE typecaster; to activate it just do:

          psycopg.extensions.register_type(psycopg.extensions.UNICODE)

     Note that the UNICODE typecaster override the STRING one, so it is
     not activated by default.

   * cursors now really support the iterator protocol.

   * solved the rounding errors in time conversions.

   * now cursors support .fileno() and .isready() methods, to be used in
     select() calls.

   * .copy_from() and .copy_in() methods are back in (still using the
     old protocol, will be updated to use new one in next release.)

   * fixed memory corruption bug reported on win32 platform.


File: psycopg.info,  Node: What’s new in psycopg 1 99 7,  Next: What’s new in psycopg 1 99 6,  Prev: What’s new in psycopg 1 99 8,  Up: What’s new in psycopg 2 0

15.10.14 What’s new in psycopg 1.99.7
-------------------------------------

   * added support for tuple factories in cursor objects (removed
     factory argument in favor of a .tuple_factory attribute on the
     cursor object); see the new module psycopg.extras for a cursor
     (DictCursor) that return rows as objects that support indexing both
     by position and column name.

   * added support for tzinfo objects in datetime.timestamp objects: the
     PostgreSQL type “timestamp with time zone” is converted to
     datetime.timestamp with a FixedOffsetTimezone initialized as
     necessary.


File: psycopg.info,  Node: What’s new in psycopg 1 99 6,  Next: What’s new in psycopg 1 99 3,  Prev: What’s new in psycopg 1 99 7,  Up: What’s new in psycopg 2 0

15.10.15 What’s new in psycopg 1.99.6
-------------------------------------

   * sslmode parameter from 1.1.x

   * various datetime conversion improvements.

   * now psycopg should compile without mx or without native datetime
     (not both, obviously.)

   * included various win32/MSVC fixes (pthread.h changes, winsock2
     library, include path in setup.py, etc.)

   * ported interval fixes from 1.1.14/1.1.15.

   * the last query executed by a cursor is now available in the .query
     attribute.

   * conversion of unicode strings to backend encoding now uses a table
     (that still need to be filled.)

   * cursors now have a .mogrify() method that return the query string
     instead of executing it.

   * connection objects now have a .dsn read-only attribute that holds
     the connection string.

   * moved psycopg C module to _psycopg and made psycopg a python
     module: this allows for a neat separation of DBAPI-2.0
     functionality and psycopg extensions; the psycopg namespace will be
     also used to provide python-only extensions (like the pooling code,
     some ZPsycopgDA support functions and the like.)


File: psycopg.info,  Node: What’s new in psycopg 1 99 3,  Next: What’s new in psycopg 1 99 3<2>,  Prev: What’s new in psycopg 1 99 6,  Up: What’s new in psycopg 2 0

15.10.16 What’s new in psycopg 1.99.3
-------------------------------------

   * added support for python 2.3 datetime types (both ways) and made
     datetime the default set of typecasters when available.

   * added example: dt.py.


File: psycopg.info,  Node: What’s new in psycopg 1 99 3<2>,  Next: What’s new in psycopg 1 99 2,  Prev: What’s new in psycopg 1 99 3,  Up: What’s new in psycopg 2 0

15.10.17 What’s new in psycopg 1.99.3
-------------------------------------

   * initial working support for unicode bound variables: UTF-8 and
     latin-1 backend encodings are natively supported (and the
     encoding.py example even works!)

   * added .set_client_encoding() method on the connection object.

   * added examples: encoding.py, binary.py, lastrowid.py.


File: psycopg.info,  Node: What’s new in psycopg 1 99 2,  Next: What’s new in psycopg 1 99 1,  Prev: What’s new in psycopg 1 99 3<2>,  Up: What’s new in psycopg 2 0

15.10.18 What’s new in psycopg 1.99.2
-------------------------------------

   * better typecasting:

        - DateTimeDelta used for postgresql TIME (merge from 1.1)

        - BYTEA now is converted to a real buffer object, not to a
          string

   * buffer objects are now adapted into Binary objects automatically.

   * ported scroll method from 1.1 (DBAPI-2.0 extension for cursors)

   * initial support for some DBAPI-2.0 extensions:

        - .rownumber attribute for cursors

        - .connection attribute for cursors

        - .next() and .__iter__() methods to have cursors support the
          iterator protocol

        - all exception objects are exported to the connection object


File: psycopg.info,  Node: What’s new in psycopg 1 99 1,  Next: What’s new in psycopg 1 99 0,  Prev: What’s new in psycopg 1 99 2,  Up: What’s new in psycopg 2 0

15.10.19 What’s new in psycopg 1.99.1
-------------------------------------

   * implemented microprotocols to adapt arbitrary types to the
     interface used by psycopg to bind variables in execute;

   * moved qstring, pboolean and mxdatetime to the new adapter layout
     (binary is still missing; python 2.3 datetime needs to be written).


File: psycopg.info,  Node: What’s new in psycopg 1 99 0,  Prev: What’s new in psycopg 1 99 1,  Up: What’s new in psycopg 2 0

15.10.20 What’s new in psycopg 1.99.0
-------------------------------------

   * reorganized the whole source tree;

   * async core is in place;

   * splitted QuotedString objects from mx stuff;

   * dropped autotools and moved to pythonic setup.py (needs work.)


File: psycopg.info,  Node: License,  Next: Python Module Index,  Prev: Release notes,  Up: Top

16 License
**********

* Menu:

* psycopg2 and the LGPL::
* Alternative licenses::


File: psycopg.info,  Node: psycopg2 and the LGPL,  Next: Alternative licenses,  Up: License

16.1 psycopg2 and the LGPL
==========================

psycopg2 is free software: you can redistribute it and/or modify it
under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or (at
your option) any later version.

psycopg2 is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public
License for more details.

In addition, as a special exception, the copyright holders give
permission to link this program with the OpenSSL library (or with
modified versions of OpenSSL that use the same license as OpenSSL), and
distribute linked combinations including the two.

You must obey the GNU Lesser General Public License in all respects for
all of the code used other than OpenSSL. If you modify file(s) with this
exception, you may extend this exception to your version of the file(s),
but you are not obligated to do so.  If you do not wish to do so, delete
this exception statement from your version.  If you delete this
exception statement from all source files in the program, then also
delete it here.

You should have received a copy of the GNU Lesser General Public License
along with psycopg2 (see the doc/ directory.)  If not, see
<‘https://www.gnu.org/licenses/’>.


File: psycopg.info,  Node: Alternative licenses,  Prev: psycopg2 and the LGPL,  Up: License

16.2 Alternative licenses
=========================

The following BSD-like license applies (at your option) to the files
following the pattern ‘psycopg/adapter*.{h,c}’ and
‘psycopg/microprotocol*.{h,c}’:

     Permission is granted to anyone to use this software for any
     purpose, including commercial applications, and to alter it and
     redistribute it freely, subject to the following restrictions:

       1. The origin of this software must not be misrepresented; you
          must not claim that you wrote the original software.  If you
          use this software in a product, an acknowledgment in the
          product documentation would be appreciated but is not
          required.

       2. Altered source versions must be plainly marked as such, and
          must not be misrepresented as being the original software.

       3. This notice may not be removed or altered from any source
          distribution.

Indices and tables
==================

   * genindex

   * modindex

   * search


File: psycopg.info,  Node: Python Module Index,  Next: Index,  Prev: License,  Up: Top

Python Module Index
*******************

* Menu:

* psycopg2: 0.
* psycopg2.errorcodes: 1.
* psycopg2.errors: 2.
* psycopg2.extensions: 3.
* psycopg2.extras: 4.
* psycopg2.pool: 5.
* psycopg2.sql: 6.
* psycopg2.tz: 7.


File: psycopg.info,  Node: Index,  Prev: Python Module Index,  Up: Top

Index
*****

 [index ]
* Menu:

* _wrapped (psycopg2.extensions.ISQLQuote attribute): SQL adaptation protocol objects.
                                                              (line  45)
* __libpq_version__ (in module psycopg2): The psycopg2 module content.
                                                              (line 104)
* AbstractConnectionPool (class in psycopg2.pool): psycopg2 pool – Connections pooling.
                                                              (line  10)
* adapt() (in module psycopg2.extensions): SQL adaptation protocol objects.
                                                              (line  12)
* Adaptation:                            Values containing backslashes and LIKE.
                                                              (line  23)
* Adaptation; Creating new adapters:     Connection and cursor factories.
                                                              (line  44)
* Adaptation; Date/Time objects:         Binary adaptation.   (line  37)
* Adaptation; numbers:                   Constants adaptation.
                                                              (line  12)
* adapters (in module psycopg2.extensions): SQL adaptation protocol objects.
                                                              (line 135)
* apilevel (in module psycopg2):         The psycopg2 module content.
                                                              (line  86)
* ARCHFLAGS:                             If you still have problems.
                                                              (line  22)
* Array; Adaptation:                     Lists adaptation.    (line   6)
* arraysize (cursor attribute):          The cursor class.    (line 332)
* AsIs (class in psycopg2.extensions):   SQL adaptation protocol objects.
                                                              (line  70)
* async (connection attribute):          The connection class.
                                                              (line 618)
* Asynchronous; Connection:              Asynchronous notifications.
                                                              (line  71)
* Asynchronous; Notifications:           Type casting of SQL types into Python objects.
                                                              (line  67)
* async_ (connection attribute):         The connection class.
                                                              (line 618)
* Autocommit:                            Tuples adaptation.   (line  28)
* autocommit (connection attribute):     The connection class.
                                                              (line 375)
* Backend; PID:                          The connection class.
                                                              (line 744)
* Begin:                                 Tuples adaptation.   (line  28)
* Binary (class in psycopg2.extensions): SQL adaptation protocol objects.
                                                              (line  97)
* BINARY (in module psycopg2):           Type Objects and Constructors.
                                                              (line  83)
* Binary string:                         Unicode handling.    (line  74)
* Binary() (in module psycopg2):         Type Objects and Constructors.
                                                              (line  68)
* BINARYARRAY (in module psycopg2.extensions): Additional database types.
                                                              (line  30)
* Boolean (class in psycopg2.extensions): SQL adaptation protocol objects.
                                                              (line 115)
* BOOLEAN (in module psycopg2.extensions): Additional database types.
                                                              (line  14)
* Boolean; Adaptation:                   Adaptation of Python values to SQL types.
                                                              (line  17)
* BOOLEANARRAY (in module psycopg2.extensions): Additional database types.
                                                              (line  30)
* Buffer; Adaptation:                    Unicode handling.    (line  75)
* bytea; Adaptation:                     Unicode handling.    (line  75)
* bytearray; Adaptation:                 Unicode handling.    (line  75)
* BYTES (in module psycopg2.extensions): Additional database types.
                                                              (line  14)
* bytes; Adaptation:                     Unicode handling.    (line  75)
* BYTESARRAY (in module psycopg2.extensions): Additional database types.
                                                              (line  30)
* callproc() (cursor method):            The cursor class.    (line 182)
* cancel() (connection method):          The connection class.
                                                              (line 263)
* cast() (cursor method):                The cursor class.    (line 412)
* CIDR; Data types:                      UUID data type.      (line  24)
* Client; Encoding:                      The connection class.
                                                              (line 471)
* Client; Logging:                       The connection class.
                                                              (line 479)
* close() (connection method):           The connection class.
                                                              (line  96)
* close() (cursor method):               The cursor class.    (line  75)
* close() (psycopg2.extensions.lobject method): Classes definitions.
                                                              (line 111)
* closeall() (psycopg2.pool.AbstractConnectionPool method): psycopg2 pool – Connections pooling.
                                                              (line  36)
* closed (connection attribute):         The connection class.
                                                              (line 258)
* closed (cursor attribute):             The cursor class.    (line  86)
* closed (psycopg2.extensions.lobject attribute): Classes definitions.
                                                              (line 115)
* Column (class in psycopg2.extensions): Classes definitions. (line 123)
* Commit:                                Tuples adaptation.   (line  28)
* commit() (connection method):          The connection class.
                                                              (line  70)
* Commit; Prepared:                      The connection class.
                                                              (line 189)
* Composite types; Data types:           Hstore data type.    (line  23)
* connect() (in module psycopg2):        The psycopg2 module content.
                                                              (line   8)
* connection (built-in class):           The connection class.
                                                              (line   6)
* connection (class in psycopg2.extensions): Classes definitions.
                                                              (line  10)
* connection (cursor attribute):         The cursor class.    (line  96)
* Connection status; Constants:          Transaction status constants.
                                                              (line  29)
* Connection string:                     The psycopg2 module content.
                                                              (line   8)
* Connection; Info:                      The connection class.
                                                              (line 528)
* Connection; Parameters:                The psycopg2 module content.
                                                              (line   8)
* Connection; Parameters <1>:            The connection class.
                                                              (line 783)
* Connection; Pooling:                   psycopg2 pool – Connections pooling.
                                                              (line   6)
* Connection; replication:               Replication support objects.
                                                              (line  15)
* Connection; Status:                    The connection class.
                                                              (line 535)
* COPY; SQL command:                     Thread and process safety.
                                                              (line  27)
* copy_expert() (cursor method):         The cursor class.    (line 542)
* copy_from() (cursor method):           The cursor class.    (line 452)
* copy_to() (cursor method):             The cursor class.    (line 499)
* Coroutine:                             Asynchronous support.
                                                              (line  86)
* cursor (built-in class):               The cursor class.    (line   6)
* cursor (class in psycopg2.extensions): Classes definitions. (line  22)
* cursor (psycopg2.Error attribute):     Exceptions.          (line  47)
* cursor() (connection method):          The connection class.
                                                              (line  36)
* Cursor; Dictionary:                    Connection and cursor subclasses.
                                                              (line  17)
* Cursor; Logging:                       namedtuple cursor.   (line   7)
* Cursor; namedtuple:                    Real dictionary cursor.
                                                              (line   5)
* Cursor; replication:                   Replication support objects.
                                                              (line  18)
* Cursor; Replication:                   Replication support objects.
                                                              (line  18)
* cursor_factory (connection attribute): The connection class.
                                                              (line 521)
* Data types; Adaptation:                Values containing backslashes and LIKE.
                                                              (line  22)
* Data types; Additional:                Replication support objects.
                                                              (line  17)
* Data types; Creating new adapters:     Connection and cursor factories.
                                                              (line  43)
* DatabaseError:                         Exceptions.          (line  78)
* DataError:                             Exceptions.          (line  83)
* DATE (in module psycopg2.extensions):  Additional database types.
                                                              (line  14)
* Date objects; Adaptation:              Binary adaptation.   (line  37)
* Date objects; Infinite:                Time zones handling. (line  28)
* Date() (in module psycopg2):           Type Objects and Constructors.
                                                              (line  37)
* DATEARRAY (in module psycopg2.extensions): Additional database types.
                                                              (line  30)
* DateFromMx (class in psycopg2.extensions): SQL adaptation protocol objects.
                                                              (line 128)
* DateFromPy (class in psycopg2.extensions): SQL adaptation protocol objects.
                                                              (line 121)
* DateFromTicks() (in module psycopg2):  Type Objects and Constructors.
                                                              (line  50)
* DATETIME (in module psycopg2):         Type Objects and Constructors.
                                                              (line  92)
* DATETIMEARRAY (in module psycopg2.extensions): Additional database types.
                                                              (line  30)
* debug:                                 Non-standard builds. (line  25)
* DECIMAL (in module psycopg2.extensions): Additional database types.
                                                              (line  14)
* Decimal; Adaptation:                   Constants adaptation.
                                                              (line  11)
* DECIMALARRAY (in module psycopg2.extensions): Additional database types.
                                                              (line  30)
* DECLARE; SQL command:                  with statement.      (line  48)
* deferrable (connection attribute):     The connection class.
                                                              (line 437)
* description (cursor attribute):        The cursor class.    (line  34)
* diag (psycopg2.Error attribute):       Exceptions.          (line  52)
* dict; Adaptation:                      JSON adaptation.     (line  84)
* display_size (psycopg2.extensions.Column attribute): Classes definitions.
                                                              (line 143)
* dsn (connection attribute):            The connection class.
                                                              (line 292)
* DSN (Database Source Name):            The psycopg2 module content.
                                                              (line   8)
* encoding (connection attribute):       The connection class.
                                                              (line 471)
* Encoding; Mapping:                     Database types casting functions.
                                                              (line  81)
* encodings (in module psycopg2.extensions): Database types casting functions.
                                                              (line  81)
* encrypt_password() (in module psycopg2.extensions): Other functions.
                                                              (line  82)
* environment variable; ARCHFLAGS:       If you still have problems.
                                                              (line  22)
* environment variable; LD_LIBRARY_PATH: Runtime requirements.
                                                              (line  13)
* environment variable; PATH:            Build prerequisites. (line  24)
* environment variable; PATH <1>:        Build prerequisites. (line  25)
* environment variable; PATH <2>:        Build prerequisites. (line  29)
* environment variable; PATH <3>:        Non-standard builds. (line  10)
* environment variable; PSYCOPG2_TESTDB: Running the test suite.
                                                              (line  15)
* environment variable; PSYCOPG2_TESTDB_HOST: Running the test suite.
                                                              (line  17)
* environment variable; PSYCOPG2_TESTDB_PORT: Running the test suite.
                                                              (line  19)
* environment variable; PSYCOPG2_TESTDB_USER: Running the test suite.
                                                              (line  21)
* environment variable; PSYCOPG_DEBUG:   Creating a debug build.
                                                              (line  18)
* environment variable; PYTHON_EGG_CACHE: Problems compiling and installing psycopg2.
                                                              (line  49)
* environment variable; standard_conforming_string: SQL adaptation protocol objects.
                                                              (line  64)
* Error:                                 Exceptions.          (line  15)
* Error; Class:                          psycopg2 errors – Exception classes mapping PostgreSQL errors.
                                                              (line   6)
* Error; Codes:                          psycopg2 errorcodes – Error codes defined by PostgreSQL.
                                                              (line   6)
* Eventlet:                              Asynchronous support.
                                                              (line  86)
* Example; Coroutine;:                   Fast execution helpers.
                                                              (line  32)
* Example; Cursor subclass:              Connection and cursor factories.
                                                              (line  22)
* Example; Types adaptation:             Adapting new Python types to SQL syntax.
                                                              (line  43)
* Example; Usage:                        Basic module usage.  (line   6)
* Exceptions; Additional:                Database types casting functions.
                                                              (line  86)
* Exceptions; DB API:                    The psycopg2 module content.
                                                              (line 112)
* Exceptions; In the connection class:   The connection class.
                                                              (line 120)
* execute() (cursor method):             The cursor class.    (line 151)
* executemany() (cursor method):         The cursor class.    (line 165)
* export() (psycopg2.extensions.lobject method): Classes definitions.
                                                              (line  72)
* FETCH; SQL command:                    with statement.      (line  48)
* fetchall() (cursor method):            The cursor class.    (line 288)
* fetchmany() (cursor method):           The cursor class.    (line 256)
* fetchone() (cursor method):            The cursor class.    (line 243)
* fileno() (connection method):          The connection class.
                                                              (line 646)
* Float (class in psycopg2.extensions):  SQL adaptation protocol objects.
                                                              (line 115)
* FLOAT (in module psycopg2.extensions): Additional database types.
                                                              (line  14)
* Float; Adaptation:                     Constants adaptation.
                                                              (line  12)
* FLOATARRAY (in module psycopg2.extensions): Additional database types.
                                                              (line  30)
* getconn() (psycopg2.pool.AbstractConnectionPool method): psycopg2 pool – Connections pooling.
                                                              (line  21)
* getquoted() (psycopg2.extensions.AsIs method): SQL adaptation protocol objects.
                                                              (line  76)
* getquoted() (psycopg2.extensions.Binary method): SQL adaptation protocol objects.
                                                              (line 102)
* getquoted() (psycopg2.extensions.ISQLQuote method): SQL adaptation protocol objects.
                                                              (line  49)
* getquoted() (psycopg2.extensions.QuotedString method): SQL adaptation protocol objects.
                                                              (line  88)
* get_backend_pid() (connection method): The connection class.
                                                              (line 744)
* get_dsn_parameters() (connection method): The connection class.
                                                              (line 783)
* get_native_connection() (connection method): The connection class.
                                                              (line 675)
* get_parameter_status() (connection method): The connection class.
                                                              (line 763)
* get_transaction_status() (connection method): The connection class.
                                                              (line 695)
* gevent:                                Asynchronous support.
                                                              (line  86)
* Greenlet:                              Asynchronous support.
                                                              (line  86)
* Host; Connection:                      The psycopg2 module content.
                                                              (line   8)
* hstore; Data types:                    JSON adaptation.     (line  85)
* IN operator:                           Tuples adaptation.   (line   6)
* INET; Data types:                      UUID data type.      (line  24)
* info (connection attribute):           The connection class.
                                                              (line 528)
* Install; disable wheel:                psycopg vs psycopg-binary.
                                                              (line  28)
* Install; from PyPI:                    Installation.        (line  10)
* Install; wheel:                        Installation.        (line  10)
* INTEGER (in module psycopg2.extensions): Additional database types.
                                                              (line  14)
* Integer; Adaptation:                   Constants adaptation.
                                                              (line  12)
* INTEGERARRAY (in module psycopg2.extensions): Additional database types.
                                                              (line  30)
* IntegrityError:                        Exceptions.          (line  98)
* InterfaceError:                        Exceptions.          (line  72)
* InternalError:                         Exceptions.          (line 104)
* internal_size (psycopg2.extensions.Column attribute): Classes definitions.
                                                              (line 152)
* INTERVAL (in module psycopg2.extensions): Additional database types.
                                                              (line  14)
* Interval objects; Adaptation:          Binary adaptation.   (line  37)
* INTERVALARRAY (in module psycopg2.extensions): Additional database types.
                                                              (line  30)
* IntervalFromMx (class in psycopg2.extensions): SQL adaptation protocol objects.
                                                              (line 128)
* IntervalFromPy (class in psycopg2.extensions): SQL adaptation protocol objects.
                                                              (line 121)
* isexecuting() (connection method):     The connection class.
                                                              (line 651)
* Isolation level; Constants:            Other functions.     (line 118)
* isolation_level (connection attribute): The connection class.
                                                              (line 402)
* ISOLATION_LEVEL_AUTOCOMMIT (in module psycopg2.extensions): Isolation level constants.
                                                              (line  15)
* ISOLATION_LEVEL_DEFAULT (in module psycopg2.extensions): Isolation level constants.
                                                              (line  97)
* ISOLATION_LEVEL_READ_COMMITTED (in module psycopg2.extensions): Isolation level constants.
                                                              (line  33)
* ISOLATION_LEVEL_READ_UNCOMMITTED (in module psycopg2.extensions): Isolation level constants.
                                                              (line  26)
* ISOLATION_LEVEL_REPEATABLE_READ (in module psycopg2.extensions): Isolation level constants.
                                                              (line  51)
* ISOLATION_LEVEL_SERIALIZABLE (in module psycopg2.extensions): Isolation level constants.
                                                              (line  75)
* ISQLQuote (class in psycopg2.extensions): SQL adaptation protocol objects.
                                                              (line  36)
* itersize (cursor attribute):           The cursor class.    (line 338)
* JSON; Adaptation:                      Additional data types.
                                                              (line   6)
* JSON; Data types:                      Additional data types.
                                                              (line   6)
* Large objects:                         Using COPY TO and COPY FROM.
                                                              (line  33)
* lastrowid (cursor attribute):          The cursor class.    (line 375)
* LD_LIBRARY_PATH:                       Runtime requirements.
                                                              (line  13)
* libpq_version() (in module psycopg2.extensions): Other functions.
                                                              (line   6)
* License:                               What’s new in psycopg 1 99 0.
                                                              (line  13)
* LISTEN; SQL command:                   Type casting of SQL types into Python objects.
                                                              (line  67)
* Lists; Adaptation:                     Lists adaptation.    (line   6)
* lobject (class in psycopg2.extensions): Classes definitions.
                                                              (line  32)
* lobject() (connection method):         The connection class.
                                                              (line 544)
* LONGINTEGER (in module psycopg2.extensions): Additional database types.
                                                              (line  14)
* LONGINTEGERARRAY (in module psycopg2.extensions): Additional database types.
                                                              (line  30)
* MACADDR; Data types:                   UUID data type.      (line  23)
* make_dsn() (in module psycopg2.extensions): Other functions.
                                                              (line  22)
* memoryview; Adaptation:                Unicode handling.    (line  75)
* Message; replication:                  Replication support objects.
                                                              (line  15)
* mode (psycopg2.extensions.lobject attribute): Classes definitions.
                                                              (line  47)
* mogrify() (cursor method):             The cursor class.    (line 202)
* MOVE; SQL command:                     with statement.      (line  47)
* Multiprocess:                          Server side cursors. (line  78)
* Multithread:                           Server side cursors. (line  79)
* Multithread; Connection pooling:       psycopg2 pool – Connections pooling.
                                                              (line  45)
* mx.DateTime; Adaptation:               Binary adaptation.   (line  36)
* MXDATE (in module psycopg2.extensions): Additional database types.
                                                              (line  61)
* MXDATEARRAY (in module psycopg2.extensions): Additional database types.
                                                              (line  61)
* MXDATETIME (in module psycopg2.extensions): Additional database types.
                                                              (line  61)
* MXDATETIMEARRAY (in module psycopg2.extensions): Additional database types.
                                                              (line  61)
* MXDATETIMETZ (in module psycopg2.extensions): Additional database types.
                                                              (line  61)
* MXDATETIMETZARRAY (in module psycopg2.extensions): Additional database types.
                                                              (line  61)
* MXINTERVAL (in module psycopg2.extensions): Additional database types.
                                                              (line  61)
* MXINTERVALARRAY (in module psycopg2.extensions): Additional database types.
                                                              (line  61)
* MXTIME (in module psycopg2.extensions): Additional database types.
                                                              (line  61)
* MXTIMEARRAY (in module psycopg2.extensions): Additional database types.
                                                              (line  61)
* name (cursor attribute):               The cursor class.    (line 101)
* name (psycopg2.extensions.Column attribute): Classes definitions.
                                                              (line 131)
* Named; Cursor:                         with statement.      (line  48)
* namedtuple; Adaptation:                Hstore data type.    (line  22)
* News:                                  Problems compiling and installing psycopg2.
                                                              (line  52)
* new_array_type() (in module psycopg2.extensions): Database types casting functions.
                                                              (line  36)
* new_type() (in module psycopg2.extensions): Database types casting functions.
                                                              (line  10)
* nextset() (cursor method):             The cursor class.    (line 432)
* None; Adaptation:                      Adaptation of Python values to SQL types.
                                                              (line  17)
* notices (connection attribute):        The connection class.
                                                              (line 479)
* notifies (connection attribute):       The connection class.
                                                              (line 503)
* NOTIFY; SQL command:                   Type casting of SQL types into Python objects.
                                                              (line  66)
* NotSupportedError:                     Exceptions.          (line 117)
* NULL; Adaptation:                      Adaptation of Python values to SQL types.
                                                              (line  17)
* null_ok (psycopg2.extensions.Column attribute): Classes definitions.
                                                              (line 168)
* NUMBER (in module psycopg2):           Type Objects and Constructors.
                                                              (line  88)
* Objects; Adaptation:                   Values containing backslashes and LIKE.
                                                              (line  23)
* Objects; Creating new adapters:        Connection and cursor factories.
                                                              (line  44)
* oid:                                   The cursor class.    (line 375)
* oid (psycopg2.extensions.lobject attribute): Classes definitions.
                                                              (line  43)
* OperationalError:                      Exceptions.          (line  89)
* paramstyle (in module psycopg2):       The psycopg2 module content.
                                                              (line  98)
* parse_dsn() (in module psycopg2.extensions): Other functions.
                                                              (line  43)
* Password; Connection:                  The psycopg2 module content.
                                                              (line   8)
* PATH:                                  Build prerequisites. (line  24)
* PATH <1>:                              Build prerequisites. (line  25)
* PATH <2>:                              Build prerequisites. (line  29)
* PATH <3>:                              Non-standard builds. (line  10)
* PgBouncer; unclean server:             The connection class.
                                                              (line 108)
* pgcode (psycopg2.Error attribute):     Exceptions.          (line  28)
* pgconn_ptr (connection attribute):     The connection class.
                                                              (line 659)
* pgerror (psycopg2.Error attribute):    Exceptions.          (line  23)
* pgresult_ptr (cursor attribute):       The cursor class.    (line 589)
* Poll status; Constants:                Connection status constants.
                                                              (line  35)
* poll() (connection method):            The connection class.
                                                              (line 627)
* POLL_ERROR (in module psycopg2.extensions): Poll constants. (line  36)
* POLL_OK (in module psycopg2.extensions): Poll constants.    (line  13)
* POLL_READ (in module psycopg2.extensions): Poll constants.  (line  18)
* POLL_WRITE (in module psycopg2.extensions): Poll constants. (line  27)
* Port; Connection:                      The psycopg2 module content.
                                                              (line   8)
* precision (psycopg2.extensions.Column attribute): Classes definitions.
                                                              (line 158)
* prepare() (psycopg2.extensions.ISQLQuote method): SQL adaptation protocol objects.
                                                              (line  56)
* Prerequisites:                         Change in binary packages between Psycopg 2 7 and 2 8.
                                                              (line  25)
* ProgrammingError:                      Exceptions.          (line 110)
* Protocol; Version:                     The connection class.
                                                              (line 709)
* protocol_version (connection attribute): The connection class.
                                                              (line 709)
* psycopg2 (module):                     The psycopg2 module content.
                                                              (line   6)
* psycopg2.errorcodes (module):          psycopg2 errorcodes – Error codes defined by PostgreSQL.
                                                              (line   6)
* psycopg2.errors (module):              psycopg2 errors – Exception classes mapping PostgreSQL errors.
                                                              (line   6)
* psycopg2.extensions (module):          psycopg2 extensions – Extensions to the DB API.
                                                              (line   6)
* psycopg2.extras (module):              psycopg2 extras – Miscellaneous goodies for Psycopg 2.
                                                              (line   6)
* psycopg2.pool (module):                psycopg2 pool – Connections pooling.
                                                              (line   6)
* psycopg2.sql (module):                 psycopg2 sql – SQL string composition.
                                                              (line   6)
* psycopg2.tz (module):                  psycopg2 tz – tzinfo implementations for Psycopg 2.
                                                              (line   6)
* PSYCOPG2_TESTDB:                       Running the test suite.
                                                              (line  15)
* PSYCOPG2_TESTDB_HOST:                  Running the test suite.
                                                              (line  17)
* PSYCOPG2_TESTDB_PORT:                  Running the test suite.
                                                              (line  19)
* PSYCOPG2_TESTDB_USER:                  Running the test suite.
                                                              (line  21)
* PSYCOPG_DEBUG:                         Non-standard builds. (line  25)
* PSYCOPG_DEBUG <1>:                     Creating a debug build.
                                                              (line  18)
* putconn() (psycopg2.pool.AbstractConnectionPool method): psycopg2 pool – Connections pooling.
                                                              (line  29)
* PYDATE (in module psycopg2.extensions): Additional database types.
                                                              (line  47)
* PYDATEARRAY (in module psycopg2.extensions): Additional database types.
                                                              (line  47)
* PYDATETIME (in module psycopg2.extensions): Additional database types.
                                                              (line  47)
* PYDATETIMEARRAY (in module psycopg2.extensions): Additional database types.
                                                              (line  47)
* PYDATETIMETZ (in module psycopg2.extensions): Additional database types.
                                                              (line  47)
* PYDATETIMETZARRAY (in module psycopg2.extensions): Additional database types.
                                                              (line  47)
* PYINTERVAL (in module psycopg2.extensions): Additional database types.
                                                              (line  47)
* PYINTERVALARRAY (in module psycopg2.extensions): Additional database types.
                                                              (line  47)
* Python Enhancement Proposals; PEP 246: Adapting new Python types to SQL syntax.
                                                              (line   7)
* Python Enhancement Proposals; PEP 246 <1>: SQL adaptation protocol objects.
                                                              (line   7)
* PYTHON_EGG_CACHE:                      Problems compiling and installing psycopg2.
                                                              (line  49)
* PYTIME (in module psycopg2.extensions): Additional database types.
                                                              (line  47)
* PYTIMEARRAY (in module psycopg2.extensions): Additional database types.
                                                              (line  47)
* query (cursor attribute):              The cursor class.    (line 387)
* Query; Parameters:                     Basic module usage.  (line  61)
* QueryCanceledError:                    Additional exceptions.
                                                              (line  12)
* QuotedString (class in psycopg2.extensions): SQL adaptation protocol objects.
                                                              (line  83)
* quote_ident() (in module psycopg2.extensions): Other functions.
                                                              (line  67)
* range; Data types:                     Composite types casting.
                                                              (line  49)
* Read only:                             Tuples adaptation.   (line  27)
* read() (psycopg2.extensions.lobject method): Classes definitions.
                                                              (line  53)
* readonly (connection attribute):       The connection class.
                                                              (line 427)
* register_adapter() (in module psycopg2.extensions): SQL adaptation protocol objects.
                                                              (line  24)
* register_type() (in module psycopg2.extensions): Database types casting functions.
                                                              (line  69)
* Release notes:                         Problems compiling and installing psycopg2.
                                                              (line  53)
* Replication:                           Support for coroutine libraries.
                                                              (line  72)
* REPLICATION_LOGICAL (in module psycopg2.extras): Replication support objects.
                                                              (line  11)
* REPLICATION_PHYSICAL (in module psycopg2.extras): Replication support objects.
                                                              (line  13)
* reset() (connection method):           The connection class.
                                                              (line 279)
* Rollback:                              Tuples adaptation.   (line  28)
* rollback() (connection method):        The connection class.
                                                              (line  86)
* Rollback; Prepared:                    The connection class.
                                                              (line 212)
* rowcount (cursor attribute):           The cursor class.    (line 350)
* ROWID (in module psycopg2):            Type Objects and Constructors.
                                                              (line  97)
* ROWIDARRAY (in module psycopg2.extensions): Additional database types.
                                                              (line  30)
* rownumber (cursor attribute):          The cursor class.    (line 365)
* scale (psycopg2.extensions.Column attribute): Classes definitions.
                                                              (line 163)
* scroll() (cursor method):              The cursor class.    (line 302)
* scrollable (cursor attribute):         The cursor class.    (line 111)
* Security:                              Passing parameters to SQL queries.
                                                              (line  90)
* seek() (psycopg2.extensions.lobject method): Classes definitions.
                                                              (line  78)
* Server side; Cursor:                   with statement.      (line  48)
* Server; Parameters:                    The connection class.
                                                              (line 763)
* Server; Version:                       The connection class.
                                                              (line 726)
* server_version (connection attribute): The connection class.
                                                              (line 726)
* setinputsizes() (cursor method):       The cursor class.    (line 216)
* setoutputsize() (cursor method):       The cursor class.    (line 438)
* setup.cfg:                             Runtime requirements.
                                                              (line  26)
* setup.py:                              Runtime requirements.
                                                              (line  27)
* set_client_encoding() (connection method): The connection class.
                                                              (line 473)
* set_isolation_level() (connection method): The connection class.
                                                              (line 447)
* set_session() (connection method):     The connection class.
                                                              (line 303)
* SQL injection:                         Passing parameters to SQL queries.
                                                              (line  90)
* SQL_IN (class in psycopg2.extensions): SQL adaptation protocol objects.
                                                              (line 115)
* standard_conforming_string:            SQL adaptation protocol objects.
                                                              (line  64)
* status (connection attribute):         The connection class.
                                                              (line 535)
* statusmessage (cursor attribute):      The cursor class.    (line 400)
* STATUS_BEGIN (in module psycopg2.extensions): Connection status constants.
                                                              (line  19)
* STATUS_IN_TRANSACTION (in module psycopg2.extensions): Connection status constants.
                                                              (line  23)
* STATUS_PREPARED (in module psycopg2.extensions): Connection status constants.
                                                              (line  27)
* STATUS_READY (in module psycopg2.extensions): Connection status constants.
                                                              (line  15)
* STRING (in module psycopg2):           Type Objects and Constructors.
                                                              (line  78)
* STRINGARRAY (in module psycopg2.extensions): Additional database types.
                                                              (line  30)
* Strings; Adaptation:                   Numbers adaptation.  (line  26)
* string_types (in module psycopg2.extensions): Database types casting functions.
                                                              (line  77)
* Subclassing; Connection:               More advanced topics.
                                                              (line   6)
* Subclassing; Cursor:                   More advanced topics.
                                                              (line   6)
* table_column (psycopg2.extensions.Column attribute): Classes definitions.
                                                              (line 180)
* table_oid (psycopg2.extensions.Column attribute): Classes definitions.
                                                              (line 172)
* tell() (psycopg2.extensions.lobject method): Classes definitions.
                                                              (line  84)
* tests:                                 Non-standard Python Implementation.
                                                              (line  19)
* Thread safety:                         Server side cursors. (line  79)
* threadsafety (in module psycopg2):     The psycopg2 module content.
                                                              (line  91)
* TIME (in module psycopg2.extensions):  Additional database types.
                                                              (line  14)
* Time objects; Adaptation:              Binary adaptation.   (line  37)
* Time Zones:                            Date/Time objects adaptation.
                                                              (line  26)
* Time() (in module psycopg2):           Type Objects and Constructors.
                                                              (line  41)
* TIMEARRAY (in module psycopg2.extensions): Additional database types.
                                                              (line  30)
* TimeFromMx (class in psycopg2.extensions): SQL adaptation protocol objects.
                                                              (line 128)
* TimeFromPy (class in psycopg2.extensions): SQL adaptation protocol objects.
                                                              (line 121)
* TimeFromTicks() (in module psycopg2):  Type Objects and Constructors.
                                                              (line  56)
* Timestamp() (in module psycopg2):      Type Objects and Constructors.
                                                              (line  45)
* TimestampFromMx (class in psycopg2.extensions): SQL adaptation protocol objects.
                                                              (line 128)
* TimestampFromPy (class in psycopg2.extensions): SQL adaptation protocol objects.
                                                              (line 121)
* TimestampFromTicks() (in module psycopg2): Type Objects and Constructors.
                                                              (line  62)
* tpc_begin() (connection method):       The connection class.
                                                              (line 152)
* tpc_commit() (connection method):      The connection class.
                                                              (line 189)
* tpc_prepare() (connection method):     The connection class.
                                                              (line 170)
* tpc_recover() (connection method):     The connection class.
                                                              (line 231)
* tpc_rollback() (connection method):    The connection class.
                                                              (line 212)
* Transaction:                           Tuples adaptation.   (line  28)
* Transaction status; Constants:         Isolation level constants.
                                                              (line 107)
* Transaction; Autocommit:               The connection class.
                                                              (line 303)
* Transaction; Commit:                   The connection class.
                                                              (line  70)
* Transaction; Isolation level:          The connection class.
                                                              (line 303)
* Transaction; Prepare:                  The connection class.
                                                              (line 170)
* Transaction; Recover:                  The connection class.
                                                              (line 231)
* Transaction; Rollback:                 The connection class.
                                                              (line  86)
* Transaction; Status:                   The connection class.
                                                              (line 695)
* TransactionRollbackError:              Additional exceptions.
                                                              (line  21)
* TRANSACTION_STATUS_ACTIVE (in module psycopg2.extensions): Transaction status constants.
                                                              (line  14)
* TRANSACTION_STATUS_IDLE (in module psycopg2.extensions): Transaction status constants.
                                                              (line  10)
* TRANSACTION_STATUS_INERROR (in module psycopg2.extensions): Transaction status constants.
                                                              (line  22)
* TRANSACTION_STATUS_INTRANS (in module psycopg2.extensions): Transaction status constants.
                                                              (line  18)
* TRANSACTION_STATUS_UNKNOWN (in module psycopg2.extensions): Transaction status constants.
                                                              (line  26)
* truncate() (psycopg2.extensions.lobject method): Classes definitions.
                                                              (line  92)
* Tuple; Adaptation:                     Tuples adaptation.   (line   6)
* tuple; Adaptation:                     Hstore data type.    (line  23)
* Two-phase commit; methods:             The connection class.
                                                              (line 127)
* Two-phase commit; Transaction:         Access to PostgreSQL large objects.
                                                              (line  34)
* Type casting:                          Adapting new Python types to SQL syntax.
                                                              (line  66)
* type_code (psycopg2.extensions.Column attribute): Classes definitions.
                                                              (line 135)
* tzinfo_factory (cursor attribute):     The cursor class.    (line 425)
* Unicode:                               Strings adaptation.  (line  14)
* UNICODE (in module psycopg2.extensions): Additional database types.
                                                              (line  14)
* Unicode; Adaptation:                   Numbers adaptation.  (line  25)
* UNICODEARRAY (in module psycopg2.extensions): Additional database types.
                                                              (line  30)
* unlink() (psycopg2.extensions.lobject method): Classes definitions.
                                                              (line 119)
* Username; Connection:                  The psycopg2 module content.
                                                              (line   8)
* UUID; Data types:                      Range data types.    (line  28)
* Wait callback:                         Asynchronous support.
                                                              (line  85)
* Warning:                               Exceptions.          (line   9)
* Wheel:                                 Installation.        (line  10)
* Wheel; disable:                        psycopg vs psycopg-binary.
                                                              (line  27)
* with statement:                        Transactions control.
                                                              (line  46)
* withhold (cursor attribute):           The cursor class.    (line 130)
* write() (psycopg2.extensions.lobject method): Classes definitions.
                                                              (line  64)
* xid() (connection method):             The connection class.
                                                              (line 140)



Tag Table:
Node: Top376
Ref: index doc598
Ref: 8598
Ref: Top-Footnote-110976
Ref: Top-Footnote-211005
Ref: Top-Footnote-311041
Ref: Top-Footnote-411073
Ref: Top-Footnote-511123
Node: Installation11189
Ref: install doc11281
Ref: f11281
Ref: install id111281
Ref: 1011281
Ref: install installation11281
Ref: 1111281
Ref: install psycopg-postgresql-database-adapter-for-python11281
Ref: 1211281
Ref: Installation-Footnote-111627
Ref: Installation-Footnote-211663
Ref: Installation-Footnote-311695
Node: Quick Install11761
Ref: install binary-packages11846
Ref: 1311846
Ref: install quick-install11846
Ref: 1411846
Ref: Quick Install-Footnote-112865
Ref: Quick Install-Footnote-212899
Node: psycopg vs psycopg-binary12949
Ref: install psycopg-vs-psycopg-binary13087
Ref: 1513087
Ref: install wheel13087
Ref: 1613087
Ref: psycopg vs psycopg-binary-Footnote-114369
Node: Change in binary packages between Psycopg 2 7 and 2 814431
Ref: install change-in-binary-packages-between-psycopg-2-7-and-2-814569
Ref: 1714569
Ref: install disable-wheel14569
Ref: 1814569
Ref: Change in binary packages between Psycopg 2 7 and 2 8-Footnote-115599
Node: Prerequisites15679
Ref: install prerequisites15792
Ref: 1a15792
Node: Build prerequisites16103
Ref: install build-prerequisites16202
Ref: 1916202
Ref: install id316202
Ref: 1b16202
Ref: Build prerequisites-Footnote-117871
Ref: Build prerequisites-Footnote-217915
Node: Runtime requirements17981
Ref: install runtime-requirements18080
Ref: 1c18080
Ref: Runtime requirements-Footnote-119393
Node: Non-standard builds19459
Ref: install non-standard-builds19581
Ref: 1d19581
Node: Creating a debug build20290
Ref: install creating-a-debug-build20412
Ref: 1f20412
Ref: install debug-build20412
Ref: 1e20412
Ref: Creating a debug build-Footnote-121233
Node: Non-standard Python Implementation21282
Ref: install id421404
Ref: 2021404
Ref: install non-standard-python-implementation21404
Ref: 2121404
Ref: Non-standard Python Implementation-Footnote-122157
Ref: Non-standard Python Implementation-Footnote-222203
Ref: Non-standard Python Implementation-Footnote-322260
Node: Running the test suite22305
Ref: install running-the-test-suite22440
Ref: 2222440
Ref: install test-suite22440
Ref: 2322440
Node: If you still have problems23109
Ref: install if-you-still-have-problems23216
Ref: 2423216
Ref: install other-problems23216
Ref: 2523216
Ref: If you still have problems-Footnote-123963
Ref: If you still have problems-Footnote-224012
Node: Basic module usage24063
Ref: usage doc24179
Ref: 2724179
Ref: usage basic-module-usage24179
Ref: 2824179
Ref: usage mx-datetime24179
Ref: 2924179
Ref: usage usage24179
Ref: 2a24179
Ref: Basic module usage-Footnote-126489
Node: Passing parameters to SQL queries26539
Ref: usage passing-parameters-to-sql-queries26677
Ref: 3726677
Ref: usage query-parameters26677
Ref: 3826677
Ref: usage python-types-adaptation27032
Ref: d27032
Ref: usage id127032
Ref: 3927032
Ref: usage sql-injection28888
Ref: 3a28888
Ref: usage id228888
Ref: 3b28888
Node: The problem with the query parameters30943
Ref: usage the-problem-with-the-query-parameters31098
Ref: 3c31098
Ref: usage id532788
Ref: 3d32788
Ref: The problem with the query parameters-Footnote-133303
Ref: The problem with the query parameters-Footnote-233355
Node: Values containing backslashes and LIKE33385
Ref: usage values-containing-backslashes-and-like33540
Ref: 3e33540
Node: Adaptation of Python values to SQL types34286
Ref: usage adaptation-of-python-values-to-sql-types34453
Ref: 3f34453
Node: Constants adaptation35158
Ref: usage adapt-consts35283
Ref: 4135283
Ref: usage constants-adaptation35283
Ref: 4235283
Ref: Constants adaptation-Footnote-135572
Ref: Constants adaptation-Footnote-235634
Ref: Constants adaptation-Footnote-335696
Node: Numbers adaptation35759
Ref: usage adapt-numbers35911
Ref: 4335911
Ref: usage numbers-adaptation35911
Ref: 4435911
Ref: Numbers adaptation-Footnote-136758
Ref: Numbers adaptation-Footnote-236819
Ref: Numbers adaptation-Footnote-336882
Ref: Numbers adaptation-Footnote-436953
Node: Strings adaptation37031
Ref: usage adapt-string37180
Ref: 4637180
Ref: usage strings-adaptation37180
Ref: 4737180
Ref: Strings adaptation-Footnote-137786
Node: Unicode handling37846
Ref: usage id637918
Ref: 4a37918
Ref: usage unicode-handling37918
Ref: 4937918
Ref: Unicode handling-Footnote-140929
Ref: Unicode handling-Footnote-240999
Node: Binary adaptation41051
Ref: usage adapt-binary41210
Ref: 4f41210
Ref: usage binary-adaptation41210
Ref: 5041210
Ref: Binary adaptation-Footnote-142935
Ref: Binary adaptation-Footnote-243002
Ref: Binary adaptation-Footnote-343068
Ref: Binary adaptation-Footnote-443130
Ref: Binary adaptation-Footnote-543180
Ref: Binary adaptation-Footnote-643257
Node: Date/Time objects adaptation43357
Ref: usage adapt-date43514
Ref: 5243514
Ref: usage date-time-objects-adaptation43514
Ref: 5343514
Ref: Date/Time objects adaptation-Footnote-144385
Ref: Date/Time objects adaptation-Footnote-244459
Ref: Date/Time objects adaptation-Footnote-344529
Ref: Date/Time objects adaptation-Footnote-444599
Ref: Date/Time objects adaptation-Footnote-544675
Ref: Date/Time objects adaptation-Footnote-644741
Node: Time zones handling44820
Ref: usage time-zones-handling44937
Ref: 5444937
Ref: usage tz-handling44937
Ref: 5544937
Ref: Time zones handling-Footnote-146117
Ref: Time zones handling-Footnote-246191
Ref: Time zones handling-Footnote-346273
Node: Infinite dates handling46345
Ref: usage id1246484
Ref: 5646484
Ref: usage infinite-dates-handling46484
Ref: 5746484
Node: Time handling47688
Ref: usage id1347799
Ref: 5847799
Ref: usage time-handling47799
Ref: 5947799
Ref: Time handling-Footnote-148528
Node: Lists adaptation48598
Ref: usage adapt-list48755
Ref: 5a48755
Ref: usage lists-adaptation48755
Ref: 5b48755
Ref: Lists adaptation-Footnote-149703
Node: Tuples adaptation49811
Ref: usage adapt-tuple49931
Ref: 5d49931
Ref: usage tuples-adaptation49931
Ref: 5e49931
Ref: Tuples adaptation-Footnote-150914
Node: Transactions control50997
Ref: usage id1551150
Ref: 5f51150
Ref: usage transactions-control51150
Ref: 6051150
Ref: Transactions control-Footnote-153536
Ref: Transactions control-Footnote-253570
Node: with statement53629
Ref: usage with-statement53701
Ref: 6453701
Node: Server side cursors55139
Ref: usage id1755277
Ref: 6555277
Ref: usage server-side-cursors55277
Ref: 955277
Ref: Server side cursors-Footnote-158909
Node: Thread and process safety58981
Ref: usage thread-and-process-safety59126
Ref: 6b59126
Ref: usage thread-safety59126
Ref: 6c59126
Ref: Thread and process safety-Footnote-160451
Ref: Thread and process safety-Footnote-260501
Ref: Thread and process safety-Footnote-360590
Node: Using COPY TO and COPY FROM60677
Ref: usage copy60837
Ref: c60837
Ref: usage using-copy-to-and-copy-from60837
Ref: 6e60837
Ref: usage id1961299
Ref: 6f61299
Ref: Using COPY TO and COPY FROM-Footnote-161983
Node: Access to PostgreSQL large objects62052
Ref: usage access-to-postgresql-large-objects62220
Ref: 7362220
Ref: usage large-objects62220
Ref: 7462220
Ref: Access to PostgreSQL large objects-Footnote-163580
Ref: Access to PostgreSQL large objects-Footnote-263653
Ref: Access to PostgreSQL large objects-Footnote-363738
Node: Two-Phase Commit protocol support63823
Ref: usage tpc63955
Ref: 7863955
Ref: usage two-phase-commit-protocol-support63955
Ref: 7963955
Ref: Two-Phase Commit protocol support-Footnote-165988
Ref: Two-Phase Commit protocol support-Footnote-266036
Node: The psycopg2 module content66073
Ref: module doc66197
Ref: 8066197
Ref: module module-psycopg266197
Ref: 066197
Ref: module mx-datetime66197
Ref: 8166197
Ref: module the-psycopg2-module-content66197
Ref: 8266197
Ref: module psycopg2 connect66340
Ref: 2b66340
Ref: module id167929
Ref: 8367929
Ref: module id267929
Ref: 8467929
Ref: module id367929
Ref: 8567929
Ref: module psycopg2 apilevel69332
Ref: 8969332
Ref: module psycopg2 threadsafety69462
Ref: 8a69462
Ref: module psycopg2 paramstyle69738
Ref: 8b69738
Ref: module psycopg2 __libpq_version__69973
Ref: 8c69973
Ref: The psycopg2 module content-Footnote-170450
Ref: The psycopg2 module content-Footnote-270500
Ref: The psycopg2 module content-Footnote-370592
Ref: The psycopg2 module content-Footnote-470687
Ref: The psycopg2 module content-Footnote-570760
Ref: The psycopg2 module content-Footnote-670852
Ref: The psycopg2 module content-Footnote-770947
Ref: The psycopg2 module content-Footnote-871020
Node: Exceptions71070
Ref: module dbapi-exceptions71183
Ref: 8e71183
Ref: module exceptions71183
Ref: 8f71183
Ref: module psycopg2 Warning71340
Ref: 9071340
Ref: module psycopg2 Error71553
Ref: 9171553
Ref: module psycopg2 Error pgerror71904
Ref: 9271904
Ref: module psycopg2 Error pgcode72046
Ref: 9372046
Ref: module psycopg2 Error cursor72631
Ref: 9472631
Ref: module psycopg2 Error diag72749
Ref: 9572749
Ref: module psycopg2 InterfaceError73331
Ref: 9673331
Ref: module psycopg2 DatabaseError73529
Ref: 9773529
Ref: module psycopg2 DataError73679
Ref: 9873679
Ref: module psycopg2 OperationalError73909
Ref: 9973909
Ref: module psycopg2 IntegrityError74331
Ref: 9a74331
Ref: module psycopg2 InternalError74542
Ref: 9b74542
Ref: module psycopg2 ProgrammingError74784
Ref: 9c74784
Ref: module psycopg2 NotSupportedError75053
Ref: 9d75053
Ref: Exceptions-Footnote-176388
Ref: Exceptions-Footnote-276438
Ref: Exceptions-Footnote-376506
Ref: Exceptions-Footnote-476574
Node: Type Objects and Constructors76636
Ref: module id776749
Ref: 9e76749
Ref: module type-objects-and-constructors76749
Ref: 9f76749
Ref: module psycopg2 Date78478
Ref: a078478
Ref: module psycopg2 Time78589
Ref: a178589
Ref: module psycopg2 Timestamp78704
Ref: a278704
Ref: module psycopg2 DateFromTicks78858
Ref: a378858
Ref: module psycopg2 TimeFromTicks79110
Ref: a479110
Ref: module psycopg2 TimestampFromTicks79362
Ref: a579362
Ref: module psycopg2 Binary79625
Ref: 5179625
Ref: module psycopg2 STRING80039
Ref: a680039
Ref: module psycopg2 BINARY80172
Ref: a780172
Ref: module psycopg2 NUMBER80309
Ref: a880309
Ref: module psycopg2 DATETIME80410
Ref: a980410
Ref: module psycopg2 ROWID80520
Ref: aa80520
Ref: Type Objects and Constructors-Footnote-180669
Node: The connection class80719
Ref: connection doc80841
Ref: ab80841
Ref: connection mx-datetime80841
Ref: ac80841
Ref: connection the-connection-class80841
Ref: ad80841
Ref: connection connection80896
Ref: 2c80896
Ref: connection connection cursor81898
Ref: 2e81898
Ref: connection connection commit83463
Ref: 2f83463
Ref: connection connection rollback84142
Ref: 3084142
Ref: connection connection close84556
Ref: 6184556
Ref: connection tpc-methods86624
Ref: b386624
Ref: connection connection xid86624
Ref: 7a86624
Ref: connection connection tpc_begin87149
Ref: 7b87149
Ref: connection connection tpc_prepare87956
Ref: 7c87956
Ref: connection connection tpc_commit88754
Ref: 7d88754
Ref: connection connection tpc_rollback89653
Ref: 7e89653
Ref: connection connection tpc_recover90315
Ref: 7f90315
Ref: connection connection closed91463
Ref: b691463
Ref: connection connection cancel91605
Ref: b791605
Ref: connection connection reset92325
Ref: b592325
Ref: connection connection dsn92786
Ref: b992786
Ref: connection connection set_session93100
Ref: 6393100
Ref: connection connection autocommit96288
Ref: 6296288
Ref: connection connection isolation_level97548
Ref: bb97548
Ref: connection connection readonly98829
Ref: be98829
Ref: connection connection deferrable99223
Ref: bf99223
Ref: connection connection set_isolation_level99641
Ref: b099641
Ref: connection connection encoding100740
Ref: 48100740
Ref: connection connection set_client_encoding100770
Ref: c0100770
Ref: connection connection notices101024
Ref: c1101024
Ref: connection connection notifies102256
Ref: c2102256
Ref: connection connection cursor_factory103067
Ref: 87103067
Ref: connection connection info103245
Ref: c3103245
Ref: connection connection status103409
Ref: b1103409
Ref: connection connection lobject103771
Ref: 76103771
Ref: connection connection async106385
Ref: c5106385
Ref: connection connection async_106411
Ref: c6106411
Ref: connection connection poll106657
Ref: c7106657
Ref: connection connection fileno107639
Ref: ca107639
Ref: connection connection isexecuting107803
Ref: cb107803
Ref: connection connection pgconn_ptr108024
Ref: cc108024
Ref: connection connection get_native_connection108622
Ref: cd108622
Ref: connection connection get_transaction_status109275
Ref: ce109275
Ref: connection connection protocol_version109763
Ref: d0109763
Ref: connection connection server_version110309
Ref: 77110309
Ref: connection connection get_backend_pid110853
Ref: d1110853
Ref: connection connection get_parameter_status111485
Ref: d2111485
Ref: connection connection get_dsn_parameters112184
Ref: d3112184
Ref: The connection class-Footnote-1112804
Ref: The connection class-Footnote-2112838
Ref: The connection class-Footnote-3112923
Ref: The connection class-Footnote-4113004
Ref: The connection class-Footnote-5113087
Ref: The connection class-Footnote-6113124
Ref: The connection class-Footnote-7113208
Ref: The connection class-Footnote-8113297
Ref: The connection class-Footnote-9113367
Ref: The connection class-Footnote-10113458
Ref: The connection class-Footnote-11113536
Ref: The connection class-Footnote-12113654
Ref: The connection class-Footnote-13113772
Ref: The connection class-Footnote-14113891
Ref: The connection class-Footnote-15113973
Ref: The connection class-Footnote-16114051
Ref: The connection class-Footnote-17114133
Ref: The connection class-Footnote-18114211
Ref: The connection class-Footnote-19114282
Ref: The connection class-Footnote-20114367
Ref: The connection class-Footnote-21114453
Ref: The connection class-Footnote-22114522
Ref: The connection class-Footnote-23114578
Ref: The connection class-Footnote-24114679
Ref: The connection class-Footnote-25114778
Ref: The connection class-Footnote-26114875
Ref: The connection class-Footnote-27114910
Ref: The connection class-Footnote-28115004
Ref: The connection class-Footnote-29115103
Node: The cursor class115196
Ref: cursor doc115311
Ref: d4115311
Ref: cursor mx-datetime115311
Ref: d5115311
Ref: cursor the-cursor-class115311
Ref: d6115311
Ref: cursor cursor115358
Ref: 2d115358
Ref: cursor cursor description116517
Ref: d7116517
Ref: cursor cursor close118254
Ref: 6a118254
Ref: cursor cursor closed118708
Ref: e1118708
Ref: cursor cursor connection118983
Ref: e2118983
Ref: cursor cursor name119147
Ref: e3119147
Ref: cursor cursor scrollable119509
Ref: 67119509
Ref: cursor cursor withhold120332
Ref: 69120332
Ref: cursor execute121045
Ref: d9121045
Ref: cursor cursor execute121111
Ref: 31121111
Ref: cursor cursor executemany121677
Ref: 32121677
Ref: cursor cursor callproc122415
Ref: e6122415
Ref: cursor cursor mogrify123348
Ref: e7123348
Ref: cursor cursor setinputsizes123916
Ref: e8123916
Ref: cursor fetch124088
Ref: e4124088
Ref: cursor cursor-iterable124259
Ref: 33124259
Ref: cursor cursor fetchone124934
Ref: 34124934
Ref: cursor cursor fetchmany125412
Ref: 35125412
Ref: cursor cursor fetchall126852
Ref: 36126852
Ref: cursor cursor scroll127395
Ref: 66127395
Ref: cursor cursor arraysize128764
Ref: e9128764
Ref: cursor cursor itersize128987
Ref: 68128987
Ref: cursor cursor rowcount129367
Ref: ea129367
Ref: cursor cursor rownumber130101
Ref: eb130101
Ref: cursor cursor lastrowid130507
Ref: ec130507
Ref: cursor cursor query131079
Ref: ed131079
Ref: cursor cursor statusmessage131588
Ref: ee131588
Ref: cursor cursor cast131977
Ref: ef131977
Ref: cursor cursor tzinfo_factory132334
Ref: f0132334
Ref: cursor cursor nextset132606
Ref: f1132606
Ref: cursor cursor setoutputsize132798
Ref: f2132798
Ref: cursor cursor copy_from133319
Ref: 70133319
Ref: cursor cursor copy_to135173
Ref: 71135173
Ref: cursor cursor copy_expert136695
Ref: 72136695
Ref: cursor cursor pgresult_ptr138484
Ref: f3138484
Ref: The cursor class-Footnote-1139136
Ref: The cursor class-Footnote-2139227
Ref: The cursor class-Footnote-3139277
Ref: The cursor class-Footnote-4139327
Ref: The cursor class-Footnote-5139404
Ref: The cursor class-Footnote-6139475
Ref: The cursor class-Footnote-7139547
Ref: The cursor class-Footnote-8139611
Ref: The cursor class-Footnote-9139675
Ref: The cursor class-Footnote-10139744
Ref: The cursor class-Footnote-11139809
Node: More advanced topics139878
Ref: advanced doc140021
Ref: f4140021
Ref: advanced more-advanced-topics140021
Ref: f5140021
Ref: advanced mx-datetime140021
Ref: f6140021
Ref: advanced subclassing-connection140068
Ref: 86140068
Node: Connection and cursor factories140333
Ref: advanced connection-and-cursor-factories140470
Ref: f7140470
Ref: advanced subclassing-cursor140470
Ref: af140470
Node: Adapting new Python types to SQL syntax142092
Ref: advanced adapting-new-python-types-to-sql-syntax142283
Ref: fa142283
Ref: advanced adapting-new-types142283
Ref: e142283
Ref: Adapting new Python types to SQL syntax-Footnote-1145171
Ref: Adapting new Python types to SQL syntax-Footnote-2145220
Node: Type casting of SQL types into Python objects145319
Ref: advanced type-casting-from-sql-to-python145505
Ref: 40145505
Ref: advanced type-casting-of-sql-types-into-python-objects145505
Ref: 100145505
Node: Asynchronous notifications148054
Ref: advanced async-notify148221
Ref: b148221
Ref: advanced asynchronous-notifications148221
Ref: 103148221
Ref: Asynchronous notifications-Footnote-1150952
Ref: Asynchronous notifications-Footnote-2151023
Ref: Asynchronous notifications-Footnote-3151094
Ref: Asynchronous notifications-Footnote-4151165
Ref: Asynchronous notifications-Footnote-5151233
Node: Asynchronous support151311
Ref: advanced async-support151464
Ref: a151464
Ref: advanced asynchronous-support151464
Ref: 104151464
Ref: Asynchronous support-Footnote-1155338
Ref: Asynchronous support-Footnote-2155406
Node: Support for coroutine libraries155508
Ref: advanced green-support155663
Ref: 6d155663
Ref: advanced support-for-coroutine-libraries155663
Ref: 105155663
Ref: Support for coroutine libraries-Footnote-1159021
Ref: Support for coroutine libraries-Footnote-2159069
Ref: Support for coroutine libraries-Footnote-3159099
Ref: Support for coroutine libraries-Footnote-4159130
Ref: Support for coroutine libraries-Footnote-5159182
Ref: Support for coroutine libraries-Footnote-6159254
Ref: Support for coroutine libraries-Footnote-7159290
Node: Replication protocol support159337
Ref: advanced replication-protocol-support159463
Ref: 106159463
Ref: advanced replication-support159463
Ref: 107159463
Ref: Replication protocol support-Footnote-1160107
Node: Logical replication Quick-Start160189
Ref: advanced logical-replication-quick-start160286
Ref: 108160286
Node: psycopg2 extensions – Extensions to the DB API162566
Ref: extensions doc162748
Ref: 10a162748
Ref: extensions module-psycopg2 extensions162748
Ref: 3162748
Ref: extensions mx-datetime162748
Ref: 10b162748
Ref: extensions psycopg2-extensions-extensions-to-the-db-api162748
Ref: 10c162748
Ref: psycopg2 extensions – Extensions to the DB API-Footnote-1163346
Node: Classes definitions163396
Ref: extensions classes-definitions163541
Ref: 10d163541
Ref: extensions psycopg2 extensions connection163752
Ref: f8163752
Ref: extensions psycopg2 extensions cursor164315
Ref: ae164315
Ref: extensions psycopg2 extensions lobject164801
Ref: 75164801
Ref: extensions psycopg2 extensions lobject oid165171
Ref: 10e165171
Ref: extensions psycopg2 extensions lobject mode165235
Ref: 10f165235
Ref: extensions psycopg2 extensions lobject read165403
Ref: 110165403
Ref: extensions psycopg2 extensions lobject write165803
Ref: 111165803
Ref: extensions psycopg2 extensions lobject export166078
Ref: 112166078
Ref: extensions psycopg2 extensions lobject seek166250
Ref: 113166250
Ref: extensions psycopg2 extensions lobject tell166406
Ref: 114166406
Ref: extensions psycopg2 extensions lobject truncate166584
Ref: 115166584
Ref: extensions psycopg2 extensions lobject close167384
Ref: 117167384
Ref: extensions psycopg2 extensions lobject closed167440
Ref: 118167440
Ref: extensions psycopg2 extensions lobject unlink167533
Ref: 119167533
Ref: extensions psycopg2 extensions Column167622
Ref: d8167622
Ref: extensions psycopg2 extensions Column name167919
Ref: da167919
Ref: extensions psycopg2 extensions Column type_code167989
Ref: db167989
Ref: extensions psycopg2 extensions Column display_size168344
Ref: dc168344
Ref: extensions psycopg2 extensions Column internal_size168672
Ref: dd168672
Ref: extensions psycopg2 extensions Column precision168881
Ref: de168881
Ref: extensions psycopg2 extensions Column scale169027
Ref: df169027
Ref: extensions psycopg2 extensions Column null_ok169185
Ref: e0169185
Ref: extensions psycopg2 extensions Column table_oid169283
Ref: 11a169283
Ref: extensions psycopg2 extensions Column table_column169556
Ref: 11b169556
Ref: Classes definitions-Footnote-1169923
Ref: Classes definitions-Footnote-2170008
Ref: Classes definitions-Footnote-3170095
Ref: Classes definitions-Footnote-4170172
Ref: Classes definitions-Footnote-5170258
Ref: Classes definitions-Footnote-6170361
Ref: Classes definitions-Footnote-7170448
Node: SQL adaptation protocol objects170538
Ref: extensions sql-adaptation-objects170724
Ref: 11c170724
Ref: extensions sql-adaptation-protocol-objects170724
Ref: 11d170724
Ref: extensions psycopg2 extensions adapt171085
Ref: fb171085
Ref: extensions psycopg2 extensions register_adapter171611
Ref: fe171611
Ref: extensions psycopg2 extensions ISQLQuote172128
Ref: fc172128
Ref: extensions psycopg2 extensions ISQLQuote _wrapped172506
Ref: 11f172506
Ref: extensions psycopg2 extensions ISQLQuote getquoted172592
Ref: 11e172592
Ref: extensions psycopg2 extensions ISQLQuote prepare172882
Ref: fd172882
Ref: extensions psycopg2 extensions AsIs173548
Ref: ff173548
Ref: extensions psycopg2 extensions AsIs getquoted173750
Ref: 121173750
Ref: extensions psycopg2 extensions QuotedString173910
Ref: 122173910
Ref: extensions psycopg2 extensions QuotedString getquoted174050
Ref: 123174050
Ref: extensions psycopg2 extensions Binary174384
Ref: 124174384
Ref: extensions psycopg2 extensions Binary getquoted174513
Ref: 125174513
Ref: extensions psycopg2 extensions Boolean175045
Ref: 126175045
Ref: extensions psycopg2 extensions Float175084
Ref: 127175084
Ref: extensions psycopg2 extensions SQL_IN175121
Ref: 120175121
Ref: extensions psycopg2 extensions DateFromPy175208
Ref: 128175208
Ref: extensions psycopg2 extensions TimeFromPy175250
Ref: 129175250
Ref: extensions psycopg2 extensions TimestampFromPy175292
Ref: 12a175292
Ref: extensions psycopg2 extensions IntervalFromPy175339
Ref: 12b175339
Ref: extensions psycopg2 extensions DateFromMx175442
Ref: 12c175442
Ref: extensions psycopg2 extensions TimeFromMx175484
Ref: 12d175484
Ref: extensions psycopg2 extensions TimestampFromMx175526
Ref: 12e175526
Ref: extensions psycopg2 extensions IntervalFromMx175573
Ref: 12f175573
Ref: extensions psycopg2 extensions adapters175675
Ref: 130175675
Ref: SQL adaptation protocol objects-Footnote-1175887
Ref: SQL adaptation protocol objects-Footnote-2175936
Node: Database types casting functions176002
Ref: extensions database-types-casting-functions176190
Ref: 131176190
Ref: extensions psycopg2 extensions new_type176445
Ref: 101176445
Ref: extensions psycopg2 extensions new_array_type177419
Ref: 102177419
Ref: extensions cast-array-unknown178218
Ref: 5c178218
Ref: extensions psycopg2 extensions register_type178804
Ref: 4d178804
Ref: extensions psycopg2 extensions string_types179151
Ref: 132179151
Ref: extensions psycopg2 extensions encodings179238
Ref: 4b179238
Ref: Database types casting functions-Footnote-1179487
Ref: Database types casting functions-Footnote-2179557
Node: Additional exceptions179628
Ref: extensions additional-exceptions179813
Ref: 133179813
Ref: extensions extension-exceptions179813
Ref: 134179813
Ref: extensions psycopg2 extensions QueryCanceledError180089
Ref: b8180089
Ref: extensions psycopg2 extensions TransactionRollbackError180324
Ref: 135180324
Ref: Additional exceptions-Footnote-1180643
Node: Coroutines support functions180693
Ref: extensions coroutines-functions180861
Ref: 136180861
Ref: extensions coroutines-support-functions180861
Ref: 137180861
Node: Other functions181069
Ref: extensions other-functions181241
Ref: 138181241
Ref: extensions psycopg2 extensions libpq_version181282
Ref: 8d181282
Ref: extensions psycopg2 extensions make_dsn181777
Ref: 139181777
Ref: extensions psycopg2 extensions parse_dsn182589
Ref: 88182589
Ref: extensions psycopg2 extensions quote_ident183478
Ref: 13a183478
Ref: extensions psycopg2 extensions encrypt_password183874
Ref: 13b183874
Ref: Other functions-Footnote-1185255
Ref: Other functions-Footnote-2185346
Ref: Other functions-Footnote-3185438
Ref: Other functions-Footnote-4185535
Ref: Other functions-Footnote-5185632
Ref: Other functions-Footnote-6185712
Ref: Other functions-Footnote-7185823
Ref: Other functions-Footnote-8185923
Node: Isolation level constants186019
Ref: extensions id11186191
Ref: 13c186191
Ref: extensions isolation-level-constants186191
Ref: ba186191
Ref: extensions psycopg2 extensions ISOLATION_LEVEL_AUTOCOMMIT186785
Ref: bd186785
Ref: extensions psycopg2 extensions ISOLATION_LEVEL_READ_UNCOMMITTED187225
Ref: 13d187225
Ref: extensions psycopg2 extensions ISOLATION_LEVEL_READ_COMMITTED187523
Ref: 13e187523
Ref: extensions psycopg2 extensions ISOLATION_LEVEL_REPEATABLE_READ188270
Ref: 13f188270
Ref: extensions psycopg2 extensions ISOLATION_LEVEL_SERIALIZABLE189334
Ref: 140189334
Ref: extensions psycopg2 extensions ISOLATION_LEVEL_DEFAULT190316
Ref: bc190316
Ref: Isolation level constants-Footnote-1190837
Ref: Isolation level constants-Footnote-2190914
Ref: Isolation level constants-Footnote-3191011
Ref: Isolation level constants-Footnote-4191109
Node: Transaction status constants191204
Ref: extensions id15191388
Ref: 141191388
Ref: extensions transaction-status-constants191388
Ref: cf191388
Ref: extensions psycopg2 extensions TRANSACTION_STATUS_IDLE191608
Ref: 142191608
Ref: extensions psycopg2 extensions TRANSACTION_STATUS_ACTIVE191726
Ref: 143191726
Ref: extensions psycopg2 extensions TRANSACTION_STATUS_INTRANS191825
Ref: 144191825
Ref: extensions psycopg2 extensions TRANSACTION_STATUS_INERROR191939
Ref: 145191939
Ref: extensions psycopg2 extensions TRANSACTION_STATUS_UNKNOWN192054
Ref: 146192054
Node: Connection status constants192169
Ref: extensions connection-status-constants192342
Ref: c4192342
Ref: extensions id16192342
Ref: 147192342
Ref: extensions psycopg2 extensions STATUS_READY192827
Ref: b4192827
Ref: extensions psycopg2 extensions STATUS_BEGIN192930
Ref: 148192930
Ref: extensions psycopg2 extensions STATUS_IN_TRANSACTION193045
Ref: b2193045
Ref: extensions psycopg2 extensions STATUS_PREPARED193142
Ref: 149193142
Node: Poll constants193493
Ref: extensions id17193663
Ref: 14a193663
Ref: extensions poll-constants193663
Ref: c8193663
Ref: extensions psycopg2 extensions POLL_OK193994
Ref: c9193994
Ref: extensions psycopg2 extensions POLL_READ194158
Ref: 14b194158
Ref: extensions psycopg2 extensions POLL_WRITE194506
Ref: 14c194506
Ref: extensions psycopg2 extensions POLL_ERROR194855
Ref: 14d194855
Node: Additional database types195093
Ref: extensions additional-database-types195227
Ref: 14e195227
Ref: extensions psycopg2 extensions BOOLEAN195732
Ref: 150195732
Ref: extensions psycopg2 extensions BYTES195770
Ref: 4e195770
Ref: extensions psycopg2 extensions DATE195806
Ref: 151195806
Ref: extensions psycopg2 extensions DECIMAL195841
Ref: 152195841
Ref: extensions psycopg2 extensions FLOAT195879
Ref: 153195879
Ref: extensions psycopg2 extensions INTEGER195915
Ref: 154195915
Ref: extensions psycopg2 extensions INTERVAL195953
Ref: 155195953
Ref: extensions psycopg2 extensions LONGINTEGER195992
Ref: 156195992
Ref: extensions psycopg2 extensions TIME196034
Ref: 157196034
Ref: extensions psycopg2 extensions UNICODE196069
Ref: 4c196069
Ref: extensions psycopg2 extensions BINARYARRAY196354
Ref: 158196354
Ref: extensions psycopg2 extensions BOOLEANARRAY196396
Ref: 159196396
Ref: extensions psycopg2 extensions BYTESARRAY196439
Ref: 15a196439
Ref: extensions psycopg2 extensions DATEARRAY196480
Ref: 15b196480
Ref: extensions psycopg2 extensions DATETIMEARRAY196520
Ref: 15c196520
Ref: extensions psycopg2 extensions DECIMALARRAY196564
Ref: 15d196564
Ref: extensions psycopg2 extensions FLOATARRAY196607
Ref: 15e196607
Ref: extensions psycopg2 extensions INTEGERARRAY196648
Ref: 15f196648
Ref: extensions psycopg2 extensions INTERVALARRAY196691
Ref: 160196691
Ref: extensions psycopg2 extensions LONGINTEGERARRAY196735
Ref: 161196735
Ref: extensions psycopg2 extensions ROWIDARRAY196782
Ref: 162196782
Ref: extensions psycopg2 extensions STRINGARRAY196823
Ref: 163196823
Ref: extensions psycopg2 extensions TIMEARRAY196865
Ref: 164196865
Ref: extensions psycopg2 extensions UNICODEARRAY196905
Ref: 14f196905
Ref: extensions psycopg2 extensions PYDATE197017
Ref: 165197017
Ref: extensions psycopg2 extensions PYDATETIME197054
Ref: 166197054
Ref: extensions psycopg2 extensions PYDATETIMETZ197095
Ref: 167197095
Ref: extensions psycopg2 extensions PYINTERVAL197138
Ref: 168197138
Ref: extensions psycopg2 extensions PYTIME197179
Ref: 169197179
Ref: extensions psycopg2 extensions PYDATEARRAY197216
Ref: 16a197216
Ref: extensions psycopg2 extensions PYDATETIMEARRAY197258
Ref: 16b197258
Ref: extensions psycopg2 extensions PYDATETIMETZARRAY197304
Ref: 16c197304
Ref: extensions psycopg2 extensions PYINTERVALARRAY197352
Ref: 16d197352
Ref: extensions psycopg2 extensions PYTIMEARRAY197398
Ref: 16e197398
Ref: extensions psycopg2 extensions MXDATE197533
Ref: 16f197533
Ref: extensions psycopg2 extensions MXDATETIME197570
Ref: 170197570
Ref: extensions psycopg2 extensions MXDATETIMETZ197611
Ref: 171197611
Ref: extensions psycopg2 extensions MXINTERVAL197654
Ref: 172197654
Ref: extensions psycopg2 extensions MXTIME197695
Ref: 173197695
Ref: extensions psycopg2 extensions MXDATEARRAY197732
Ref: 174197732
Ref: extensions psycopg2 extensions MXDATETIMEARRAY197774
Ref: 175197774
Ref: extensions psycopg2 extensions MXDATETIMETZARRAY197820
Ref: 176197820
Ref: extensions psycopg2 extensions MXINTERVALARRAY197868
Ref: 177197868
Ref: extensions psycopg2 extensions MXTIMEARRAY197914
Ref: 178197914
Ref: Additional database types-Footnote-1198553
Ref: Additional database types-Footnote-2198603
Node: psycopg2 extras – Miscellaneous goodies for Psycopg 2198669
Ref: extras doc198894
Ref: 179198894
Ref: extras module-psycopg2 extras198894
Ref: 4198894
Ref: extras mx-datetime198894
Ref: 17a198894
Ref: extras psycopg2-extras-miscellaneous-goodies-for-psycopg-2198894
Ref: 17b198894
Node: Connection and cursor subclasses199303
Ref: extras connection-and-cursor-subclasses199464
Ref: 17c199464
Ref: extras cursor-subclasses199464
Ref: f9199464
Node: Dictionary-like cursor200227
Ref: extras dict-cursor200350
Ref: 17d200350
Ref: extras dictionary-like-cursor200350
Ref: 17e200350
Node: Real dictionary cursor201017
Ref: extras real-dictionary-cursor201166
Ref: 17f201166
Node: namedtuple cursor201225
Ref: extras namedtuple-cursor201366
Ref: 180201366
Node: Logging cursor201444
Ref: extras logging-cursor201554
Ref: 181201554
Node: Replication support objects201693
Ref: extras replication-objects201884
Ref: 109201884
Ref: extras replication-support-objects201884
Ref: 182201884
Ref: extras psycopg2 extras REPLICATION_LOGICAL202075
Ref: 183202075
Ref: extras psycopg2 extras REPLICATION_PHYSICAL202122
Ref: 184202122
Node: Additional data types202307
Ref: extras additional-data-types202488
Ref: 185202488
Node: JSON adaptation202686
Ref: extras adapt-json202785
Ref: 186202785
Ref: extras json-adaptation202785
Ref: 187202785
Ref: JSON adaptation-Footnote-1206214
Ref: JSON adaptation-Footnote-2206288
Ref: JSON adaptation-Footnote-3206405
Ref: JSON adaptation-Footnote-4206469
Ref: JSON adaptation-Footnote-5206540
Node: Hstore data type206580
Ref: extras adapt-hstore206711
Ref: 189206711
Ref: extras hstore-data-type206711
Ref: 18a206711
Ref: Hstore data type-Footnote-1207658
Node: Composite types casting207725
Ref: extras adapt-composite207857
Ref: 18b207857
Ref: extras composite-types-casting207857
Ref: 18c207857
Ref: extras custom-composite209087
Ref: 18d209087
Ref: Composite types casting-Footnote-1209810
Ref: Composite types casting-Footnote-2209886
Node: Range data types209969
Ref: extras adapt-range210099
Ref: 18e210099
Ref: extras range-data-types210099
Ref: 18f210099
Ref: Range data types-Footnote-1211362
Ref: Range data types-Footnote-2211433
Node: UUID data type211509
Ref: extras adapt-uuid211637
Ref: 190211637
Ref: extras uuid-data-type211637
Ref: 191211637
Node: Networking data types212319
Ref: extras adapt-network212422
Ref: 192212422
Ref: extras networking-data-types212422
Ref: 193212422
Node: Fast execution helpers213054
Ref: extras fast-exec213225
Ref: e5213225
Ref: extras fast-execution-helpers213225
Ref: 194213225
Ref: Fast execution helpers-Footnote-1214553
Ref: Fast execution helpers-Footnote-2214632
Ref: Fast execution helpers-Footnote-3214704
Ref: Fast execution helpers-Footnote-4214776
Node: Coroutine support214852
Ref: extras coroutine-support214993
Ref: 195214993
Node: psycopg2 errors – Exception classes mapping PostgreSQL errors215038
Ref: errors doc215254
Ref: 196215254
Ref: errors mx-datetime215254
Ref: 197215254
Ref: errors psycopg2-errors-exception-classes-mapping-postgresql-errors215254
Ref: 198215254
Ref: errors module-psycopg2 errors215393
Ref: 2215393
Ref: psycopg2 errors – Exception classes mapping PostgreSQL errors-Footnote-1217465
Node: SQLSTATE exception classes217559
Ref: errors sqlstate-exception-classes217686
Ref: 199217686
Node: psycopg2 sql – SQL string composition218049
Ref: sql doc218262
Ref: 19a218262
Ref: sql module-psycopg2 sql218262
Ref: 6218262
Ref: sql mx-datetime218262
Ref: 19b218262
Ref: sql psycopg2-sql-sql-string-composition218262
Ref: 19c218262
Node: Module usage220350
Ref: sql module-usage220459
Ref: 19d220459
Node: sql objects221811
Ref: sql sql-objects221920
Ref: 19e221920
Node: psycopg2 tz – tzinfo implementations for Psycopg 2222521
Ref: tz doc222708
Ref: 19f222708
Ref: tz module-psycopg2 tz222708
Ref: 7222708
Ref: tz mx-datetime222708
Ref: 1a0222708
Ref: tz psycopg2-tz-tzinfo-implementations-for-psycopg-2222708
Ref: 1a1222708
Ref: psycopg2 tz – tzinfo implementations for Psycopg 2-Footnote-1223113
Node: psycopg2 pool – Connections pooling223187
Ref: pool doc223392
Ref: 1a2223392
Ref: pool mx-datetime223392
Ref: 1a3223392
Ref: pool psycopg2-pool-connections-pooling223392
Ref: 1a4223392
Ref: pool module-psycopg2 pool223481
Ref: 5223481
Ref: pool psycopg2 pool AbstractConnectionPool223670
Ref: 1a5223670
Ref: pool psycopg2 pool AbstractConnectionPool getconn224108
Ref: 1a6224108
Ref: pool psycopg2 pool AbstractConnectionPool putconn224396
Ref: 1a7224396
Ref: pool psycopg2 pool AbstractConnectionPool closeall224632
Ref: 1a8224632
Node: psycopg2 errorcodes – Error codes defined by PostgreSQL224927
Ref: errorcodes doc225106
Ref: 1a9225106
Ref: errorcodes mx-datetime225106
Ref: 1aa225106
Ref: errorcodes psycopg2-errorcodes-error-codes-defined-by-postgresql225106
Ref: 1ab225106
Ref: errorcodes module-psycopg2 errorcodes225235
Ref: 1225235
Ref: psycopg2 errorcodes – Error codes defined by PostgreSQL-Footnote-1226961
Node: Frequently Asked Questions227055
Ref: faq doc227210
Ref: 1ac227210
Ref: faq frequently-asked-questions227210
Ref: 1ad227210
Ref: faq mx-datetime227210
Ref: 1ae227210
Node: Meta227533
Ref: faq meta227645
Ref: 1af227645
Ref: faq faq-question227666
Ref: 1b0227666
Ref: Meta-Footnote-1228256
Node: Problems with transactions handling228305
Ref: faq faq-transactions228456
Ref: 1b1228456
Ref: faq problems-with-transactions-handling228456
Ref: 1b2228456
Ref: faq faq-idle-in-transaction228539
Ref: 1b3228539
Ref: faq faq-transaction-aborted229311
Ref: 1b4229311
Ref: faq faq-transaction-aborted-multiprocess229825
Ref: 1b5229825
Ref: Problems with transactions handling-Footnote-1230334
Node: Problems with type conversions230408
Ref: faq faq-types230569
Ref: 1b6230569
Ref: faq problems-with-type-conversions230569
Ref: 1b7230569
Ref: faq faq-cant-adapt230642
Ref: 1b8230642
Ref: faq faq-number-required231043
Ref: 1b9231043
Ref: faq faq-not-all-arguments-converted231598
Ref: 1ba231598
Ref: faq faq-unicode232322
Ref: 1bb232322
Ref: faq faq-bytes232707
Ref: 1bc232707
Ref: faq faq-float233145
Ref: 45233145
Ref: faq faq-json-adapt233835
Ref: 1bd233835
Ref: faq faq-jsonb-adapt234194
Ref: 188234194
Ref: faq faq-identifier234753
Ref: 1be234753
Ref: faq faq-bytea-9-0235308
Ref: 1bf235308
Ref: faq faq-array235973
Ref: 1c0235973
Ref: Problems with type conversions-Footnote-1236436
Ref: Problems with type conversions-Footnote-2236513
Node: Best practices236613
Ref: faq best-practices236781
Ref: 1c1236781
Ref: faq faq-best-practices236781
Ref: 1c2236781
Ref: faq faq-reuse-cursors236822
Ref: 1c3236822
Ref: faq faq-reuse-connections237446
Ref: 1c4237446
Ref: faq faq-named-cursors237955
Ref: 1c5237955
Ref: faq faq-interrupt-query238488
Ref: 1c6238488
Ref: Best practices-Footnote-1239571
Node: Problems compiling and installing psycopg2239665
Ref: faq faq-compile239794
Ref: 26239794
Ref: faq problems-compiling-and-installing-psycopg2239794
Ref: 1c7239794
Ref: faq faq-wheels239891
Ref: 1c8239891
Ref: faq faq-python-h240193
Ref: 1c9240193
Ref: faq faq-libpq-fe-h240470
Ref: 1ca240470
Ref: faq faq-lo-truncate240706
Ref: 116240706
Ref: faq faq-import-mod-wsgi241596
Ref: 1cb241596
Ref: Problems compiling and installing psycopg2-Footnote-1242066
Ref: Problems compiling and installing psycopg2-Footnote-2242153
Ref: Problems compiling and installing psycopg2-Footnote-3242212
Ref: Problems compiling and installing psycopg2-Footnote-4242311
Node: Release notes242407
Ref: news doc242512
Ref: 1cc242512
Ref: news mx-datetime242512
Ref: 1cd242512
Ref: news release-notes242512
Ref: 1ce242512
Node: Current release243117
Ref: news current-release243219
Ref: 1cf243219
Node: What’s new in psycopg 2 9243262
Ref: news what-s-new-in-psycopg-2-9243400
Ref: 1d0243400
Ref: What’s new in psycopg 2 9-Footnote-1244125
Node: What’s new in psycopg 2 8 6244181
Ref: news what-s-new-in-psycopg-2-8-6244313
Ref: 1d1244313
Ref: What’s new in psycopg 2 8 6-Footnote-1244975
Ref: What’s new in psycopg 2 8 6-Footnote-2245031
Ref: What’s new in psycopg 2 8 6-Footnote-3245086
Ref: What’s new in psycopg 2 8 6-Footnote-4245142
Ref: What’s new in psycopg 2 8 6-Footnote-5245198
Node: What’s new in psycopg 2 8 5245254
Ref: news what-s-new-in-psycopg-2-8-5245424
Ref: 1d2245424
Ref: What’s new in psycopg 2 8 5-Footnote-1245942
Ref: What’s new in psycopg 2 8 5-Footnote-2245998
Ref: What’s new in psycopg 2 8 5-Footnote-3246076
Ref: What’s new in psycopg 2 8 5-Footnote-4246132
Ref: What’s new in psycopg 2 8 5-Footnote-5246188
Ref: What’s new in psycopg 2 8 5-Footnote-6246244
Node: What’s new in psycopg 2 8 4246300
Ref: news what-s-new-in-psycopg-2-8-4246470
Ref: 1d3246470
Ref: What’s new in psycopg 2 8 4-Footnote-1247222
Ref: What’s new in psycopg 2 8 4-Footnote-2247277
Ref: What’s new in psycopg 2 8 4-Footnote-3247332
Ref: What’s new in psycopg 2 8 4-Footnote-4247387
Ref: What’s new in psycopg 2 8 4-Footnote-5247442
Node: What’s new in psycopg 2 8 3247497
Ref: news what-s-new-in-psycopg-2-8-3247667
Ref: 1d4247667
Ref: What’s new in psycopg 2 8 3-Footnote-1248032
Ref: What’s new in psycopg 2 8 3-Footnote-2248087
Node: What’s new in psycopg 2 8 2248142
Ref: news what-s-new-in-psycopg-2-8-2248312
Ref: 1d5248312
Ref: What’s new in psycopg 2 8 2-Footnote-1248624
Ref: What’s new in psycopg 2 8 2-Footnote-2248679
Ref: What’s new in psycopg 2 8 2-Footnote-3248734
Node: What’s new in psycopg 2 8 1248789
Ref: news what-s-new-in-psycopg-2-8-1248921
Ref: 1d6248921
Ref: What’s new in psycopg 2 8 1-Footnote-1249201
Ref: What’s new in psycopg 2 8 1-Footnote-2249256
Node: What’s new in psycopg 2 8249311
Ref: news what-s-new-in-psycopg-2-8249461
Ref: 1d7249461
Ref: What’s new in psycopg 2 8-Footnote-1253162
Ref: What’s new in psycopg 2 8-Footnote-2253217
Ref: What’s new in psycopg 2 8-Footnote-3253272
Ref: What’s new in psycopg 2 8-Footnote-4253327
Ref: What’s new in psycopg 2 8-Footnote-5253382
Ref: What’s new in psycopg 2 8-Footnote-6253437
Ref: What’s new in psycopg 2 8-Footnote-7253492
Ref: What’s new in psycopg 2 8-Footnote-8253547
Ref: What’s new in psycopg 2 8-Footnote-9253602
Ref: What’s new in psycopg 2 8-Footnote-10253657
Ref: What’s new in psycopg 2 8-Footnote-11253713
Ref: What’s new in psycopg 2 8-Footnote-12253769
Ref: What’s new in psycopg 2 8-Footnote-13253825
Ref: What’s new in psycopg 2 8-Footnote-14253881
Ref: What’s new in psycopg 2 8-Footnote-15253937
Ref: What’s new in psycopg 2 8-Footnote-16253993
Ref: What’s new in psycopg 2 8-Footnote-17254049
Ref: What’s new in psycopg 2 8-Footnote-18254115
Node: What’s new in psycopg 2 7 7254171
Ref: news what-s-new-in-psycopg-2-7-7254305
Ref: 1d8254305
Ref: What’s new in psycopg 2 7 7-Footnote-1254634
Ref: What’s new in psycopg 2 7 7-Footnote-2254689
Node: What’s new in psycopg 2 7 6 1254744
Ref: news what-s-new-in-psycopg-2-7-6-1254916
Ref: 1d9254916
Ref: What’s new in psycopg 2 7 6 1-Footnote-1255155
Node: What’s new in psycopg 2 7 6255210
Ref: news what-s-new-in-psycopg-2-7-6255382
Ref: 1da255382
Ref: What’s new in psycopg 2 7 6-Footnote-1256225
Ref: What’s new in psycopg 2 7 6-Footnote-2256280
Ref: What’s new in psycopg 2 7 6-Footnote-3256335
Ref: What’s new in psycopg 2 7 6-Footnote-4256390
Ref: What’s new in psycopg 2 7 6-Footnote-5256445
Ref: What’s new in psycopg 2 7 6-Footnote-6256500
Node: What’s new in psycopg 2 7 5256555
Ref: news what-s-new-in-psycopg-2-7-5256725
Ref: 1db256725
Ref: What’s new in psycopg 2 7 5-Footnote-1257431
Ref: What’s new in psycopg 2 7 5-Footnote-2257486
Ref: What’s new in psycopg 2 7 5-Footnote-3257541
Ref: What’s new in psycopg 2 7 5-Footnote-4257596
Ref: What’s new in psycopg 2 7 5-Footnote-5257651
Ref: What’s new in psycopg 2 7 5-Footnote-6257706
Node: What’s new in psycopg 2 7 4257761
Ref: news what-s-new-in-psycopg-2-7-4257933
Ref: 1dc257933
Ref: What’s new in psycopg 2 7 4-Footnote-1259220
Ref: What’s new in psycopg 2 7 4-Footnote-2259275
Ref: What’s new in psycopg 2 7 4-Footnote-3259330
Ref: What’s new in psycopg 2 7 4-Footnote-4259385
Ref: What’s new in psycopg 2 7 4-Footnote-5259440
Ref: What’s new in psycopg 2 7 4-Footnote-6259495
Ref: What’s new in psycopg 2 7 4-Footnote-7259550
Ref: What’s new in psycopg 2 7 4-Footnote-8259605
Ref: What’s new in psycopg 2 7 4-Footnote-9259660
Ref: What’s new in psycopg 2 7 4-Footnote-10259715
Node: What’s new in psycopg 2 7 3 2259771
Ref: news what-s-new-in-psycopg-2-7-3-2259945
Ref: 1dd259945
Ref: What’s new in psycopg 2 7 3 2-Footnote-1260169
Ref: What’s new in psycopg 2 7 3 2-Footnote-2260224
Node: What’s new in psycopg 2 7 3 1260279
Ref: news what-s-new-in-psycopg-2-7-3-1260453
Ref: 1de260453
Node: What’s new in psycopg 2 7 3260639
Ref: news what-s-new-in-psycopg-2-7-3260811
Ref: 1df260811
Ref: What’s new in psycopg 2 7 3-Footnote-1261063
Node: What’s new in psycopg 2 7 2261118
Ref: news what-s-new-in-psycopg-2-7-2261288
Ref: 1e0261288
Ref: What’s new in psycopg 2 7 2-Footnote-1262798
Ref: What’s new in psycopg 2 7 2-Footnote-2262853
Ref: What’s new in psycopg 2 7 2-Footnote-3262908
Ref: What’s new in psycopg 2 7 2-Footnote-4262963
Ref: What’s new in psycopg 2 7 2-Footnote-5263018
Ref: What’s new in psycopg 2 7 2-Footnote-6263073
Ref: What’s new in psycopg 2 7 2-Footnote-7263128
Ref: What’s new in psycopg 2 7 2-Footnote-8263183
Ref: What’s new in psycopg 2 7 2-Footnote-9263238
Ref: What’s new in psycopg 2 7 2-Footnote-10263293
Ref: What’s new in psycopg 2 7 2-Footnote-11263349
Ref: What’s new in psycopg 2 7 2-Footnote-12263405
Ref: What’s new in psycopg 2 7 2-Footnote-13263461
Ref: What’s new in psycopg 2 7 2-Footnote-14263517
Ref: What’s new in psycopg 2 7 2-Footnote-15263573
Node: What’s new in psycopg 2 7 1263629
Ref: news what-s-new-in-psycopg-2-7-1263761
Ref: 1e1263761
Ref: What’s new in psycopg 2 7 1-Footnote-1264157
Ref: What’s new in psycopg 2 7 1-Footnote-2264212
Ref: What’s new in psycopg 2 7 1-Footnote-3264267
Node: What’s new in psycopg 2 7264322
Ref: news what-s-new-in-psycopg-2-7264472
Ref: 1e2264472
Ref: What’s new in psycopg 2 7-Footnote-1267837
Ref: What’s new in psycopg 2 7-Footnote-2267892
Ref: What’s new in psycopg 2 7-Footnote-3267947
Ref: What’s new in psycopg 2 7-Footnote-4268002
Ref: What’s new in psycopg 2 7-Footnote-5268057
Ref: What’s new in psycopg 2 7-Footnote-6268111
Ref: What’s new in psycopg 2 7-Footnote-7268166
Ref: What’s new in psycopg 2 7-Footnote-8268221
Ref: What’s new in psycopg 2 7-Footnote-9268295
Ref: What’s new in psycopg 2 7-Footnote-10268350
Ref: What’s new in psycopg 2 7-Footnote-11268406
Ref: What’s new in psycopg 2 7-Footnote-12268462
Ref: What’s new in psycopg 2 7-Footnote-13268518
Ref: What’s new in psycopg 2 7-Footnote-14268574
Ref: What’s new in psycopg 2 7-Footnote-15268630
Ref: What’s new in psycopg 2 7-Footnote-16268686
Ref: What’s new in psycopg 2 7-Footnote-17268742
Ref: What’s new in psycopg 2 7-Footnote-18268798
Ref: What’s new in psycopg 2 7-Footnote-19268854
Ref: What’s new in psycopg 2 7-Footnote-20268910
Ref: What’s new in psycopg 2 7-Footnote-21268966
Ref: What’s new in psycopg 2 7-Footnote-22269022
Ref: What’s new in psycopg 2 7-Footnote-23269078
Ref: What’s new in psycopg 2 7-Footnote-24269134
Ref: What’s new in psycopg 2 7-Footnote-25269190
Node: What’s new in psycopg 2 6 2269246
Ref: news what-s-new-in-psycopg-2-6-2269378
Ref: 1e3269378
Ref: What’s new in psycopg 2 6 2-Footnote-1270675
Ref: What’s new in psycopg 2 6 2-Footnote-2270730
Ref: What’s new in psycopg 2 6 2-Footnote-3270785
Ref: What’s new in psycopg 2 6 2-Footnote-4270840
Ref: What’s new in psycopg 2 6 2-Footnote-5270895
Ref: What’s new in psycopg 2 6 2-Footnote-6270950
Ref: What’s new in psycopg 2 6 2-Footnote-7271005
Ref: What’s new in psycopg 2 6 2-Footnote-8271060
Ref: What’s new in psycopg 2 6 2-Footnote-9271115
Ref: What’s new in psycopg 2 6 2-Footnote-10271170
Ref: What’s new in psycopg 2 6 2-Footnote-11271226
Ref: What’s new in psycopg 2 6 2-Footnote-12271282
Ref: What’s new in psycopg 2 6 2-Footnote-13271338
Ref: What’s new in psycopg 2 6 2-Footnote-14271394
Ref: What’s new in psycopg 2 6 2-Footnote-15271450
Node: What’s new in psycopg 2 6 1271506
Ref: news what-s-new-in-psycopg-2-6-1271638
Ref: 1e4271638
Ref: What’s new in psycopg 2 6 1-Footnote-1272124
Ref: What’s new in psycopg 2 6 1-Footnote-2272186
Ref: What’s new in psycopg 2 6 1-Footnote-3272241
Ref: What’s new in psycopg 2 6 1-Footnote-4272296
Ref: What’s new in psycopg 2 6 1-Footnote-5272351
Ref: What’s new in psycopg 2 6 1-Footnote-6272406
Node: What’s new in psycopg 2 6272461
Ref: news what-s-new-in-psycopg-2-6272611
Ref: 1e5272611
Ref: What’s new in psycopg 2 6-Footnote-1273456
Ref: What’s new in psycopg 2 6-Footnote-2273520
Ref: What’s new in psycopg 2 6-Footnote-3273575
Node: What’s new in psycopg 2 5 5273630
Ref: news what-s-new-in-psycopg-2-5-5273762
Ref: 1e6273762
Ref: What’s new in psycopg 2 5 5-Footnote-1274192
Ref: What’s new in psycopg 2 5 5-Footnote-2274247
Ref: What’s new in psycopg 2 5 5-Footnote-3274302
Ref: What’s new in psycopg 2 5 5-Footnote-4274357
Node: What’s new in psycopg 2 5 4274412
Ref: news what-s-new-in-psycopg-2-5-4274582
Ref: 1e7274582
Ref: What’s new in psycopg 2 5 4-Footnote-1275502
Ref: What’s new in psycopg 2 5 4-Footnote-2275557
Ref: What’s new in psycopg 2 5 4-Footnote-3275612
Ref: What’s new in psycopg 2 5 4-Footnote-4275667
Ref: What’s new in psycopg 2 5 4-Footnote-5275722
Ref: What’s new in psycopg 2 5 4-Footnote-6275777
Ref: What’s new in psycopg 2 5 4-Footnote-7275832
Node: What’s new in psycopg 2 5 3275887
Ref: news what-s-new-in-psycopg-2-5-3276057
Ref: 1e8276057
Ref: What’s new in psycopg 2 5 3-Footnote-1277675
Ref: What’s new in psycopg 2 5 3-Footnote-2277723
Ref: What’s new in psycopg 2 5 3-Footnote-3277778
Ref: What’s new in psycopg 2 5 3-Footnote-4277833
Ref: What’s new in psycopg 2 5 3-Footnote-5277888
Ref: What’s new in psycopg 2 5 3-Footnote-6277943
Ref: What’s new in psycopg 2 5 3-Footnote-7277998
Ref: What’s new in psycopg 2 5 3-Footnote-8278053
Ref: What’s new in psycopg 2 5 3-Footnote-9278108
Ref: What’s new in psycopg 2 5 3-Footnote-10278163
Ref: What’s new in psycopg 2 5 3-Footnote-11278219
Ref: What’s new in psycopg 2 5 3-Footnote-12278275
Node: What’s new in psycopg 2 5 2278331
Ref: news what-s-new-in-psycopg-2-5-2278501
Ref: 1e9278501
Ref: What’s new in psycopg 2 5 2-Footnote-1278923
Ref: What’s new in psycopg 2 5 2-Footnote-2278978
Ref: What’s new in psycopg 2 5 2-Footnote-3279033
Node: What’s new in psycopg 2 5 1279088
Ref: news what-s-new-in-psycopg-2-5-1279220
Ref: 1ea279220
Ref: What’s new in psycopg 2 5 1-Footnote-1279694
Ref: What’s new in psycopg 2 5 1-Footnote-2279749
Ref: What’s new in psycopg 2 5 1-Footnote-3279804
Node: What’s new in psycopg 2 5279859
Ref: news what-s-new-in-psycopg-2-5280009
Ref: 1eb280009
Ref: What’s new in psycopg 2 5-Footnote-1282078
Ref: What’s new in psycopg 2 5-Footnote-2282128
Ref: What’s new in psycopg 2 5-Footnote-3282183
Ref: What’s new in psycopg 2 5-Footnote-4282238
Ref: What’s new in psycopg 2 5-Footnote-5282293
Node: What’s new in psycopg 2 4 6282348
Ref: news what-s-new-in-psycopg-2-4-6282480
Ref: 1ec282480
Ref: What’s new in psycopg 2 4 6-Footnote-1283961
Ref: What’s new in psycopg 2 4 6-Footnote-2284016
Ref: What’s new in psycopg 2 4 6-Footnote-3284071
Ref: What’s new in psycopg 2 4 6-Footnote-4284126
Ref: What’s new in psycopg 2 4 6-Footnote-5284181
Ref: What’s new in psycopg 2 4 6-Footnote-6284236
Ref: What’s new in psycopg 2 4 6-Footnote-7284291
Ref: What’s new in psycopg 2 4 6-Footnote-8284346
Ref: What’s new in psycopg 2 4 6-Footnote-9284401
Ref: What’s new in psycopg 2 4 6-Footnote-10284456
Ref: What’s new in psycopg 2 4 6-Footnote-11284512
Ref: What’s new in psycopg 2 4 6-Footnote-12284568
Node: What’s new in psycopg 2 4 5284624
Ref: news what-s-new-in-psycopg-2-4-5284794
Ref: 1ed284794
Ref: What’s new in psycopg 2 4 5-Footnote-1285977
Ref: What’s new in psycopg 2 4 5-Footnote-2286031
Ref: What’s new in psycopg 2 4 5-Footnote-3286085
Ref: What’s new in psycopg 2 4 5-Footnote-4286139
Ref: What’s new in psycopg 2 4 5-Footnote-5286193
Ref: What’s new in psycopg 2 4 5-Footnote-6286247
Ref: What’s new in psycopg 2 4 5-Footnote-7286302
Node: What’s new in psycopg 2 4 4286357
Ref: news what-s-new-in-psycopg-2-4-4286527
Ref: 1ee286527
Ref: What’s new in psycopg 2 4 4-Footnote-1287297
Ref: What’s new in psycopg 2 4 4-Footnote-2287351
Ref: What’s new in psycopg 2 4 4-Footnote-3287405
Node: What’s new in psycopg 2 4 3287459
Ref: news what-s-new-in-psycopg-2-4-3287629
Ref: 1ef287629
Ref: What’s new in psycopg 2 4 3-Footnote-1288951
Ref: What’s new in psycopg 2 4 3-Footnote-2289005
Ref: What’s new in psycopg 2 4 3-Footnote-3289059
Ref: What’s new in psycopg 2 4 3-Footnote-4289113
Ref: What’s new in psycopg 2 4 3-Footnote-5289167
Ref: What’s new in psycopg 2 4 3-Footnote-6289221
Ref: What’s new in psycopg 2 4 3-Footnote-7289275
Ref: What’s new in psycopg 2 4 3-Footnote-8289329
Node: What’s new in psycopg 2 4 2289383
Ref: news what-s-new-in-psycopg-2-4-2289553
Ref: 1f0289553
Ref: What’s new in psycopg 2 4 2-Footnote-1290781
Ref: What’s new in psycopg 2 4 2-Footnote-2290835
Ref: What’s new in psycopg 2 4 2-Footnote-3290889
Ref: What’s new in psycopg 2 4 2-Footnote-4290943
Node: What’s new in psycopg 2 4 1290997
Ref: news what-s-new-in-psycopg-2-4-1291129
Ref: 1f1291129
Ref: What’s new in psycopg 2 4 1-Footnote-1291886
Ref: What’s new in psycopg 2 4 1-Footnote-2291940
Node: What’s new in psycopg 2 4291994
Ref: news what-s-new-in-psycopg-2-4292144
Ref: 1f2292144
Ref: What’s new in psycopg 2 4-Footnote-1294792
Ref: What’s new in psycopg 2 4-Footnote-2294846
Ref: What’s new in psycopg 2 4-Footnote-3294900
Node: What’s new in psycopg 2 3 2294954
Ref: news what-s-new-in-psycopg-2-3-2295086
Ref: 1f3295086
Ref: What’s new in psycopg 2 3 2-Footnote-1295331
Node: What’s new in psycopg 2 3 1295386
Ref: news what-s-new-in-psycopg-2-3-1295518
Ref: 1f4295518
Ref: What’s new in psycopg 2 3 1-Footnote-1295691
Node: What’s new in psycopg 2 3295746
Ref: news what-s-new-in-psycopg-2-3295896
Ref: 1f5295896
Ref: What’s new in psycopg 2 3-Footnote-1297640
Ref: What’s new in psycopg 2 3-Footnote-2297701
Ref: What’s new in psycopg 2 3-Footnote-3297762
Ref: What’s new in psycopg 2 3-Footnote-4297817
Node: What’s new in psycopg 2 2 2297872
Ref: news what-s-new-in-psycopg-2-2-2298004
Ref: 1f6298004
Node: What’s new in psycopg 2 2 1298591
Ref: news what-s-new-in-psycopg-2-2-1298723
Ref: 1f7298723
Node: What’s new in psycopg 2 2298854
Ref: news what-s-new-in-psycopg-2-2299004
Ref: 1f8299004
Node: What’s new in psycopg 2 0 14301480
Ref: news what-s-new-in-psycopg-2-0-14301614
Ref: 1f9301614
Node: What’s new in psycopg 2 0 13302581
Ref: news what-s-new-in-psycopg-2-0-13302754
Ref: 1fa302754
Node: What’s new in psycopg 2 0 12303110
Ref: news what-s-new-in-psycopg-2-0-12303283
Ref: 1fb303283
Node: What’s new in psycopg 2 0 11303925
Ref: news what-s-new-in-psycopg-2-0-11304098
Ref: 1fc304098
Node: What’s new in psycopg 2 0 10304543
Ref: news what-s-new-in-psycopg-2-0-10304715
Ref: 1fd304715
Node: What’s new in psycopg 2 0 9305984
Ref: news what-s-new-in-psycopg-2-0-9306158
Ref: 1fe306158
Node: What’s new in psycopg 2 0 9<2>306577
Ref: news id1306750
Ref: 1ff306750
Node: What’s new in psycopg 2 0 8307584
Ref: news what-s-new-in-psycopg-2-0-8307757
Ref: 200307757
Node: What’s new in psycopg 2 0 7308326
Ref: news what-s-new-in-psycopg-2-0-7308496
Ref: 201308496
Node: What’s new in psycopg 2 0 6310555
Ref: news what-s-new-in-psycopg-2-0-6310727
Ref: 202310727
Node: What’s new in psycopg 2 0 5 1312157
Ref: news what-s-new-in-psycopg-2-0-5-1312329
Ref: 203312329
Node: What’s new in psycopg 2 0 5312475
Ref: news what-s-new-in-psycopg-2-0-5312647
Ref: 204312647
Node: What’s new in psycopg 2 0 4313119
Ref: news what-s-new-in-psycopg-2-0-4313289
Ref: 205313289
Node: What’s new in psycopg 2 0 3313418
Ref: news what-s-new-in-psycopg-2-0-3313588
Ref: 206313588
Node: What’s new in psycopg 2 0 2313737
Ref: news what-s-new-in-psycopg-2-0-2313907
Ref: 207313907
Node: What’s new in psycopg 2 0 1314291
Ref: news what-s-new-in-psycopg-2-0-1314423
Ref: 208314423
Node: What’s new in psycopg 2 0314535
Ref: news what-s-new-in-psycopg-2-0314649
Ref: 209314649
Node: What’s new in psycopg 2 0 beta 7316445
Ref: news what-s-new-in-psycopg-2-0-beta-7316587
Ref: 20a316587
Node: What’s new in psycopg 2 0 beta 6317273
Ref: news what-s-new-in-psycopg-2-0-beta-6317458
Ref: 20b317458
Node: What’s new in psycopg 2 0 beta 5317813
Ref: news what-s-new-in-psycopg-2-0-beta-5317998
Ref: 20c317998
Node: What’s new in psycopg 2 0 beta 4318824
Ref: news what-s-new-in-psycopg-2-0-beta-4319009
Ref: 20d319009
Node: What’s new in psycopg 2 0 beta 3319467
Ref: news what-s-new-in-psycopg-2-0-beta-3319652
Ref: 20e319652
Node: What’s new in psycopg 2 0 beta 2319830
Ref: news what-s-new-in-psycopg-2-0-beta-2320015
Ref: 20f320015
Node: What’s new in psycopg 2 0 beta 1320384
Ref: news what-s-new-in-psycopg-2-0-beta-1320566
Ref: 210320566
Node: What’s new in psycopg 1 99 13321706
Ref: news what-s-new-in-psycopg-1-99-13321885
Ref: 211321885
Node: What’s new in psycopg 1 99 12322109
Ref: news what-s-new-in-psycopg-1-99-12322285
Ref: 212322285
Node: What’s new in psycopg 1 99 11322790
Ref: news what-s-new-in-psycopg-1-99-11322966
Ref: 213322966
Node: What’s new in psycopg 1 99 10323347
Ref: news what-s-new-in-psycopg-1-99-10323522
Ref: 214323522
Node: What’s new in psycopg 1 99 9324012
Ref: news what-s-new-in-psycopg-1-99-9324186
Ref: 215324186
Node: What’s new in psycopg 1 99 8324669
Ref: news what-s-new-in-psycopg-1-99-8324842
Ref: 216324842
Node: What’s new in psycopg 1 99 7325600
Ref: news what-s-new-in-psycopg-1-99-7325773
Ref: 217325773
Node: What’s new in psycopg 1 99 6326386
Ref: news what-s-new-in-psycopg-1-99-6326559
Ref: 218326559
Node: What’s new in psycopg 1 99 3327711
Ref: news what-s-new-in-psycopg-1-99-3327887
Ref: 219327887
Node: What’s new in psycopg 1 99 3<2>328126
Ref: news id2328302
Ref: 21a328302
Node: What’s new in psycopg 1 99 2328679
Ref: news what-s-new-in-psycopg-1-99-2328855
Ref: 21b328855
Node: What’s new in psycopg 1 99 1329566
Ref: news what-s-new-in-psycopg-1-99-1329739
Ref: 21c329739
Node: What’s new in psycopg 1 99 0330088
Ref: news what-s-new-in-psycopg-1-99-0330222
Ref: 21d330222
Node: License330492
Ref: license doc330590
Ref: 21e330590
Ref: license license330590
Ref: 21f330590
Ref: license mx-datetime330590
Ref: 220330590
Node: psycopg2 and the LGPL330674
Ref: license psycopg2-and-the-lgpl330769
Ref: 221330769
Node: Alternative licenses332170
Ref: license alternative-licenses332265
Ref: 222332265
Node: Python Module Index333291
Node: Index333600

End Tag Table


Local Variables:
coding: utf-8
End:
